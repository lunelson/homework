@function slice($list, $start-at: 1, $end-at: -1, $sep: list-separator($list)) {
  $out: ();
  @if $end-at < 0 { $end-at: $end-at + length($list) + 1; }
  @if $start-at > length($list) { @return (); }
  @if $start-at > 0 and $end-at >= $start-at {
    @for $i from $start-at through $end-at {
      $out: append($out, nth($list, $i), $sep);
    }
  }
  @return $out;
}

@function selector-last($parents: null) {
  $lasts: ();
  $parents: selector-parse($parents or &);
  @each $parent in $parents {
    $last: nth($parent, length($parent));
    @if not index($lasts, $last) and length($last) > 0 {
      $lasts: append($lasts, $last, 'comma');
    }
  }
  @return if($lasts!=(), selector-parse($lasts), null);
}


@function selector-initial($parents: null) {
  $out: ();
  $parents: selector-parse($parents or &);
  @each $parent in $parents {
    $initial: slice($parent, 1,  length($parent) - 1);
    @if not index($out, $initial) and length($initial) > 0 {
      $out: append($out, $initial, 'comma');
    }
  }
  @return if($out!=(), selector-parse($out), null);
}


@function selector-insert($selectors, $combinator: '', $parents: null) {
  $parents: selector-parse($parents or &); $out: ();
  $lasts: selector-last($parents);
  $initials: selector-initial($parents);
  $selectors: selector-parse(if(length($selectors) == 0, '', $selectors));
  @if length(nth($initials, 1)) > 0 {
    @for $i from 1 through length($initials) {
      @for $s from 1 through length($selectors) {
        @for $l from 1 through length($lasts) {
          $out: append($out, #{nth($initials, $i)} #{nth($selectors, $s)} #{$combinator} #{nth($lasts, $l)}, 'comma');
        }
      }
    }
  } @else {
    @for $s from 1 through length($selectors) {
      @for $l from 1 through length($lasts) {
        $out: append($out, #{nth($selectors, $s)} #{$combinator} #{nth($lasts, $l)}, 'comma');
      }
    }
  }
  @return selector-parse($out);
}


@function base-class($base, $_...) {
  @return selector-parse('.#{$base}, [class^="#{$base}-"], [class*=" #{$base}-"]'); }


#{base-class('stack')} {

  #{base-class('f')} {
    color: blue;

  }
}
// selector-last
// selector-initial
// selector-insert
.a, .b {
  color: blue;
  @at-root #{selector-insert('.c, .d', '> .e +')} {
    color: red;
  }
  @at-root #{selector-insert(selector-insert('.e, .f', '>', '.c, .d'), '+')} {
    color: red;
  }
}
