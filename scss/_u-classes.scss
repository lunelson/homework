///
/// CLASSES
///

@function base-class($base, $solo: true, $_...) {
  $solo-selector: if($solo, '.#{$base}, ', '');
  @return selector-parse('#{$solo-selector}[class^="#{$base}-"]:not([class$="#{$base}-"]), [class*=" #{$base}-"]:not([class$="#{$base}-"])');
}

@function state-prefix($state: $curr-m) {
  @return if($state and str-length($state) > 0, '#{$state}__', '');
}

@function m-base-class($base, $solo: true, $state: $curr-m, $_...) {
  $p__: state-prefix($state);
  $solo-selector: if($solo, '.#{$p__}#{$base}, ', '');
  @return selector-parse('#{$solo-selector}[class^="#{$p__}#{$base}-"]:not([class$="#{$p__}#{$base}-"]), [class*=" #{$p__}#{$base}-"]:not([class$="#{$p__}#{$base}-"])');
}

@function stateful-base-class($base, $solo: true, $_...) {
  $solo-selector: if($solo, '.#{$base}, [class*="__#{$base}"]:not([class*=" __#{$base}"]):not([class^="__#{$base}"]), ', '');
  @return selector-parse('#{$solo-selector}[class^="#{$base}-"]:not([class$="#{$base}-"]), [class*=" #{$base}-"]:not([class$="#{$base}-"]), [class*="__#{$base}-"]:not([class*=" __#{$base}-"]):not([class*="__#{$base}- "]):not([class$="__#{$base}-"]):not([class^="__#{$base}-"])');
}

@function state-prefixize($sel, $ms...) {
  $sel: selector-parse($sel); $out: ();
  @each $m in $ms {
    $fix: state-prefix($m);
    @each $sub in $sel {
      $out: append($out, selector-parse('#{$fix}#{$sub}'), 'comma');
    }
  }
  @return $out;
}
