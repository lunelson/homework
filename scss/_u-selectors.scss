///
/// SELECTOR
///

@function selector-last($parent-selector: null) {
  $parent-selector: selector-parse($parent-selector or &); $out: ();
  @each $list in $parent-selector {
    $last: nth($list, length($list));
    @if not index($out, $last) and length($last) > 0 {
      $out: append($out, $last, 'comma');
    }
  }
  @return if($out!=(), selector-parse($out), null);
}

@function selector-initial($parent-selector: null) {
  $parent-selector: selector-parse($parent-selector or &); $out: ();
  @each $list in $parent-selector {
    $initial: __slice($list, 1,  length($list) - 1);
    @if not index($out, $initial) and length($initial) > 0 {
      $out: append($out, $initial, 'comma');
    }
  }
  @return if($out!=(), selector-parse($out), null);
}

@function selector-insert($selectors, $combinator: '', $parent-selector: null) {
  $parent-selector: selector-parse($parent-selector or &);
  $out: ();
  $lasts: selector-last($parent-selector);
  $initials: selector-initial($parent-selector);
  $selectors: selector-parse(if(length($selectors) == 0, '', $selectors));
  @if length(nth($initials, 1)) > 0 {
    @for $i from 1 through length($initials) {
      @for $s from 1 through length($selectors) {
        @for $l from 1 through length($lasts) {
          $out: append($out, #{nth($initials, $i)} #{nth($selectors, $s)} #{$combinator} #{nth($lasts, $l)}, 'comma');
        }
      }
    }
  } @else {
    @for $s from 1 through length($selectors) {
      @for $l from 1 through length($lasts) {
        $out: append($out, #{nth($selectors, $s)} #{$combinator} #{nth($lasts, $l)}, 'comma');
      }
    }
  }
  @return selector-parse($out);
}

@function selector-not($sel, $nots) {
  @each $not in $nots { $sel: '#{$sel}:not(#{$not})' }
  @return selector-parse($sel);
}
