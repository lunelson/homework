//      _             _
//     | |           | |
//  ___| |_ __ _  ___| | __
// / __| __/ _` |/ __| |/ /
// \__ \ || (_| | (__|   <
// |___/\__\__,_|\___|_|\_\

// stack, plain, chain, (shim) -- implicitly responsive

// IDEA:
// rev-stack-(y) => stack using bottom-margin
// p-stack-(y) => stack using top-padding
// rev-p-stack-(y) => stack using bottom-padding


@mixin homework-setup-stack() {

  // NB: base-class plain connects to TYPO
  #{base-class('stack')}, #{base-class('plain')} {
    padding-top: 0.1px;
    padding-bottom: 0.1px;
    & > * {
      margin-top: 0;
      margin-bottom: 0;
    }
    & > * + * {
      margin-top: var(--stack-gap);
    }
  }

  // TODO: use this, or lose it
  #{base-class('stack')} {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    & > * {
      flex: 0 0 auto;
      width: 100%;
      width: fill-available;
      // width: available;
      width: stretch;
    }
  }

  #{base-class('chain')} {
    display: flex;
    flex-direction: row;
    align-items: center;
    & > * {
      flex: 0 0 auto;
      margin-right: 0;
      margin-left: 0;
      width: max-content;
    }
    & > * + * {
      margin-left: var(--chain-gap);
    }
  }

  @each $y in join((null), map-keys(inner-y-mods())) {
    $-y: mod-suffix($y);
    .stack#{$-y} > *, .plain#{$-y} > * { --stack-gap: var(--inner-y#{$-y}); }
    #{base-class('stack')} { > .shim#{$-y} { --stack-gap: var(--inner-y#{$-y}); } }
  }

  @each $x in join((null), map-keys(inner-x-mods())) {
    $-x: mod-suffix($x);
    .chain#{$-x} > * { --chain-gap: var(--inner-x#{$-x}); }
    #{base-class('chain')} { > .shim#{$-x} { --chain-gap: var(--inner-x#{$-x}); } }
  }

  .stack-0 > * { --stack-gap: 0; }
  .chain-0 > * { --chain-gap: 0; }

}
