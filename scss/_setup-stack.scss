//      _             _
//     | |           | |
//  ___| |_ __ _  ___| | __
// / __| __/ _` |/ __| |/ /
// \__ \ || (_| | (__|   <
// |___/\__\__,_|\___|_|\_\

// stack, plain, chain, (shim) -- implicitly responsive

@mixin homework-setup-stack($modern: $homework-is-modern) {

  .flex-stack {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    & > * { flex: 0 0 auto; }
  }

  #{base-class('stack')}, #{base-class('plain')} {
    padding-top: 0.1px;
    padding-bottom: 0.1px;
    & > * {
      margin-top: 0;
      margin-bottom: 0;
    }
    & > * + * {
      margin-top: var(--stack-gap, var(--inner-y));
    }
  }

  #{base-class('chain')} {
    display: flex;
    flex-direction: row;
    align-items: center;
    & > * {
      flex: 0 0 auto;
      margin-right: 0;
      margin-left: 0;
      text-overflow: ellipsis;
    }
    & > * + * {
      margin-left: var(--chain-gap, var(--inner-x));
    }
  }

  .stack-0 > * { --stack-gap: 0; }
  .chain-0 > * { --chain-gap: 0; }

  $inner-y-keys: map-keys(inner-y-mods());
  $inner-x-keys: map-keys(inner-x-mods());

  @each $y in $inner-y-keys {
    #{base-class('stack')}, #{base-class('plain')} { > .shim-#{$y} { --stack-gap: var(--inner-y-#{$y}); } }
    .stack-#{$y} > *, .plain-#{$y} > * { --stack-gap: var(--inner-y-#{$y}); }
  }

  @each $x in $inner-x-keys {
    #{base-class('chain')} { > .shim-#{$x} { --chain-gap: var(--inner-x-#{$x}); } }
    .chain-#{$x} > * { --chain-gap: var(--inner-x-#{$x}); }
  }

}
