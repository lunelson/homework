@mixin setup-debug($wrap-last: true, $color: rgba(185,185,185,0.2)) {

  $media-keys: join(null, map-keys($media));

  body {
    &.debug {
      &:before, &:after {
        display: block;
      }
    }
    &:before, &:after {
      display: none;
      position: fixed;
      bottom: 0;
      left: 0;
      z-index: 1100; // higher than all other layers ??
    }
    &:before {
      background-color: $color;
      padding: 1rem;

      @each $m in $media-keys {
        @include m($m) {
          content: '#{$m or "base"}'
        }
      }
    }

    &:after {
      content: '';
      top: 0;
      right: 0;
      margin-right: auto;
      margin-left: auto;
      pointer-events: none;

      $last-m: last($media-keys);

      @each $m in $media-keys {
        @include m($m) {
          $outer-right: m-var('outer-right');
          $outer-left: m-var('outer-left');
          $outer-x: add($outer-right, $outer-left);
          // TODO: account for different outer-right/-left
          // $outer-diff: subtract($outer-right, $outer-left);
          $inner-x: m-var('inner-x') or 2rem;
          $grid-columns: m-var('grid-columns') or 12;
          $repeat-width: divide(100%, $grid-columns);
          $column-width: subtract($repeat-width, $inner-x);
          width: subtract(100%, $outer-x);
          @if $wrap-last and $m == $last-m {
            max-width: subtract(m-var('breakpoint', $last-m), $outer-x);
          }
          background-image: repeating-linear-gradient(
            to right,
            $color,
            $color $column-width,
            transparent $column-width,
            transparent $repeat-width
          );
          background-size: add(100%, $inner-x) 100%;
        }
      }
    }
  }
}
