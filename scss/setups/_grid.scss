//             _     _
//            (_)   | |
//   __ _ _ __ _  __| |
//  / _` | '__| |/ _` |
// | (_| | |  | | (_| |
//  \__, |_|  |_|\__,_|
//   __/ |
//  |___/


@import 'support/grid-support';

@mixin homework-grid-setup($modern: true) {

  $max-columns: if(length($media) > 0, max-columns(), map-get($root, 'grid-columns'));
  $reduction-set: ();
  @for $d from 1 through $max-columns {
    @for $n from 1 through $d {
      $gcd: gcd($n, $d); $reduction: $n/$gcd $d/$gcd;
      $expansion-set: append(map-get($reduction-set, $reduction) or (), $n $d);
      $reduction-set: map-merge($reduction-set, ($reduction: $expansion-set));
    }
  }

  @if $modern {

    :root {
      --row-gap: var(--inner-y);
      --column-gap: var(--inner-x);
      --column-width: calc((var(--outer-width) + var(--column-gap)) / var(--grid-columns));
      --span-n: var(--grid-columns);
      --span-d: var(--grid-columns);
    }

    #{base-class('grid')} {
      margin-top: calc(var(--row-gap) / -2);
      margin-bottom: calc(var(--row-gap) / -2);
      & > * {
        padding-top: calc(var(--row-gap) / 2);
        padding-bottom: calc(var(--row-gap) / 2);
      }
    }

    #{base-class('row')} {
      & > * {
        padding-top: 0.01px;
        padding-bottom: 0.01px;
      }
    }

    #{base-class('row')},
    #{base-class('grid')} {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      margin-left: calc(var(--column-gap) / -2);
      margin-right: calc(var(--column-gap) / -2);
      // width: calc(100% + var(--column-gap)); // unset??
      & > * {
        flex: 1 1 0%; // explicit basis
        min-width: 0%; // https://css-tricks.com/flexbox-truncated-text/
        min-height: 1px;
        overflow-wrap: break-word; // break long words
        background-clip: content-box;
        padding-left: calc(var(--column-gap) / 2);
        padding-right: calc(var(--column-gap) / 2);
      }
      &.null {
        margin: 0;
        & > * { padding: 0; }
      }
    }

    @each $y, $mult in map-get($root, 'inner-y-mods') or () {
      .grid--#{$y} { --row-gap: var(--inner-y--#{$y}); }
    }
    @each $x, $mult in map-get($root, 'inner-x-mods') or () {
      .row--#{$x},
      .grid-x--#{$x} { --column-gap: var(--inner-x--#{$x}); }
    }

    // #{base-class('col')},
    // #{base-class('cell')},
    #{base-class('span')} {
      // display: flex;
      // flex-direction: column;
      flex: 0 0 auto;
      width: calc(100% * var(--span-n) / var(--span-d));
    }

    /* TODO
      - remove double spacing in class names !
      - add push-l/-r and pull-r/-l classes
      - consider reversion from span/push/pull to col/mr/ml
    */

    @each $m in join((null), map-keys($media)) {
      @include m($m) {

        @for $n from 1 through $max-columns {
          // .col--#{$n}#{m-suffix()},
          // .cell--#{$n}#{m-suffix()},
          .span--#{$n}#{m-suffix()} {
            --span-n: #{$n};
            & > * { --span-d: #{$n}; } //?
          }
        }

        // @each $reduction, $expansion-set in $reduction-set {
        //   $n: nth($reduction,1);
        //   $d: nth($reduction,2);
        //   // $col-selectors: list-map($expansion-set, 'col-n-d-class', 'comma');
        //   // $cell-selectors: list-map($expansion-set, 'cell-n-d-class', 'comma');
        //   $span-selectors: list-map($expansion-set, 'span-n-d-class', 'comma');
        //   @if length($span-selectors) > 0 {
        //     // #{$col-selectors},
        //     // #{$cell-selectors},
        //     #{$span-selectors} {
        //       --span-n: $n;
        //       --span-d: $d;
        //     }
        //   }
        // }
      }
    }

  }
}
