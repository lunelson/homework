//           _ _
//          | | |
//   ___ ___| | |
//  / __/ _ \ | |
// | (_|  __/ | |
//  \___\___|_|_|

// span-[n], push-[n], pull-[n],
// col-[n], row-[n], col-end-[n], row-end-[n]

$m__: '';
@function m__col-n-d($pair, $_...) { @return selector-parse('.#{$m__}col-#{nth($pair, 1)}-#{nth($pair, 2)}'); }
@function m__row-n-d($pair, $_...) { @return selector-parse('.#{$m__}row-#{nth($pair, 1)}-#{nth($pair, 2)}'); }

@mixin homework-setup-cell($row-classes: true) {

  // pre-calculations
  $max-cols: max-columns();
  $span-pair-list: ();
  $start-pair-list: ();
  $end-pair-list: ();
  @for $end from 2 through ($max-cols + 1) {
    @for $start from 1 through ($end - 1) {
      $span: ($end - $start);
      $span-pair-list: map-merge($span-pair-list, ($span: append(map-get($span-pair-list, $span) or (), ($start $end))));
      $start-pair-list: map-merge($start-pair-list, ($start: append(map-get($start-pair-list, $start) or (), ($start $end))));
      $end-pair-list: map-merge($end-pair-list, ($end: append(map-get($end-pair-list, $end) or (), ($start $end))));
    }
  }

  // make push CPs non-cascading
  *, *:before, *:after {
    --push-l: initial;
    --push-r: initial;
  }

  @each $m in join((null), media-keys()) {
    @include m($m) {

      // global bases:
      // span, push, pull
      // flow > &, grid > &

      #{m-base-class('span')} {
        width: calc((99.99999% + var(--col-gap)) * var(--col-span) / var(--col-base) - var(--col-gap));

        @at-root #{selector-insert(base-class('flow'), '>')} {
          width: calc(99.99999% * var(--col-span) / var(--col-base));
        }

        @at-root #{selector-insert(base-class('grid'), '>')} {
          width: unset; // NOTE: try initial?
          // grid-column: span var(--col-span) / span var(--col-span);
          // grid-row: span var(--row-span) / span var(--row-span);

        }
      }

      #{m-base-class('pull', false)},
      #{m-base-class('push', false)} {
        margin-left: calc((99.99999% + var(--col-gap)) * var(--push-l) / var(--col-base));

        @at-root #{selector-insert(base-class('flow'), '>')} {
          margin-left: calc(99.99999% * var(--push-l) / var(--col-base));
        }
      }

      #{m-base-class('pull-r', false)},
      #{m-base-class('push-r', false)} {
        margin-right: calc((99.99999% + var(--col-gap)) * var(--push-r) / var(--col-base));

        @at-root #{selector-insert(base-class('flow'), '>')} {
          margin-right: calc(99.99999% * var(--push-r) / var(--col-base));
        }
      }

      $m__: m-prefix() !global;

      .#{$m__}span-auto {
        @at-root #{selector-insert(m-base-class('flow'), '>')} {
          flex: 1 1 0%; --col-span: 0;
        }
        // !! span-auto does not seem to be meaningful
        // @at-root #{selector-insert(m-base-class('grid'), '>')} {
        //   grid-column: auto / auto;
        // }
      }

      .#{$m__}span-all { --col-span: var(--col-base); }

      // responsive mods:
      // span-[n], push-[n], pull-[n],
      // col-[n], row-[n], col-end-[n], row-end-[n]

      @each $span, $pair-list in $span-pair-list {

        // for solo, flow
        .#{$m__}span-#{$span},
        .#{$m__}cols-#{$span},
        #{__map($pair-list, 'm__col-n-d')} {
          & > * { --col-base: #{$span}; }
        }

        // for solo, flow, grid
        .#{$m__}span-#{$span},
        .#{$m__}col-span-#{$span},
        #{__map($pair-list, 'm__col-n-d')} {
          --col-span: #{$span};
        }

        // for grid only
        // .#{$m__}span-y-#{$span},
        .#{$m__}row-span-#{$span},
        #{__map($pair-list, 'm__row-n-d')} {
          --row-span: #{$span};
        }
        .#{$m__}cols-#{$span} {
          @at-root #{selector-unify(&, base-class('grid'))} {
            --col-span: #{$span};
          }
        }
        .#{$m__}rows-#{$span} {
          @at-root #{selector-unify(&, base-class('grid'))} {
            --row-span: #{$span};
          }
        }

        // #{__map($pair-list, 'm__col-n-d')} {
        //   --col-span: #{$span};
        //   & > * { --col-base: #{$span}; }
        // }

      }

      @each $start, $pair-list in $start-pair-list {

        .#{$m__}start-#{$start},
        .#{$m__}col-start-#{$start},
        #{__map($pair-list, 'm__col-n-d')} {
          grid-column-start: $start;
        }

        .#{$m__}row-start-#{$start},
        #{__map($pair-list, 'm__row-n-d')} {
          grid-row-start: $start;
        }
      }

      @each $end, $pair-list in $end-pair-list {

        .#{$m__}end-#{$end},
        .#{$m__}col-end-#{$end},
        #{__map($pair-list, 'm__col-n-d')} {
          grid-column-end: $end;
        }

        .#{$m__}row-end-#{$end},
        #{__map($pair-list, 'm__row-n-d')} {
          grid-row-end: $end;
        }
      }

      @for $p from 1 through ($max-cols - 1) {
        .#{$m__}push-#{$p} { --push-l: #{$p}; }
        .#{$m__}pull-#{$p} { --push-l: #{$p*-1}; }
        .#{$m__}push-r-#{$p} { --push-r: #{$p}; }
        .#{$m__}pull-r-#{$p} { --push-r: #{$p*-1}; }
      }

    }
  }
}
