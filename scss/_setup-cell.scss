//           _ _
//          | | |
//   ___ ___| | |
//  / __/ _ \ | |
// | (_|  __/ | |
//  \___\___|_|_|

// span-[n], push-[n], pull-[n],
// col-[n], row-[n], col-end-[n], row-end-[n]

$m__: '';
@function m__col-start-to-end($pair, $_...) { @return selector-parse('.#{$m__}col-#{nth($pair, 1)}-to-#{nth($pair, 2)}'); }
@function m__row-start-to-end($pair, $_...) { @return selector-parse('.#{$m__}row-#{nth($pair, 1)}-to-#{nth($pair, 2)}'); }

@mixin homework-setup-cell($row-classes: true) {

  // pre-calculations
  $max-cols: --max-columns();
  $span-pair-list: ();
  $start-pair-list: ();
  $end-pair-list: ();
  @for $end from 2 through ($max-cols + 1) {
    @for $start from 1 through ($end - 1) {
      $span: ($end - $start);
      $span-pair-list: map-merge($span-pair-list, ($span: append(map-get($span-pair-list, $span) or (), ($start $end))));
      $start-pair-list: map-merge($start-pair-list, ($start: append(map-get($start-pair-list, $start) or (), ($start $end))));
      $end-pair-list: map-merge($end-pair-list, ($end: append(map-get($end-pair-list, $end) or (), ($start $end))));
    }
  }

  // make push CPs non-cascading
  *, *:before, *:after {
    --col-push: initial;
    --col-push-r: initial;
  }

  @each $m in join((null), media-keys()) {
    @include m($m) {

      #{m-base-class('span')} {

        max-width: 100%;
        width: calc((99.99999% + var(--col-gap, var(--inner-x))) * var(--col-span, var(--grid-columns)) / var(--flow-columns, var(--grid-columns)) - var(--col-gap, var(--inner-x)));

        @at-root #{selector-insert(base-class('flow'), '>')} {
          width: calc(99.99999% * var(--col-span, var(--grid-columns)) / var(--flow-columns, var(--grid-columns)));
        }
        @at-root #{selector-insert(base-class('grid'), '>')} {
          width: unset; // NOTE: try initial?
        }
      }

      #{m-base-class('pull', false)},
      #{m-base-class('push', false)} {
        margin-left: calc((99.99999% + var(--col-gap, var(--inner-x))) * var(--col-push) / var(--flow-columns, var(--grid-columns)));

        @at-root #{selector-insert(base-class('flow'), '>')} {
          margin-left: calc(99.99999% * var(--col-push) / var(--flow-columns, var(--grid-columns)));
        }
      }

      #{m-base-class('pull-r', false)},
      #{m-base-class('push-r', false)} {
        margin-right: calc((99.99999% + var(--col-gap, var(--inner-x))) * var(--col-push-r) / var(--flow-columns, var(--grid-columns)));

        @at-root #{selector-insert(base-class('flow'), '>')} {
          margin-right: calc(99.99999% * var(--col-push-r) / var(--flow-columns, var(--grid-columns)));
        }
      }

      $m__: m-prefix() !global;

      .#{$m__}span-auto {
        @at-root #{selector-insert(m-base-class('flow'), '>')} {
          flex: 1 1 0%;
          --col-span: 0;
        }
      }

      .#{$m__}span-all { --col-span: var(--flow-columns, var(--grid-columns)); }

      @each $span, $pair-list in $span-pair-list {

        // FOR SOLO, FLOW
        .#{$m__}cols-#{$span},
        .#{$m__}span-#{$span},
        #{__map($pair-list, 'm__col-start-to-end')} {
          & > * { --flow-columns: #{$span}; }
        }

        // FOR SOLO, FLOW, GRID
        .#{$m__}span-#{$span},
        .#{$m__}col-span-#{$span},
        #{__map($pair-list, 'm__col-start-to-end')} {
          --col-span: #{$span};
        }

        // FOR GRID ONLY
        .#{$m__}row-span-#{$span},
        #{__map($pair-list, 'm__row-start-to-end')} {
          --row-span: #{$span};
        }
        .#{$m__}cols-#{$span} {
          @at-root #{selector-unify(&, base-class('grid'))} {
            --col-span: #{$span};
          }
        }
        .#{$m__}rows-#{$span} {
          @at-root #{selector-unify(&, base-class('grid'))} {
            --row-span: #{$span};
          }
        }

      }

      @each $start, $pair-list in $start-pair-list {

        .#{$m__}start-#{$start},
        .#{$m__}col-start-#{$start},
        #{__map($pair-list, 'm__col-start-to-end')} {
          grid-column-start: $start;
        }

        .#{$m__}row-start-#{$start},
        #{__map($pair-list, 'm__row-start-to-end')} {
          grid-row-start: $start;
        }
      }

      @each $end, $pair-list in $end-pair-list {

        .#{$m__}end-#{$end},
        .#{$m__}col-end-#{$end},
        #{__map($pair-list, 'm__col-start-to-end')} {
          grid-column-end: $end;
        }

        .#{$m__}row-end-#{$end},
        #{__map($pair-list, 'm__row-start-to-end')} {
          grid-row-end: $end;
        }
      }

      @for $p from 1 through ($max-cols - 1) {
        .#{$m__}push-#{$p} { --col-push: #{$p}; }
        .#{$m__}pull-#{$p} { --col-push: #{$p*-1}; }
        .#{$m__}push-r-#{$p} { --col-push-r: #{$p}; }
        .#{$m__}pull-r-#{$p} { --col-push-r: #{$p*-1}; }
      }

    }
  }
}
