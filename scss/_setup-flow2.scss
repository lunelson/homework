    /////////////////////////////////////////////
  ///////////// FUNCTIONS / MIXINS ////////////
/////////////////////////////////////////////

@function m-base-class($base, $solo: true, $m: $curr-m, $_...) {
  $sel: if($m, '#{$m}__#{$base}', $base);
  @if $solo {
    @return selector-parse('.#{$sel}, [class^="#{$sel}-"], [class*=" #{$sel}-"]');
  } @else {
    @return selector-parse('[class^="#{$sel}-"], [class*=" #{$sel}-"]');
  }
}

@function m-mod-class($base, $mod, $solo: true) {
  $sel: if($mod, '#{$base}-#{$mod}', #{$base});
  @if $solo {
    @return selector-parse(".#{$sel}, [class$='__#{$sel}'], [class*='__#{$sel} ']");
  } @else {
    @return selector-parse("[class$='__#{$sel}'], [class*='__#{$sel} ']");
  }
}

//   __ _                _____   _            _   _
//  / _| |              / __  \ | |          | | (_)
// | |_| | _____      __`' / /' | |_ ___  ___| |_ _ _ __   __ _
// |  _| |/ _ \ \ /\ / /  / /   | __/ _ \/ __| __| | '_ \ / _` |
// | | | | (_) \ V  V / ./ /___ | ||  __/\__ \ |_| | | | | (_| |
// |_| |_|\___/ \_/\_/  \_____/  \__\___||___/\__|_|_| |_|\__, |
//                                                         __/ |
//                                                        |___/
/*
  grid flow cell II

    @function solo-span
    @function solo-push

    @function flow-span
    @function flow-push

    @mixin solo-cell($span, $push-l, $push-r) {}
    @mixin solo-cells($span, $push-l, $push-r) {}

    @mixin flow-cell($span, $push-l, $push-r) {}
    @mixin flow-cells($span, $push-l, $push-r) {}

    .span-[n], .push-[l|r]-[n], .pull-[l|r]-[n]

    .flow-[y], .flow-x-[x]

      .span-[n], .push-[l|r]-[n], .pull-[l|r]-[n]

    .grid-[y], .grid-x-[x]

      .row-[s]-[e]
      .col-[s]-[e]

  REMINDERS:
    - only span, push, pull, span-y, row, and col have media variants
    - flow and grid need -x-[x] variants

*/


@mixin homework-setup-flow2($max-columns: max-columns(), $ratios: false) {

  :root {
    --row-gap: null;
    --col-gap: null;
    --row: initial;
    --col: initial;
    --cols: var(--grid-cols);
    --rows: var(--grid-rows, --grid-cols);
    --span: var(--cols);
    --span-y: 1;
    --push-r: initial;
    --push-l: initial;
  }

  *, *:before, *:after {
    --push-l: initial; // breaks inheritance
    --push-r: initial; // breaks inheritance
  }

  :root {
    --row-gap: var(--inner-y);
    --column-gap: var(--inner-x);
    --span-d: var(--grid-columns);
    --span-n: var(--span-d);
  }

      /////////////////////////////////////////////
    ////////// FLOW / GRID FOUNDATIONS //////////
  /////////////////////////////////////////////

  #{base-class('flow')} {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    width: calc(100% + var(--column-gap)) !important;;
    margin-left: calc(var(--column-gap) / -2);
    margin-right: calc(var(--column-gap) / -2);
    margin-top: calc(var(--row-gap) / -2);
    margin-bottom: calc(var(--row-gap) / -2);
    & > * {
      flex: 0 0 auto;
      width: 100%;
      min-width: 0%; // https://css-tricks.com/flexbox-truncated-text/
      min-height: 1px;
      background-clip: content-box;
      padding-left: calc(var(--column-gap) / 2) !important;
      padding-right: calc(var(--column-gap) / 2) !important;
      padding-top: calc(var(--row-gap) / 2) !important;
      padding-bottom: calc(var(--row-gap) / 2) !important;
    }
  }

  #{base-class('grid')} {
    display: grid;
    grid-template-columns: var(--cols);
    grid-template-rows: var(--rows);
  }

  $inner-y-keys: map-keys(inner-y-mods());
  @each $y in $inner-y-keys {
    .flow-#{$y}, .grid-#{$y} { --row-gap: var(--inner-y-#{$y}); }
  }
  .flow-0, .grid-0 { --row-gap: 0; }

  $inner-x-keys: map-keys(inner-x-mods());
  @each $x in $inner-x-keys {
    .flow-x-#{$x}, .grid-x-#{$x} { --col-gap: var(--inner-x-#{$x}); }
  }
  .flow-x-0, .grid-x-0 { --col-gap: 0; }

  .flow-0-0, .grid-0-0 { --row-gap: 0; --col-gap: 0; }

      /////////////////////////////////////////////
    ////////////// CELL FOUNDATIONS /////////////
  /////////////////////////////////////////////

  @each $m in join((null), media-keys()) {
    @include m($m) {

      #{m-base-class('span')} {
        width: calc((99.99999% + var(--col-gap)) * var(--span) / var(--cols) - var(--col-gap)) !important;

        @at-root #{selector-insert(base-class('flow'), '>')} {
          width: calc(99.99999% * var(--span) / var(--cols)) !important;
        }

        @at-root #{selector-insert(base-class('grid'), '>')} {
          grid-column-end: span var(--span);
        }
      }

      #{m-base-class('pull-l', false)},
      #{m-base-class('push-l', false)} {
        margin-left: calc((99.99999% + var(--col-gap)) * var(--push-l) / var(--cols)) !important;

        @at-root #{selector-insert(base-class('flow'), '>')} {
          margin-left: calc(99.99999% * var(--push-l) / var(--cols)) !important;
        }
      }

      #{m-base-class('pull-r', false)},
      #{m-base-class('push-r', false)} {
        margin-left: calc((99.99999% + var(--col-gap)) * var(--push-r) / var(--cols)) !important;

        @at-root #{selector-insert(base-class('flow'), '>')} {
          margin-left: calc(99.99999% * var(--push-r) / var(--cols)) !important;
        }
      }

      #{m-base-class('cols', false)} { grid-template-columns: var(--cols); }
      #{m-base-class('rows', false)} { grid-template-rows: var(--rows); }
      #{m-base-class('col', false)} { grid-column-start: var(--col); }
      #{m-base-class('row', false)} { grid-row-start: var(--row); }
      #{m-base-class('span-y', false)} { grid-row-end: span var(--span-y); }
    }
  }

      /////////////////////////////////////////////
    ////////////// CELL VARIATIONS //////////////
  /////////////////////////////////////////////

  @for $n from 0 through max-columns() {
    @if $n > 0 {
      #{m-mod-class('span', $n)} { --span: #{$n}; & > * { --cols: #{$n}; } }
      #{m-mod-class('span-y', $n)} { --span-y: #{$n}; }
      // #{m-mod-class('push-l-neg', $n)} { --push-l: #{$n*-1}; }
      // #{m-mod-class('push-r-neg', $n)} { --push-r: #{$n*-1}; }
    }
    #{m-mod-class('pull-l', $n)} { --push-l: #{$n*-1}; }
    #{m-mod-class('pull-r', $n)} { --push-r: #{$n*-1}; }
    #{m-mod-class('push-l', $n)} { --push-l: #{$n}; }
    #{m-mod-class('push-r', $n)} { --push-r: #{$n}; }
  }


  @for $b from 2 through (max-columns() + 1) {
    @for $a from 1 through ($b - 1) {
      // $pairs: append($pairs, #{$a}-#{$b});
      // $map: map-set($map, $a, append(map-get($map, $a) or (), ($a $b)));

      .row-#{$a}-#{$b} {
        grid-row: #{$a} / #{$b};
        // > * { --span: #{$b - $a}; }
      }
      .col-#{$a}-#{$b} {
        grid-column: #{$a} / #{$b};
        > * { --span: #{$b - $a}; }
      }
    }
  }
}
