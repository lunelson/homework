//        _   _ _ _ _   _
//       | | (_) (_) | (_)
//  _   _| |_ _| |_| |_ _  ___  ___
// | | | | __| | | | __| |/ _ \/ __|
// | |_| | |_| | | | |_| |  __/\__ \
//  \__,_|\__|_|_|_|\__|_|\___||___/

@mixin homework-setup-utilities() {

  // SKIP -- https://www.freecodecamp.org/news/how-to-design-website-layouts-for-screen-readers-347b7b06e9cc/
  // NB: alternative is .vhide.focus__vshow

  .skip {
      clip: rect(1px, 1px, 1px, 1px);
      position: absolute !important;
      height: 1px;
      width: 1px;
      overflow: hidden;
      // NB: many screen reader and browser combinations announce broken words as they would appear visually.
      word-wrap: normal !important;
    }

  .skip:focus {
      background-color: #fff;
      border-radius: 3px;
      box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.6);
      clip: auto !important;
      color: #888;
      display: block;
      font-weight: bold;
      height: auto; left: 5px;
      line-height: normal;
      padding: 15px 23px 14px;
      text-decoration: none;
      top: 5px;
      width: auto;
      z-index: 100000;
  }

  // hide visually-only / img replacement
  // https://developer.yahoo.com/blogs/ydn/clip-hidden-content-better-accessibility-53456.html
  // https://css-tricks.com/the-image-replacement-museum/

  .vhide {
    position: absolute;
    clip: rect(0 0 0 0); // IE6, IE7
    clip: rect(0, 0, 0, 0);
    height: 1px;
    width: 1px;
    padding: 0;
    margin: 0;
    overflow: hidden;
    &:hover {
      a, input, button, select, textarea {
        display: none;
      }
    }
  }

  .vshow {
    position: static;
    clip: initial;
    height: initial;
    width: initial;
    overflow: initial;
    &:hover {
      a, input, button, select, textarea {
        display: initial;
      }
    }
  }


  // font weights
  .fw-900, .fw-bolder, .fw-black { font-weight: 900; }
  .fw-800, .fw-extrabold { font-weight: 800; }
  .fw-700, .fw-bold { font-weight: 700; }
  .fw-600, .fw-semibold { font-weight: 600; }
  .fw-500, .fw-medium { font-weight: 500; }
  .fw-400, .fw-normal { font-weight: 400; }
  .fw-300, .fw-light { font-weight: 300; }
  .fw-200, .fw-extralight { font-weight: 200; }
  .fw-100, .fw-lighter, .fw-thin { font-weight: 100; }

  // font-styles
  .fs-italic { font-style: italic; }
  .fs-oblique { font-style: oblique; }
  .fs-normal { font-style: normal; }

  /////////////////////////////////////////////
  ///////////////// whitespace ////////////////
  /////////////////////////////////////////////

  .nobr { white-space: nowrap; text-overflow: ellipsis; }

  .ws-normal { white-space: normal; }
  .ws-nowrap { white-space: nowrap; }
  .ws-pre { white-space: pre; }
  .ws-pre-wrap { white-space: pre-wrap; }
  .ws-pre-line { white-space: pre-line; }

  /////////////////////////////////////////////
  ////////////////// overflow /////////////////
  /////////////////////////////////////////////

  #{base-class('clip')} {
    position: relative;
    z-index: 0; // make sure container can clip
  }

  .clip { overflow: hidden; }
  .clip-x { overflow-x: hidden; }
  .clip-y { overflow-y: hidden; }

  .over-auto { overflow: auto; }
  .over-scroll { overflow: scroll; }
  .over-hidden { overflow: hidden; }
  .over-visible { overflow: visible; }

  /////////////////////////////////////////////
  /////////////// layout control //////////////
  /////////////////////////////////////////////

  #{base-class('hold')} {
    position: relative;
  }

  .stop, .trap, .trim {
    padding-top: 0.1px;
    padding-bottom: 0.1px;
  }

  /////////////////////////////////////////////
  ////////////////// aspect /////////////////
  /////////////////////////////////////////////

  #{base-class('aspect')} {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    >* { flex: 0 0 auto; width: 100%; }
    &::before {
      content: '';
      display: block;
      width: 0.01px;
      height: 0;
      padding-bottom: calc(1 / var(--aspect, 1) * 100%);
    }
  }

  /////////////////////////////////////////////
  //////////// pointer interactions ////////////
  /////////////////////////////////////////////

  // (scroll-[auto|touch]) -- should maybe just be in reset
  .overscroll-auto { -webkit-overflow-scrolling: auto; }
  .overscroll-touch { -webkit-overflow-scrolling: touch; }

  // pointer-events
  .pe-auto { pointer-events: auto; }
  .pe-none { pointer-events: none; }

  // user-select -- none, auto, text
  .us-none { user-select: none; }
  .us-auto { user-select: auto; }
  .us-text { user-select: text; }

  // resize -- x|y|none|both
  .resize-none { resize: none; } // The element offers no user-controllable method for resizing it.
  .resize-both { resize: both; } // The element displays a mechanism for allowing the user to resize it, which may be resized both horizontally and vertically.
  .resize-x { resize: horizontal; } // The element displays a mechanism for allowing the user to resize it in the horizontal direction.
  .resize-y { resize: vertical; } // The element displays a mechanism for allowing the user to resize it in the vertical direction.

  // cursor
  .cur-default { cursor: default; } // platform-dependent default cursor. Typically an arrow.
  .cur-auto { cursor: auto; } // cursor based on the current context. E.g., equivalent to text when hovering text.
  .cur-none { cursor: none; } // no cursor

  // .cur-context-menu { cursor: context-menu; } // a context menu is available.
  .cur-help { cursor: help; } // help information is available.
  .cur-pointer { cursor: pointer; } // cursor is a (hand)-pointer that indicates a link
  // .cur-progress { cursor: progress; } // program is busy in the background (pointer + spinner)
  .cur-wait { cursor: wait; } // program is busy (spinner only)

  // .cur-cell { cursor: cell; } // table cell or set of cells can be selected.
  .cur-crosshair { cursor: crosshair; } // cross cursor, often used to indicate selection in a bitmap.
  .cur-text { cursor: text; } // text can be selected. Typically the shape of an I-beam.
  // .cur-vertical-text { cursor: vertical-text; } // vertical text can be selected

  // .cur-alias { cursor: alias; } // alias or shortcut is to be created.
  // .cur-copy { cursor: copy; } // something is to be copied.
  .cur-move { cursor: move; } // something is to be moved.
  .cur-no-drop { cursor: no-drop; } // tem may not be dropped at the current location.
  .cur-not-allowed { cursor: not-allowed; } // requested action will not be carried out.
  .cur-grab { cursor: grab; } // something can be grabbed (dragged to be moved).
  .cur-grabbing { cursor: grabbing; } // something is being grabbed (dragged to be moved).

  // .cur-all-scroll { cursor: all-scroll; } // Something can be scrolled in any direction (panned).
  // .cur-col-resize { cursor: col-resize; } // The item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them.
  // .cur-row-resize { cursor: row-resize; } // The item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them.
  .cur-n-resize { cursor: n-resize; } // edge can be moved out
  .cur-e-resize { cursor: e-resize; } // edge can be moved out
  .cur-s-resize { cursor: s-resize; } // edge can be moved out
  .cur-w-resize { cursor: w-resize; } // edge can be moved out
  .cur-ne-resize { cursor: ne-resize; } // corner can be moved out
  .cur-nw-resize { cursor: nw-resize; } // corner can be moved out
  .cur-se-resize { cursor: se-resize; } // corner can be moved out
  .cur-sw-resize { cursor: sw-resize; } // corner can be moved out
  .cur-ew-resize { cursor: ew-resize; } // edge can be moved in/out
  .cur-ns-resize { cursor: ns-resize; } // edge can be moved in/out
  .cur-nesw-resize { cursor: nesw-resize; } // corner can be moved in/out
  .cur-nwse-resize { cursor: nwse-resize; } // corner can be moved in/out

  .cur-zoom-in { cursor: zoom-in; } // zoom-in.gif
  .cur-zoom-out { cursor: zoom-out; } // zoom-out.gif
}
