//  _   _
// | | | |
// | |_| |__   ___ _ __ ___   ___
// | __| '_ \ / _ \ '_ ` _ \ / _ \
// | |_| | | |  __/ | | | | |  __/
//  \__|_| |_|\___|_| |_| |_|\___|

// $colors, $patterns, $weights, $radii, $shadows, $outlines
// theme-[color]
// c-, bgc-, bdc- ,fill- ,stroke-
//   -[color]
//   -theme
//   -contrast
//   -current
// bd- bdt-, bdr-, bdb-, bdl-
//   -1,-2,-3,-4,-5,-6,-7
//   -s,-m,-l,...
// bg-none/0, bd-none/0, ol-0/none
// bg-[position], bg-[attachment]
// bd-collapse/-separate
// radius- t-, r-, b-, l-, tl-, tr-, bl-, br-,
//   s, m, l, max,
//   oval
// shadow
//   sm, md, lg
//   none/0
//   -ol-
//     sm, md, lg



@mixin homework-setup-theme($modern: $homework-is-modern, $lite: true) {

  $colors: map-merge((
    dark: #010101,
    lite: #efefef,
  ), $colors) !global;

  @if $modern {

    :root {
      // NB: color custom props stored as RGB number list!!!!
      // due to this idea here: https://stackoverflow.com/questions/40010597/how-do-i-apply-opacity-to-a-css-color-variable/41265350#41265350

      --color-fg: #{rgbify(map-get($colors, if($lite, 'dark', 'lite')))};
      --color-bg: #{rgbify(map-get($colors, if($lite, 'lite', 'dark')))};
      // --bd-color: #{map-get($colors, if($lite, 'dark', 'lite'))};

      @each $c, $color in $colors {
        // NB: color custom props stored as RGB number list!!!!
        --color-#{$c}: #{rgbify($color)};
        --color-#{$c}-contrast: #{rgbify(yiq($color))};
        // --color-#{$c}-darkened: #{rgbify(mix($color, #000, 90%))};
        // --color-#{$c}-lightened: #{rgbify(mix($color, #fff, 75%))};
      }
    }

    body, #{base-class('fg', false)} { color: --rgb(var(--color-fg)); }
    body, #{base-class('bg', false)} { background-color: --rgb(var(--color-bg)); }
    // #{base-class('bd', false)} { border-color: --rgb(var(--bd-color)); }

    ///
    /// IMPLICIT CONTRAST COLORS
    ///

    .fg-contrast { --color-fg: var(--color-bg-contrast); }
    .bg-contrast { --color-bg: var(--color-fg-contrast); }

    @each $c, $color in $colors {

      ///
      /// EXPLICIT COLORS
      ///

      .fg-#{$c} {
        --color-fg: var(--color-#{$c});
        --color-fg-contrast: var(--color-#{$c}-contrast);
      }
      .bg-#{$c} {
        --color-bg: var(--color-#{$c});
        --color-bg-contrast: var(--color-#{$c}-contrast);
      }
      .fg-#{$c}-contrast {
        --color-fg: var(--color-#{$c}-contrast);
      }
      .bg-#{$c}-contrast {
        --color-bg: var(--color-#{$c}-contrast);
      }
      .theme-#{$c} {
        --theme-color: var(--color-#{$c});
        --theme-color-contrast: var(--color-#{$c}-contrast);
        // --theme-color-darkened: var(--color-#{$c}-darkened);
        // --theme-color-lightened: var(--color-#{$c}-lightened);
      }
    }

    ///
    /// IMPLICIT THEME COLORS
    ///

    .fg-theme {
      --color-fg: var(--theme-color);
      --color-fg-contrast: var(--theme-color-contrast);
    }
    .bg-theme {
      --color-bg: var(--theme-color);
      --color-bg-contrast: var(--theme-color-contrast);
    }
    .fg-theme-contrast {
      --color-fg: var(--theme-color-contrast);
    }
    .bg-theme-contrast {
      --color-bg: var(--theme-color-contrast);
    }

  } @else {

    $color-fg: map-get($colors, if($lite, 'dark', 'lite'));
    $color-bg: map-get($colors, if($lite, 'lite', 'dark'));

    body { color: $color-fg; }
    body { background-color: $color-bg; }

    .bg-contrast { background-color: yiq($color-fg); }
    .fg-contrast { color: yiq($color-bg); }

    @each $c, $color in $colors {

      .fg-#{$c} {
        color: $color;
        .bg-contrast, &.bg-contrast {
          background-color: yiq($color);
        }
      }
      .bg-#{$c} {
        background-color: $color;
        .fg-contrast, &.fg-contrast {
          color: yiq($color);
        }
      }
      .fg-contrast-#{$c} {
        color: yiq($color);
      }
      .bg-contrast-#{$c} {
        background-color: yiq($color);
      }
      .theme-#{$c} {

        .fg-theme {
          color: $color;
          .bg-contrast, &.bg-contrast {
            background-color: yiq($color);
          }
        }
        .bg-theme {
          background-color: $color;
          .fg-contrast, &.fg-contrast {
            color: yiq($color);
          }
        }
        .fg-contrast-theme {
          color: yiq($color);
        }
        .bg-contrast-theme {
          background-color: yiq($color);
        }

      }
    }

  }
}
