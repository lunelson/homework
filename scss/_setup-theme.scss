//  _   _
// | | | |
// | |_| |__   ___ _ __ ___   ___
// | __| '_ \ / _ \ '_ ` _ \ / _ \
// | |_| | | |  __/ | | | | |  __/
//  \__|_| |_|\___|_| |_| |_|\___|


$colors: () !default;

// $grays: () !default;

// TODO: this should be a map, not a list!!
// -- stick with the s, m, l pattern
$widths: 1 2 4 8 16 !default;

// TODO: this should be a map, not a list!!
// -- stick with the s, m, l pattern
$radii: 2 4 6 8 !default;

$shadows: (
  s: 2 3 4 5,
  m: 2 3 4 5,
  l: 2 3 4 5,
) !default;

@function list-to-map($arg) {
  @if type-of($arg) == 'map' { @return $arg; }
  @if type-of($arg) != 'list' { @return error('list-to-map: $arg must be a list'); }
  $out: ();
  @for $n from 1 through length($arg) {
    $out: map-merge($out, ($n: nth($arg, $n)));
  }
  @return $out;
}


@mixin homework-setup-theme($base: lite) {

  $colors: map-merge((
    dark: #141414,
    lite: #F5F5F5,
  ), $colors) !global;

  $color-names: ();

  :root {
    // NB: color custom props stored as RGB number list!!!!
    // due to this idea here: https://stackoverflow.com/questions/40010597/how-do-i-apply-opacity-to-a-css-color-variable/41265350#41265350
    // @each $c, $color in $colors {
    //   --color-#{$c}: #{rgbify($color)};
    //   --contrast-#{$c}: #{rgbify(contrast-color($color))};
    // }
    @each $c, $color in $colors {
      @if length($color) > 1 {
        @each $n, $subcolor in list-to-map($color) {
          --color-#{$c}-#{$n}: #{rgbify($subcolor)};
          --contrast-#{$c}-#{$n}: #{rgbify(contrast-color($subcolor))};
          $color-names: append($color-names, #{$c}-#{$n});
        }
      } @else {
        --color-#{$c}: #{rgbify($color)};
        --contrast-#{$c}: #{rgbify(contrast-color($color))};
        $color-names: append($color-names, $c);
      }
    }
  }

  body {
    background-color: rgb(var(--color-#{$base}));
    color: rgb(var(--contrast-#{$base}));
  }

  // HTML elements
  #{base-class('fg', false)} {
    color: rgba(var(--fg-color), var(--fg-opacity, 1));
  }
  #{base-class('bg', false)} {
    background-color: rgba(var(--bg-color), var(--bg-opacity, 1));
  }
  #{base-class('bd', false)} {
    border-color: rgba(var(--bd-color, --fg-color), var(--bd-opacity, 1));
    border-style: var(--bd-style, solid);
    border-top-width: var(--bd-top-width, 0);
    border-right-width: var(--bd-right-width, 0);
    border-bottom-width: var(--bd-bottom-width, 0);
    border-left-width: var(--bd-left-width, 0);
  }
  #{base-class('ol', false)} {
    outline-color: rgba(var(--ol-color, --fg-color), var(--ol-opacity, 1));
    outline-width: var(--ol-width);
  }

  // SVG elements
  #{base-class('fill', false)} {
    fill: rgb(var(--fill-color));
    fill-opacity: var(--fill-opacity, 1);
  }
  #{base-class('stroke', false)} {
    stroke: rgb(var(--stroke-color));
    stroke-opacity: var(--stroke-opacity, 1);
    stroke-width: var(--stroke-width);
  }

  /////////////////////////////////////////////
  ////////////////// [color] //////////////////
  /////////////////////////////////////////////

  @each $c in $color-names {
    .theme-#{$c} { --theme-color: var(--color-#{$c});
      --theme-contrast: var(--contrast-#{$c}); }
    .fg-#{$c} { --fg-color: var(--color-#{$c});
      --fg-contrast: var(--contrast-#{$c}); }
    .bg-#{$c} { --bg-color: var(--color-#{$c});
      --bg-contrast: var(--contrast-#{$c}); }
    .bd-#{$c} { --bd-color: var(--color-#{$c}); }
    .ol-#{$c} { --ol-color: var(--color-#{$c}); }
    .fill-#{$c} { --fill-color: var(--color-#{$c}); }
    .stroke-#{$c} { --stroke-color: var(--color-#{$c}); }
  }

  /////////////////////////////////////////////
  ///////////////// [opacity] /////////////////
  /////////////////////////////////////////////

  @for $n from 0 through 9 {
    .fg-fade-#{$n} { --fg-opacity: #{$n/10}; }
    .bg-fade-#{$n} { --bg-opacity: #{$n/10}; }
    .bd-fade-#{$n} { --bd-opacity: #{$n/10}; }
    .ol-fade-#{$n} { --ol-opacity: #{$n/10}; }
    .fill-fade-#{$n} { --fill-opacity: #{$n/10}; }
    .stroke-fade-#{$n} { --stroke-opacity: #{$n/10}; }
  }

  /////////////////////////////////////////////
  ////////////////// contrast /////////////////
  /////////////////////////////////////////////

  // rare case, of choosing black/white vs fg color
  .bg-contrast { --bg-color: var(--fg-contrast); }
  // otherwise assume contrast against the bg color
  .fg-contrast { --fg-color: var(--bg-contrast); }
  .bd-contrast { --bd-color: var(--bg-contrast); }
  .ol-contrast { --ol-color: var(--bg-contrast); }
  .fill-contrast { --fill-color: var(--bg-contrast); }
  .stroke-contrast { --stroke-color: var(--bg-contrast); }

  /////////////////////////////////////////////
  /////////////////// theme ///////////////////
  /////////////////////////////////////////////

  .fg-theme { --fg-color: var(--theme-color);
    --fg-contrast: var(--theme-contrast); }
  .bg-theme { --bg-color: var(--theme-color);
    --bg-contrast: var(--theme-contrast); }
  .bd-theme { --bd-color: var(--theme-color); }
  .ol-theme { --ol-color: var(--theme-color); }
  .fill-theme { --fill-color: var(--theme-color); }
  .stroke-theme { --stroke-color: var(--theme-color); }

  /////////////////////////////////////////////
  ////////////////// current //////////////////
  /////////////////////////////////////////////

  .fill-current { fill: currentColor; } // ? --fill-color: var(--fg-color);
  .stroke-current { stroke: currentColor; } // ? --stroke-color: var(--fg-color);

  /////////////////////////////////////////////
  //////////////// transparent ////////////////
  /////////////////////////////////////////////

  // NOTE: these could also work by setting respective --[key]-opacity to 0
  .bg-clear { background-color: transparent; } // ? --bg-color: initial;
  .bd-clear { border-color: transparent; } // ? --bd-color: initial;
  .ol-clear { outline-color: transparent; } // ? --ol-color: initial;
  .fill-clear { fill: transparent; } // ? --fill-color: initial;
  .stroke-clear { stroke: transparent; } // ? --stroke-color: initial;

  /////////////////////////////////////////////
  ////////////////// [width] //////////////////
  /////////////////////////////////////////////

  @each $w in join((0), $widths) {
    :root { --width-#{$w}: #{$w * 1px}; }
    .bd-#{$w}, .bd-top-#{$w} { --bd-top-width: var(--width-#{$w}); }
    .bd-#{$w}, .bd-right-#{$w} { --bd-right-width: var(--width-#{$w}); }
    .bd-#{$w}, .bd-bottom-#{$w} { --bd-bottom-width: var(--width-#{$w}); }
    .bd-#{$w}, .bd-left-#{$w} { --bd-left-width: var(--width-#{$w}); }
    .ol-#{$w} { --ol-width: var(--width-#{$w}); }
    .stroke-#{$w} { --stroke-width: var(--width-#{$w}); }
  }

  /////////////////////////////////////////////
  ////////////////// [radius] /////////////////
  /////////////////////////////////////////////

  @each $r in $radii {
    :root { --radius-#{$r}: #{$r * 1px}; }
    .rnd-#{$r}, .rnd-t-#{$r}, .rnd-tl-#{$r} { border-top-left-radius: var(--radius-#{$r}); }
    .rnd-#{$r}, .rnd-t-#{$r}, .rnd-tr-#{$r} { border-top-right-radius: var(--radius-#{$r}); }
    .rnd-#{$r}, .rnd-b-#{$r}, .rnd-bl-#{$r} { border-bottom-left-radius: var(--radius-#{$r}); }
    .rnd-#{$r}, .rnd-b-#{$r}, .rnd-br-#{$r} { border-bottom-right-radius: var(--radius-#{$r}); }
  }
  .oval { border-radius: 50%; }
  .pill { border-radius: 50vmin; }

  /////////////////////////////////////////////
  ////////// shadows, shadow-outlines /////////
  /////////////////////////////////////////////

  // shadows:
  //   1. cast shadows
  //     see: https://codepen.io/scottyzen/full/KbNRJq
  //     should calculate automatically
  //     should break in to component parts, i.e. color, height
  //   2. outline shadows
  //     see bootstrap

  /////////////////////////////////////////////
  /////////////////// other ///////////////////
  /////////////////////////////////////////////

  // bg-[position], bg-[attachment]
  // bd-collapse/-separate

  /////////////////////////////////////////////
  ////////////////// [states] /////////////////
  /////////////////////////////////////////////

  // hov, hover
  // foc, focus
  // act, active
  // dis, disabled
  // parent-hov, parent-hover
  // foc-within, focus-within
}
