//  _   _
// | | | |
// | |_| |__   ___ _ __ ___   ___
// | __| '_ \ / _ \ '_ ` _ \ / _ \
// | |_| | | |  __/ | | | | |  __/
//  \__|_| |_|\___|_| |_| |_|\___|

// $colors, $patterns, $weights, $radii, $shadows, $outlines
// theme-[color]
// c-, bgc-, bdc- ,fill- ,stroke-
//   -[color]
//   -theme
//   -contra
//   -current
// bd- bdt-, bdr-, bdb-, bdl-
//   -1,-2,-3,-4,-5,-6,-7
//   -s,-m,-l,...
// bg-none/0, bd-none/0, ol-0/none
// bg-[position], bg-[attachment]
// bd-collapse/-separate
// radius- t-, r-, b-, l-, tl-, tr-, bl-, br-,
//   s, m, l, max,
//   oval
// shadow
//   sm, md, lg
//   none/0
//   -ol-
//     sm, md, lg

// TODO: this should be a map, not a list!!
// -- stick with the s, m, l pattern
$widths: 1 2 3 4 !default;

// TODO: this should be a map, not a list!!
// -- stick with the s, m, l pattern
$radii: 2 4 6 8 !default;

$shadows: (
  // TODO: a way to calculate these in terms of 'lifting up'?
  // TODO: break down in to smaller properties
  s: 2 3 4 5,
  m: 2 3 4 5,
  l: 2 3 4 5,
) !default;


@mixin homework-setup-theme($base: lite) {

  :root {
    // NB: color custom props stored as RGB number list!!!!
    // due to this idea here: https://stackoverflow.com/questions/40010597/how-do-i-apply-opacity-to-a-css-color-variable/41265350#41265350
    @each $c, $color in $colors {
      --color-#{$c}: #{rgbify($color)};
      --color-contra-#{$c}: #{rgbify(yiq($color))};
    }
  }

  // TODO: make sure the yiq function is working with dark and lite values
  body {
    background-color: rgb(var(--color-#{$base}));
    color: rgb(var(--color-contra-#{$base}));
  }

  // HTML elements
  #{base-class('c', false)} {
    color: rgba(var(--fg-color), var(--fg-opacity, 1));
  }
  #{base-class('bg', false)} {
    background-color: rgba(var(--bg-color), var(--bg-opacity, 1));
  }
  #{base-class('bd', false)} {
    border-color: rgba(var(--bd-color, --fg-color), var(--bd-opacity, 1));
    border-top-width: var(--bd-t-width);
    border-right-width: var(--bd-r-width);
    border-bottom-width: var(--bd-b-width);
    border-left-width: var(--bd-l-width);
  }
  #{base-class('ol', false)} {
    outline-color: rgba(var(--ol-color, --fg-color), var(--ol-opacity, 1));
    outline-width: var(--ol-width);
  }
  // SVG elements
  #{base-class('fill', false)} {
    fill: rgb(var(--fill-color));
    fill-opacity: var(--fill-opacity, 1);
  }
  #{base-class('stroke', false)} {
    stroke: rgb(var(--stroke-color));
    stroke-opacity: var(--stroke-opacity, 1);
    stroke-width: var(--stroke-width);
  }

  /////////////////////////////////////////////
  ////////////////// [color] //////////////////
  /////////////////////////////////////////////

  @each $c, $color in $colors {
    .theme-#{$c} { --theme-color: var(--color-#{$c});
      --theme-color-contra: var(--color-contra-#{$c}); }
    .fg-#{$c} { --fg-color: var(--color-#{$c});
      --fg-color-contra: var(--color-contra-#{$c}); }
    .bg-#{$c} { --bg-color: var(--color-#{$c});
      --bg-color-contra: var(--color-contra-#{$c}); }
    .bd-#{$c} { --bd-color: var(--color-#{$c}); }
    .ol-#{$c} { --ol-color: var(--color-#{$c}); }
    .fill-#{$c} { --fill-color: var(--color-#{$c}); }
    .stroke-#{$c} { --stroke-color: var(--color-#{$c}); }
  }

  /////////////////////////////////////////////
  ///////////////// [opacity] /////////////////
  /////////////////////////////////////////////

  @for $n from 0 through 9 {
    .fg-fade-0#{$n} { --fg-opacity: $n/10; }
    .bg-fade-0#{$n} { --bg-opacity: $n/10; }
    .bd-fade-0#{$n} { --bd-opacity: $n/10; }
    .ol-fade-0#{$n} { --ol-opacity: $n/10; }
    .fill-fade-0#{$n} { --fill-opacity: $n/10; }
    .stroke-fade-0#{$n} { --stroke-opacity: $n/10; }
  }

  /////////////////////////////////////////////
  ////////////////// contra /////////////////
  /////////////////////////////////////////////

  // rare case, of choosing black/white vs fg color
  .bg-contra { --bg-color: var(--fg-color-contra); }
  // otherwise assume contra against the bg color
  .fg-contra { --fg-color: var(--bg-color-contra); }
  .bd-contra { --bd-color: var(--bg-color-contra); }
  .ol-contra { --ol-color: var(--bg-color-contra); }
  .fill-contra { --fill-color: var(--bg-color-contra); }
  .stroke-contra { --stroke-color: var(--bg-color-contra); }

  /////////////////////////////////////////////
  /////////////////// theme ///////////////////
  /////////////////////////////////////////////

  .fg-theme { --fg-color: var(--theme-color);
    --fg-color-contra: var(--theme-color-contra); }
  .bg-theme { --bg-color: var(--theme-color);
    --bg-color-contra: var(--theme-color-contra); }
  .bd-theme { --bd-color: var(--theme-color); }
  .ol-theme { --ol-color: var(--theme-color); }
  .fill-theme { --fill-color: var(--theme-color); }
  .stroke-theme { --stroke-color: var(--theme-color); }

  /////////////////////////////////////////////
  ////////////////// current //////////////////
  /////////////////////////////////////////////

  .fill-current { fill: currentColor; } // ? --fill-color: var(--fg-color);
  .stroke-current { stroke: currentColor; } // ? --stroke-color: var(--fg-color);

  /////////////////////////////////////////////
  //////////////// transparent ////////////////
  /////////////////////////////////////////////

  // NOTE: these could also work by setting respective --[key]-opacity to 0
  .bg-clear { background-color: transparent; } // ? --bg-color: initial;
  .bd-clear { border-color: transparent; } // ? --bd-color: initial;
  .ol-clear { outline-color: transparent; } // ? --ol-color: initial;
  .fill-clear { fill: transparent; } // ? --fill-color: initial;
  .stroke-clear { stroke: transparent; } // ? --stroke-color: initial;

  /////////////////////////////////////////////
  ////////////////// [width] //////////////////
  /////////////////////////////////////////////

  @each $w in join((0), $widths) {
    :root { --width-#{$w}: $w * 1px; }
    .bd-#{$w}, .bd-t-#{$w} { --bd-t-width: var(--width-#{$w}); }
    .bd-#{$w}, .bd-r-#{$w} { --bd-r-width: var(--width-#{$w}); }
    .bd-#{$w}, .bd-b-#{$w} { --bd-b-width: var(--width-#{$w}); }
    .bd-#{$w}, .bd-l-#{$w} { --bd-l-width: var(--width-#{$w}); }
    .ol-#{$w} { --ol-width: var(--width-#{$w}); }
    .stroke-#{$w} { --stroke-width: var(--width-#{$w}); }
  }

  /////////////////////////////////////////////
  ////////////////// [radius] /////////////////
  /////////////////////////////////////////////

  @each $r in $radii {
    :root { --radius-#{$r}: $r * 1px; }
    .rnd-#{$r}, .rnd-t-#{$r}, .rnd-tl-#{$r} { border-top-left-radius: var(--radius-#{$r}); }
    .rnd-#{$r}, .rnd-t-#{$r}, .rnd-tr-#{$r} { border-top-right-radius: var(--radius-#{$r}); }
    .rnd-#{$r}, .rnd-b-#{$r}, .rnd-bl-#{$r} { border-bottom-left-radius: var(--radius-#{$r}); }
    .rnd-#{$r}, .rnd-b-#{$r}, .rnd-br-#{$r} { border-bottom-right-radius: var(--radius-#{$r}); }
  }
  .oval { border-radius: 50%; }
  .pill { border-radius: 50vmin; }

  /////////////////////////////////////////////
  ////////// shadows, shadow-outlines /////////
  /////////////////////////////////////////////

/*   shadow
  sm, md, lg
  none/0
  -ol-
    sm, md, lg

    .bd-l-xl.bd-contra.bg-theme.fg-contra.
      button.btn-s.rnd-tl-
 */
  /////////////////////////////////////////////
  /////////////////// other ///////////////////
  /////////////////////////////////////////////

  // bg-[position], bg-[attachment]
  // bd-collapse/-separate

}
