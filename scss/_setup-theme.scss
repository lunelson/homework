//  _   _
// | | | |
// | |_| |__   ___ _ __ ___   ___
// | __| '_ \ / _ \ '_ ` _ \ / _ \
// | |_| | | |  __/ | | | | |  __/
//  \__|_| |_|\___|_| |_| |_|\___|

$colors: () !default;
$themes: () !default;

$all-pseudos: 'hover', 'focus', 'active', 'target', 'disabled', 'focus-within', 'parent-hover', 'parent-focus';

@function __var($vars, $suffix: '', $prefix: '') {
  @return var(--#{$prefix}#{nth($vars, 1)}#{$suffix}#{if(length($vars)>1,', #{__var(__slice($vars, 2), $suffix, $prefix)}','')});
}

$prop-var-fallbacks: (
  fg: fg,
  bg: bg,
  bd: bd fg,
  ol: ol fg,
  fill: fill fg,
  stroke: stroke fg,
  link: link fg,
  visited: visited link fg,
  hover: hover link fg,
  focus: focus hover link fg,
  active: active hover link fg,
);

@mixin homework-setup-theme( $black: #000, $white: #FFF, $pseudos: () ) {

  $colors: map-merge((
    'base-black': $black,
    'base-white': $white,
  ), $colors) !global;

  $color-names: ();

  :root {

    @each $prop, $vars in $prop-var-fallbacks {
      --#{$prop}-color: #{__var($vars, '-color', 'theme-')};
      @if index(fg bg, $prop) {
        --#{$prop}-contrast: #{__var($vars, '-contrast', 'theme-')};
      }
    }

    // NB: color custom props stored as RGB number list!!!!
    // original idea --> https://stackoverflow.com/questions/40010597/how-do-i-apply-opacity-to-a-css-color-variable/41265350#41265350
    @each $c, $color in $colors {
      @if length($color) > 1 {
        @each $n, $subcolor in __list-to-index-map($color) {
          --color-#{$c}-#{$n}: #{rgbify($subcolor)};
          --contrast-#{$c}-#{$n}: #{rgbify(contrast-color($subcolor))};
          $color-names: append($color-names, #{$c}-#{$n});
        }
      } @else {
        --color-#{$c}: #{rgbify($color)};
        --contrast-#{$c}: #{if($c=='base-white','var(--color-base-black)',if($c=='base-black','var(--color-base-white)',rgbify(contrast-color($color))))};
        $color-names: append($color-names, $c);
      }
    }
  }

  $i: 1;
  @each $t, $theme in $themes {
    .theme-#{$t},
    #{if($i == 1, ':root', '')} {
      @each $prop, $color in $theme {
        --theme-#{$prop}-color: var(--color-#{$color});
        @if index(fg bg, $prop) {
          --theme-#{$prop}-contrast: var(--contrast-#{$color});
        }
      }
    }
    $i: $i + 1;
  }

  body {
    color: rgba(var(--fg-color), var(--fg-opacity, 1));
    background-color: rgba(var(--bg-color), var(--bg-opacity, 1));
  }

  @each $state in (link, visited, hover, focus, active) {
    a:#{$state} {
      color: rgba(#{__var($state, '-color')}, var(--fg-opacity, 1));
    }
  }

  @each $pseudo in join('', $pseudos) {

    $p__: state-prefix($pseudo);

    $sel: if(str-length($pseudo) > 0,
      if(not not str-index($pseudo, 'parent-'),
        '.parent:#{str-slice($pseudo, 8)} &',
        '&:#{$pseudo}'),
      '&');

    #{state-base-class('fg', false, $pseudo)} { #{$sel} {
      color: rgba(var(--fg-color), var(--fg-opacity, 1));
    } }

    #{state-base-class('bg', false, $pseudo)} { #{$sel} {
      background-color: rgba(var(--bg-color), var(--bg-opacity, 1));
    } }

    #{state-base-class('bd', false, $pseudo)} { #{$sel} {
      border-color: rgba(__prop-color-var(bd, fg), var(--bd-opacity, 1));
      border-style: var(--bd-style, solid);
      border-top-width: var(--bd-top-width, 0);
      border-right-width: var(--bd-right-width, 0);
      border-bottom-width: var(--bd-bottom-width, 0);
      border-left-width: var(--bd-left-width, 0);
    } }

    #{state-base-class('ol', false, $pseudo)} { #{$sel} {
      outline-color: rgba(__prop-color-var(ol, fg), var(--ol-opacity, 1));
      outline-width: var(--ol-width);
    } }

    #{state-base-class('fill', false, $pseudo)} { #{$sel} {
      fill: rgb(__prop-color-var(fill, fg));
      fill-opacity: var(--fill-opacity, 1);
    } }

    #{state-base-class('stroke', false, $pseudo)} { #{$sel} {
      stroke: rgb(__prop-color-var(stroke, fg));
      stroke-opacity: var(--stroke-opacity, 1);
      stroke-width: var(--stroke-width);
    } }

    .#{$p__}bg-contrast { #{$sel} { --bg-color: var(--fg-contrast); } } // rare case! - contrast vs foreground
    .#{$p__}fg-contrast { #{$sel} { --fg-color: var(--bg-contrast); } }
    .#{$p__}bd-contrast { #{$sel} { --bd-color: var(--bg-contrast); } }
    .#{$p__}ol-contrast { #{$sel} { --ol-color: var(--bg-contrast); } }
    .#{$p__}fill-contrast { #{$sel} { --fill-color: var(--bg-contrast); } }
    .#{$p__}stroke-contrast { #{$sel} { --stroke-color: var(--bg-contrast); } }

    .#{$p__}fg-key { #{$sel} { --fg-color: var(--key-color); --fg-contrast: var(--key-contrast); } }
    .#{$p__}bg-key { #{$sel} { --bg-color: var(--key-color); --bg-contrast: var(--key-contrast); } }
    .#{$p__}bd-key { #{$sel} { --bd-color: var(--key-color); } }
    .#{$p__}ol-key { #{$sel} { --ol-color: var(--key-color); } }
    .#{$p__}fill-key { #{$sel} { --fill-color: var(--key-color); } }
    .#{$p__}stroke-key { #{$sel} { --stroke-color: var(--key-color); } }


    @each $prop in map-keys(map-get($themes, nth(map-keys($themes), 1))) {
      @if $prop != 'key' { .#{$p__}key-theme-#{$prop} { #{$sel} { --key-color: var(--theme-#{$prop}-color); --key-contrast: var(--theme-#{$prop}-contrast); } } }
      @if $prop != 'fg' { .#{$p__}fg-theme-#{$prop} { #{$sel} { --fg-color: var(--theme-#{$prop}-color); --fg-contrast: var(--theme-#{$prop}-contrast); } } }
      @if $prop != 'bg' { .#{$p__}bg-theme-#{$prop} { #{$sel} { --bg-color: var(--theme-#{$prop}-color); --bg-contrast: var(--theme-#{$prop}-contrast); } } }
      @if $prop != 'bd' { .#{$p__}bd-theme-#{$prop} { #{$sel} { --bd-color: var(--theme-#{$prop}-color); } } }
      @if $prop != 'ol' { .#{$p__}ol-theme-#{$prop} { #{$sel} { --ol-color: var(--theme-#{$prop}-color); } } }
      @if $prop != 'fill' { .#{$p__}fill-theme-#{$prop} { #{$sel} { --fill-color: var(--theme-#{$prop}-color); } } }
      @if $prop != 'stroke' { .#{$p__}stroke-theme-#{$prop} { #{$sel} { --stroke-color: var(--theme-#{$prop}-color); } } }
    }

    @each $c in $color-names {
      .#{$p__}key-#{$c} { #{$sel} { --key-color: var(--color-#{$c}); --key-contrast: var(--contrast-#{$c}); } }
      .#{$p__}fg-#{$c} { #{$sel} { --fg-color: var(--color-#{$c}); --fg-contrast: var(--contrast-#{$c}); } }
      .#{$p__}bg-#{$c} { #{$sel} { --bg-color: var(--color-#{$c}); --bg-contrast: var(--contrast-#{$c}); } }
      .#{$p__}bd-#{$c} { #{$sel} { --bd-color: var(--color-#{$c}); } }
      .#{$p__}ol-#{$c} { #{$sel} { --ol-color: var(--color-#{$c}); } }
      .#{$p__}fill-#{$c} { #{$sel} { --fill-color: var(--color-#{$c}); } }
      .#{$p__}stroke-#{$c} { #{$sel} { --stroke-color: var(--color-#{$c}); } }
    }

    .#{$p__}fill-current { #{$sel} { --fill-color: currentColor; } }
    .#{$p__}stroke-current { #{$sel} { --stroke-color: currentColor; } }

    .#{$p__}o-100 { #{$sel} { opacity: 1; } } // no need?
    @for $n from 0 through 9 { .#{$p__}o-#{$n}0 { #{$sel} { opacity: $n/10; } } }

    @for $n from 0 through 9 {
      .#{$p__}fg-o-#{$n}0 { #{$sel} { --fg-opacity: #{$n/10}; } }
      .#{$p__}bg-o-#{$n}0 { #{$sel} { --bg-opacity: #{$n/10}; } }
      .#{$p__}bd-o-#{$n}0 { #{$sel} { --bd-opacity: #{$n/10}; } }
      .#{$p__}ol-o-#{$n}0 { #{$sel} { --ol-opacity: #{$n/10}; } }
      .#{$p__}fill-o-#{$n}0 { #{$sel} { --fill-opacity: #{$n/10}; } }
      .#{$p__}stroke-o-#{$n}0 { #{$sel} { --stroke-opacity: #{$n/10}; } }
    }
  }

  // NON-STATEFUL THEME PROPERTIES

  // bd-#{$w}, bd-t-#{$w} {}
  // bd-#{$w}, bd-r-#{$w} {}
  // bd-#{$w}, bd-b-#{$w} {}
  // bd-#{$w}, bd-l-#{$w} {}

  // stroke-#{$w} {}

  // radius-#{$w}, radius-l-#{$w}, radius-t-#{$w}, radius-tl-#{$w} {}
  // radius-#{$w}, radius-r-#{$w}, radius-t-#{$w}, radius-tr-#{$w} {}
  // radius-#{$w}, radius-r-#{$w}, radius-b-#{$w}, radius-br-#{$w} {}
  // radius-#{$w}, radius-l-#{$w}, radius-b-#{$w}, radius-bl-#{$w} {}

}
