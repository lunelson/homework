//  _   _
// | | | |
// | |_| |__   ___ _ __ ___   ___
// | __| '_ \ / _ \ '_ ` _ \ / _ \
// | |_| | | |  __/ | | | | |  __/
//  \__|_| |_|\___|_| |_| |_|\___|

// $colors, $patterns, $weights, $radii, $shadows, $outlines
// theme-[color]
// c-, bgc-, bdc- ,fill- ,stroke-
//   -[color]
//   -theme
//   -contrast
//   -current
// bd- bdt-, bdr-, bdb-, bdl-
//   -1,-2,-3,-4,-5,-6,-7
//   -s,-m,-l,...
// bg-none/0, bd-none/0, ol-0/none
// bg-[position], bg-[attachment]
// bd-collapse/-separate
// radius- t-, r-, b-, l-, tl-, tr-, bl-, br-,
//   s, m, l, max,
//   oval
// shadow
//   sm, md, lg
//   none/0
//   -ol-
//     sm, md, lg

$colors: () !default;
$widths: () !default;
$radii: () !default;
$shadows: () !default;


@mixin homework-setup-theme($lite: true) {

  $colors: map-merge((
    dark: #010101,
    lite: #efefef,
  ), $colors) !global;


  :root {
    // NB: color custom props stored as RGB number list!!!!
    // due to this idea here: https://stackoverflow.com/questions/40010597/how-do-i-apply-opacity-to-a-css-color-variable/41265350#41265350
    @each $c, $color in $colors {
      --color-#{$c}: #{rgbify($color)};
      --color-contrast-#{$c}: #{rgbify(yiq($color))};
    }
  }

  // TODO: make sure the yiq function is working with dark and lite values
  body {
    background-color: var(--color-#{if($lite, lite, dark)});
    color: var(--color-contrast-#{if($lite, lite, dark)});
  }

  // HTML elements
  #{base-class('c', false)} { color: var(--fg-color); }
  #{base-class('bg', false)} { background-color: var(--bg-color); }
  #{base-class('bd', false)} { border-color: var(--bd-color, --fg-color); border-width: var(--bd-width); }
  #{base-class('ol', false)} { outline-color: var(--ol-color, --fg-color); outline-width: var(--ol-width); }

  // SVG elements
  #{base-class('fill', false)} { fill: var(--fill-color); }
  #{base-class('stroke', false)} { stroke: var(--stroke-color); stroke-width: var(--stroke-width); }

  /////////////////////////////////////////////
  ////////////////// current //////////////////
  /////////////////////////////////////////////

  .fill-current { --fill-color: currentColor; }
  .stroke-current { --stroke-color: currentColor; }

  /////////////////////////////////////////////
  //////////////// transparent ////////////////
  /////////////////////////////////////////////

  .bg-transparent { --bg-color: transparent; }
  .bd-transparent { --bd-color: transparent; }
  .ol-transparent { --ol-color: transparent; }
  .fill-transparent { --fill-color: transparent; }
  .stroke-transparent { --stroke-color: transparent; }

  /////////////////////////////////////////////
  ////////////////// contrast /////////////////
  /////////////////////////////////////////////

  // rare case, of choosing black/white vs fg color
  .bg-contrast { --bg-color: var(--fg-color-contrast); }
  // otherwise assume contrast against the bg color
  .fg-contrast { --fg-color: var(--bg-color-contrast); }
  .bd-contrast { --bd-color: var(--bg-color-contrast); }
  .ol-contrast { --ol-color: var(--bg-color-contrast); }
  .fill-contrast { --fill-color: var(--bg-color-contrast); }
  .stroke-contrast { --stroke-color: var(--bg-color-contrast); }

  /////////////////////////////////////////////
  /////////////////// theme ///////////////////
  /////////////////////////////////////////////

  .fg-theme { --fg-color: var(--theme-color);
    --fg-color-contrast: var(--theme-color-contrast); }
  .bg-theme { --bg-color: var(--theme-color);
    --bg-color-contrast: var(--theme-color-contrast); }
  .bd-theme { --bd-color: var(--theme-color); }
  .ol-theme { --ol-color: var(--theme-color); }
  .fill-theme { --fill-color: var(--theme-color); }
  .stroke-theme { --stroke-color: var(--theme-color); }

  /////////////////////////////////////////////
  ////////////////// [color] //////////////////
  /////////////////////////////////////////////

  @each $c, $color in $colors {
    .theme-#{$c} { --theme-color: var(--color-#{$c});
      --theme-color-contrast: var(--color-contrast-#{$c}); }
    .fg-#{$c} { --fg-color: var(--color-#{$c});
      --fg-color-contrast: var(--color-contrast-#{$c}); }
    .bg-#{$c} { --bg-color: var(--color-#{$c});
      --bg-color-contrast: var(--color-contrast-#{$c}); }
    .bd-#{$c} { --bd-color: var(--color-#{$c}); }
    .ol-#{$c} { --ol-color: var(--color-#{$c}); }
    .fill-#{$c} { --fill-color: var(--color-#{$c}); }
    .stroke-#{$c} { --stroke-color: var(--color-#{$c}); }
  }
}
