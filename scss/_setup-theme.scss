//  _   _
// | | | |
// | |_| |__   ___ _ __ ___   ___
// | __| '_ \ / _ \ '_ ` _ \ / _ \
// | |_| | | |  __/ | | | | |  __/
//  \__|_| |_|\___|_| |_| |_|\___|


$colors: () !default;

@mixin homework-setup-theme($type: lite) {

  $colors: map-merge((
    dark: #141414,
    lite: #F5F5F5,
  ), $colors) !global;

  $color-names: ();

  :root {

    // NB: color custom props stored as RGB number list!!!!
    // original idea --> https://stackoverflow.com/questions/40010597/how-do-i-apply-opacity-to-a-css-color-variable/41265350#41265350
    @each $c, $color in $colors {
      @if length($color) > 1 {
        @each $n, $subcolor in __list-to-index-map($color) {
          --color-#{$c}-#{$n}: #{rgbify($subcolor)};
          --contrast-#{$c}-#{$n}: #{rgbify(contrast-color($subcolor))};
          $color-names: append($color-names, #{$c}-#{$n});
        }
      } @else {
        --color-#{$c}: #{rgbify($color)};
        --contrast-#{$c}: #{rgbify(contrast-color($color))};
        $color-names: append($color-names, $c);
      }
    }

    --fg-default: #{if($type == 'lite', --color-dark, --color-lite)};
    --bg-default: #{if($type == 'lite', --color-lite, --color-dark)};
  }

  body {
    color: rgba(var(--fg-default), var(--fg-opacity, 1));
    background-color: rgba(var(--bg-default), var(--bg-opacity, 1));
  }

  // STATEFUL THEME PROPERTIES

  @each $pseudo in ( '', 'hover', 'focus', 'active', 'disabled', 'focus-within', 'parent-hover', 'parent-focus' ) {

    $p__: state-prefix($pseudo);

    $sel: if(str-length($pseudo) > 0,
      if(not not str-index($pseudo, 'parent-'),
        '.parent:#{str-slice($pseudo, 8)} &',
        '&:#{$pseudo}'),
      '&');

    #{state-base-class('fg', false, $pseudo)} { #{$sel} {
      color: rgba(var(--fg-color, var(--fg-default)), var(--fg-opacity, 1));
    } }

    #{state-base-class('bg', false, $pseudo)} { #{$sel} {
      background-color: rgba(var(--bg-color, var(--bg-default)), var(--bg-opacity, 1));
    } }

    #{state-base-class('bd', false, $pseudo)} { #{$sel} {
      border-color: rgba(var(--bd-color, var(--fg-color, var(--fg-default))), var(--bd-opacity, 1));
      border-style: var(--bd-style, solid);
      border-top-width: var(--bd-top-width, 0);
      border-right-width: var(--bd-right-width, 0);
      border-bottom-width: var(--bd-bottom-width, 0);
      border-left-width: var(--bd-left-width, 0);
    } }

    #{state-base-class('ol', false, $pseudo)} { #{$sel} {
      outline-color: rgba(var(--ol-color, var(--fg-color, var(--fg-default))), var(--ol-opacity, 1));
      outline-width: var(--ol-width);
    } }


    #{state-base-class('fill', false, $pseudo)} { #{$sel} {
      fill: rgb(var(--fill-color));
      fill-opacity: var(--fill-opacity, 1);
    } }

    #{state-base-class('stroke', false, $pseudo)} { #{$sel} {
      stroke: rgb(var(--stroke-color));
      stroke-opacity: var(--stroke-opacity, 1);
      stroke-width: var(--stroke-width);
    } }

    // CONTRAST CLASSES

    .#{$p__}bg-contrast { #{$sel} { --bg-color: var(--fg-contrast); } } // rare case! - contrast vs foreground
    .#{$p__}fg-contrast { #{$sel} { --fg-color: var(--bg-contrast); } }
    .#{$p__}bd-contrast { #{$sel} { --bd-color: var(--bg-contrast); } }
    .#{$p__}ol-contrast { #{$sel} { --ol-color: var(--bg-contrast); } }
    .#{$p__}fill-contrast { #{$sel} { --fill-color: var(--bg-contrast); } }
    .#{$p__}stroke-contrast { #{$sel} { --stroke-color: var(--bg-contrast); } }

    // THEME CLASSES

    .#{$p__}fg-theme { #{$sel} { --fg-color: var(--theme-color); --fg-contrast: var(--theme-contrast); } }
    .#{$p__}bg-theme { #{$sel} { --bg-color: var(--theme-color); --bg-contrast: var(--theme-contrast); } }
    .#{$p__}bd-theme { #{$sel} { --bd-color: var(--theme-color); } }
    .#{$p__}ol-theme { #{$sel} { --ol-color: var(--theme-color); } }
    .#{$p__}fill-theme { #{$sel} { --fill-color: var(--theme-color); } }
    .#{$p__}stroke-theme { #{$sel} { --stroke-color: var(--theme-color); } }

    @each $c in $color-names {

      .#{$p__}theme-#{$c} { #{$sel} { --theme-color: var(--color-#{$c}); --theme-contrast: var(--contrast-#{$c}); } }
      .#{$p__}fg-#{$c} { #{$sel} { --fg-color: var(--color-#{$c}); --fg-contrast: var(--contrast-#{$c}); } }
      .#{$p__}bg-#{$c} { #{$sel} { --bg-color: var(--color-#{$c}); --bg-contrast: var(--contrast-#{$c}); } }
      .#{$p__}bd-#{$c} { #{$sel} { --bd-color: var(--color-#{$c}); } }
      .#{$p__}ol-#{$c} { #{$sel} { --ol-color: var(--color-#{$c}); } }
      .#{$p__}fill-#{$c} { #{$sel} { --fill-color: var(--color-#{$c}); } }
      .#{$p__}stroke-#{$c} { #{$sel} { --stroke-color: var(--color-#{$c}); } }

    }

    // CURRENT COLOR FILL/STROKE

    .#{$p__}fill-current { #{$sel} { --fill-color: currentColor; } }
    .#{$p__}stroke-current { #{$sel} { --stroke-color: currentColor; } }

    // OPACITY

    .#{$p__}o-100 { #{$sel} { opacity: 1; } } // no need?
    @for $n from 0 through 9 { .#{$p__}o-#{$n}0 { #{$sel} { opacity: $n/10; } } }

    @for $n from 0 through 9 {
      .#{$p__}fgo-#{$n}0 { #{$sel} { --fg-opacity: #{$n/10}; } }
      .#{$p__}bgo-#{$n}0 { #{$sel} { --bg-opacity: #{$n/10}; } }
      .#{$p__}bdo-#{$n}0 { #{$sel} { --bd-opacity: #{$n/10}; } }
      .#{$p__}olo-#{$n}0 { #{$sel} { --ol-opacity: #{$n/10}; } }
      .#{$p__}fillo-#{$n}0 { #{$sel} { --fill-opacity: #{$n/10}; } }
      .#{$p__}strokeo-#{$n}0 { #{$sel} { --stroke-opacity: #{$n/10}; } }
    }
  }

  // NON-STATEFUL THEME PROPERTIES

  // TODO: stroke and border widths !?

}
