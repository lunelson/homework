//   __            _             _       __            _ _
//  / _|          | |           | |     / _|          | | |
// | |_ ___  _ __ | |_ ______ __| | ___| |_ __ _ _   _| | |_ ___
// |  _/ _ \| '_ \| __|______/ _` |/ _ \  _/ _` | | | | | __/ __|
// | || (_) | | | | |_      | (_| |  __/ || (_| | |_| | | |_\__ \
// |_| \___/|_| |_|\__|      \__,_|\___|_| \__,_|\__,_|_|\__|___/

// TODO
// handle non-px values in font-mods
// figure out what HTML elements require explicitly applying --font-family
// apply the increased --trim-top to cases where font is adjacent to font -- only to the custom property !


$fonts: () !default;

$font-default: (
  family: (arial, sans-serif),
  spacing-max: 0,
  spacing-end: 50,
  trim-x: 0,
  trim-capline: 0,
  trim-baseline: 0,
  feature-settings: ('kern' 1,),
);

// NOTES re feature-settings
// https://sparanoid.com/lab/opentype-features/
// https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/OpenType_fonts_guide
// https://developer.mozilla.org/en-US/docs/Web/CSS/font-feature-settings

$fonts-defaults: (
  sans: ( family: (arial, sans-serif) ),
  serif: ( family: (georgia, serif) ),
  mono: ( family: (monaco, consolas, monospace) )
);


//   __            _          _          _
//  / _|          | |        | |        | |
// | |_ ___  _ __ | |_ ______| |__   ___| |_ __   ___ _ __ ___
// |  _/ _ \| '_ \| __|______| '_ \ / _ \ | '_ \ / _ \ '__/ __|
// | || (_) | | | | |_       | | | |  __/ | |_) |  __/ |  \__ \
// |_| \___/|_| |_|\__|      |_| |_|\___|_| .__/ \___|_|  |___/
//                                        | |
//                                        |_|

@function font-value($f, $key) { @return map-get($fonts, $f, $key); }

@function line-trim-top($f: null, $s: null) {
  $line: line-height($f, $s);
  $trim: font-value($f, 'trim-capline') or 0;
  @return ($line - 1) * 0.5em + $trim * 1em;
}

@function line-trim-bottom($f: null, $s: null) {
  $line: line-height($f, $s);
  $trim: font-value($f, 'trim-baseline') or 0;
  @return ($line - 1) * 0.5em + $trim * 1em;
}

@mixin font-mod($f, $s, $y: null, $trim: true, $modern: $homework-is-modern) {

  /////////////////////////////////////////////
  /////////////////// modern //////////////////
  /////////////////////////////////////////////

  @if $modern {

    $font: map-get($fonts, $f);

    --font-family: #{map-get($font, 'family')};
    // --font-feature-settings: #{map-get($font, 'feature-settings')};
    --font-feature-settings: "kern";
    --spacing-max: #{map-get($font, 'spacing-max')};
    --spacing-end: #{map-get($font, 'spacing-end')};
    --trim-x: #{map-get($font, 'trim-x')};

    @if $trim {
      --trim-capline: #{map-get($font, 'trim-capline')};
      --trim-baseline: #{map-get($font, 'trim-baseline')};
    }

    @include mm-for('font-mods' $f $s) {
      $def: m-var('font-mods' $f $s);
      $size: strip(nth($def, 1));
      $line: nth($def, 2);
      --font-size: #{$size / 16 * 1rem};
      --line-height: #{if($line > 6, $line/$size, $line)};
    }
  }

  /////////////////////////////////////////////
  /////////////////// legacy //////////////////
  /////////////////////////////////////////////

  @else {
  }

}


// DEPRECATED, BELOW THIS LINE


@mixin stack-font($f, $s, $y: null, $trim: true) {

  $font: map-get($fonts, $f);
  $spacing-max: map-get($font, 'spacing-max');
  $spacing-end: map-get($font, 'spacing-end');

  font-family: map-get($font, 'family');
  @if $spacing-max > 0 {
    letter-spacing: calc(#{$spacing-max}px - #{$spacing-max/$spacing-end}em);
  }

  @include mm-for('font-mods' $f $s, inner-mods $y, inner-y-mods $y, inner-y) {
    font-size: font-size($f, $s);
    line-height: line-height($f, $s);

    // IF TRIM
    @if $trim {

      @at-root #{selector-insert('>')} {
        // TODO: re-add trim-x values here
        margin-top: subtract(0, line-trim-top($f, $s));
        margin-bottom: subtract(0, line-trim-bottom($f, $s));
      }
      @at-root #{selector-insert('> * +')} {
        margin-top: subtract(inner-y($y), line-trim-top($f, $s));
      }
      // @at-root #{selector-insert(selector-insert('>', '', #{zip($elements)}), '+')} {
      //   // margin-top: calc(var(--stack-gap) - var(--trim-top) - 0.25em);
      //   margin-top: subtract(inner-y(), line-trim-top());
      // }

    // IF NOT TRIM
    } @else {

      @at-root #{selector-insert('>')} {
        // TODO: re-add trim-x values here
        // margin: 0 var(--trim-x);
        margin-top: 0;
        margin-bottom: 0;
      }
      @at-root #{selector-insert('> * +')} {
        margin-top: inner-y($y);
      }


    }
  }

}
