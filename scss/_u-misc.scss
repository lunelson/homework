///
/// CUSTOM
///

@function __normalize-arglist($arglist...) {
  @if length($arglist) == 1 and type-of(nth($arglist, 1)) == list {
    $arglist: join((), nth($arglist, 1), 'comma');
  }
  @return $arglist;
}

@function __range-pairs($list, $head: true, $tail: true) {
  @if length($list) == 0 { @return $list; }
  $result: ();
  @for $n from 1 through length($list) + 1 {
    $m: $n - 1; $a: if($m == 0, null, nth($list, $m));
    $b: if($n > length($list), null, nth($list, $n));
    $result: append($result, ($a $b), 'comma');
  }
  $length: length($result);
  $start: if($head, 1, 2);
  $end: if($tail, $length, $length - 1);
  @return __slice($result, $start, $end);
}

// @function __get($map, $keys...) {
//   @if type-of($map) != 'map' or length($map) == 0 { @error 'non-map or zero-length-map passed to __get'; }
//   @each $key in $keys {
//     @if type-of($map) != 'map' { @return $map; }
//     $map: map-get($map, $key);
//   }
//   @return $map;
// }

// TODO:
// make this in to a package
// follow algorithm established by this pkg https://github.com/TehShrike/deepmerge
@function __deep-merge($target, $source) {
  $source: $source or ();
  $target: $target or ();
  $result: ();

  // if both source and target are map-compatible
  @if is-map($source) and is-map($target) {
    $result: $target;
    @each $key, $s-value in $source {
      $t-value: map-get($target, $key);
      @if index('list' 'map', type-of($s-value)) or index('list' 'map', type-of($t-value)) {
        $result: map-merge($result, ($key: __deep-merge($t-value, $s-value)));
      } @else {
        $result: map-merge($result, ($key: $s-value));
      }
    }
  }

  // else source overwrites target
  @else { $result: $source; }

  @return $result;
}
