//  _
// | |
// | |_ _   _ _ __   ___
// | __| | | | '_ \ / _ \
// | |_| |_| | |_) | (_) |
//  \__|\__, | .__/ \___/
//       __/ | |
//      |___/|_|

// f, trim -- implicitly repsonsive
// `.caps` (and `.smcp`) co-class(es) for `.f-` classes, with different spacing

@mixin homework-setup-typo(
  $trim: true,
  $trim-excludes: div table figure img svg video iframe object section aside header footer article) {

  // normalize $fonts
  $fonts: if(length($fonts) > 0, $fonts, $fonts-defaults) !global;
  @each $f, $font in $fonts {
    $font: map-merge($font-default, $font);
    $fonts: map-merge($fonts, ($f: $font)) !global;
  }

  // TODO: place these defaults in homework-reset
  body {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    text-rendering: optimizeLegibility;
    font-kerning: normal;
    font-family: map-get($fonts, nth(map-keys($fonts), 1), 'family');
  }

  // font weights
  @each $n in (1 2 3 5 6 8 9) { .fw-#{$n*100} { font-weight: $n*100; } }
  .fw-700, .fw-bold, .strong { font-weight: bold; }
  .fw-400, .fw-normal { font-weight: normal; }

  // font-styles; NB: there is also 'oblique' but I've never seen it in use
  .fs-italic, .em { font-style: italic; }
  .fs-normal { font-style: normal; }

  // exerimental:
    // 1. whether this causes any problems ?
    // 2. whether this allows inline font-family/-size changes easily ?
  * {
    font-size: var(--font-size, inherit);
    font-family: var(--font-family, inherit);
    line-height: var(--line-height, inherit);
    letter-spacing: var(--letter-spacing, inherit);
    font-feature-settings: var(--font-feature-settings, inherit);
  }

  @each $f, $font in $fonts {

    $ff: map-get($font, 'font-family');
    $lh: map-get($font, 'line-height');
    $ls: map-get($font, 'letter-spacing');
    $ffs: map-get($font, 'font-feature-settings');
    $ts: map-get($font, 'trim-sides');
    $tc: map-get($font, 'trim-capline');
    $tb: map-get($font, 'trim-baseline');

    #{base-class('f-#{$f}')} {
      @if $ff { --font-family: #{$ff}; }
      @if $lh { --line-height: #{$lh}; }
      @if $ls { --letter-spacing: #{$ls}; }
      @if $ffs { --font-feature-settings: #{inspect($ffs)}; }

      @if $trim {
        @if $ts { --trim-sides: #{$ts}; }
        @if $tc { --trim-capline: #{$tc}; }
        @if $tb { --trim-baseline: #{$tb}; }
      }
    }
  }

  @if $trim {
    #{base-class('f', false)} {
      @at-root #{selector-insert(base-class('stack'), '>')} {
        --trim-top: calc((var(--line-height) - 1em) / 2 + var(--trim-capline) + var(--trim-adjacent));
        --trim-bottom: calc((var(--line-height) - 1em) / 2 + var(--trim-baseline));
        --trim-adjacent: 0%;
        margin-top: calc(0% - var(--trim-top));
        margin-bottom: calc(0% - var(--trim-bottom));
        margin-right: var(--trim-sides);
        margin-left: var(--trim-sides);
      }
      @at-root #{selector-insert(base-class('stack'), '> * +')} {
        margin-top: subtract(var(--stack-gap), var(--trim-top));
      }
      @at-root #{selector-insert(selector-last(), '+')} {
        --trim-adjacent: var(--trim-ascender) !important; //?
      }
    }

    #{base-class('plain')} { #{selector-not('*', $trim-excludes)} {
      @at-root #{selector-insert('>')} {
        --trim-top: calc((var(--line-height) - 1em) / 2 + var(--trim-capline) + var(--trim-adjacent));
        --trim-bottom: calc((var(--line-height) - 1em) / 2 + var(--trim-baseline));
        --trim-adjacent: 0%;
        margin-top: calc(0% - var(--trim-top));
        margin-bottom: calc(0% - var(--trim-bottom));
        margin-right: var(--trim-sides);
        margin-left: var(--trim-sides);
      }
      @at-root #{selector-insert('> * +')} {
        margin-top: subtract(var(--stack-gap), var(--trim-top));
      }
      @at-root #{selector-insert(selector-last(), '+')} {
        --trim-adjacent: var(--trim-ascender) !important; //?
      }
    } }
  }

  @include mm-for('font-mods') {
    @each $f, $mod in m-var('font-mods') {
      @each $s, $set in $mod {
        .f-#{$f}-#{$s} {

          $fz: nth($set, 1);
          $fz: if(unitless($fz), $fz*1px, $fz);
          --font-size: #{$fz};

          $lh: if(length($set)>1, nth($set, 2), null);
          @if $lh {
            $lh: if(unitless($lh) and $lh > 8, $lh*1px, $lh);
            --line-height: #{$lh};
          }

        }
      }
    }
  }

}
