//  _
// | |
// | |_ _   _ _ __   ___
// | __| | | | '_ \ / _ \
// | |_| |_| | |_) | (_) |
//  \__|\__, | .__/ \___/
//       __/ | |
//      |___/|_|

// NB: a set of advanced OpenType classes can be enabled with utility-opentype:
// http://utility-opentype.kennethormandy.com/


@mixin homework-setup-typo( $trim: true, $trim-excl: div table figure img svg video iframe object section aside header footer article ) {

  body { font-family: var(--font-family); }

  // normalize $fonts
  $fonts: if(length($fonts) > 0, $fonts, $fonts-defaults) !global;
  @each $f, $font in $fonts {
    $font: map-merge($font-default, $font);
    $fonts: map-merge($fonts, ($f: $font)) !global;
  }

  :root {
    @each $f, $font in $fonts {

      // make first font in $fonts the default
      @if $f == nth(map-keys($fonts), 1) {
        --font-family: var(--font-family-#{$f});
        --font-feature-settings: var(--font-feature-settings-#{$f});
        --line-height: var(--line-height-#{$f});
        --letter-spacing: var(--letter-spacing-#{$f});
      }

      $ff: map-get($font, 'font-family');
      $lh: map-get($font, 'line-height');
      $ls: map-get($font, 'letter-spacing');
      $ffs: map-get($font, 'font-feature-settings');

      // output variant properties
      --font-family-#{$f}: #{$ff};
      --font-feature-settings-#{$f}: #{inspect($ffs)};
      --line-height-#{$f}: #{decalc($lh)};
      --letter-spacing-#{$f}: #{decalc($ls)};

      @if $trim {
        $oc: map-get($font, 'dist-capline');
        $ob: map-get($font, 'dist-baseline');
        $ts: map-get($font, 'trim-sides');
        $aa: map-get($font, 'trim-adjacent');
        --dist-capline-#{$f}: #{if(unitless($oc), $oc*1em, $oc)};
        --dist-baseline-#{$f}: #{if(unitless($ob), $ob*1em, $ob)};
        --trim-sides-#{$f}: #{$ts};
        --trim-adjacent-#{$f}: #{decalc($aa)};
      }
    }


    // NOTE: alternate method here would be min-width queries with m-orig-var(font-mods)...(less code but more compile work)
    @include mm-for('font-mods') {
      @each $f, $mod in m-var('font-mods') {
        @each $s, $set in $mod {
          $fz: nth($set, 1);
          $fz: if(unitless($fz), $fz*1px, $fz);
          // TODO: proof whether it's possible to use lerp expressions here
          --font-size-#{$f}-#{$s}: #{$fz};
          $lh: if(length($set) > 1, nth($set, 2), null);
          @if $lh {
            $lh: if(unitless($lh), if($lh > 6, $lh*1px, $lh*1em), $lh);
            // TODO: proof whether it's possible to use lerp expressions here
            --line-height-#{$f}-#{$s}: #{$lh};
          }
        }
      }
    }
  }

  // any .f-[...] plus all children of .plain which are not in the exclude list
  #{base-class('f', false)},
  #{selector-combine(base-class('plain'), '*', '>')} {
    font-size: var(--font-size); // TODO allow a lerp calc() expression here too

    font-family: var(--font-family);
    font-feature-settings: var(--font-feature-settings);
    // NB using calc(var()) below because these are raw calc values
    line-height: calc(var(--line-height));
    letter-spacing: calc(var(--letter-spacing));
  }

  @if $trim {

    #{selector-combine('.trim', base-class('f', false), '>')},
    #{selector-combine(base-class('stack'), base-class('f', false), '>')},
    #{selector-combine(base-class('plain'), selector-not('*', $trim-excl), '>')} {
      --trim-top: calc((var(--line-height) - 1em) / 2 + var(--dist-capline, 0em) + var(--trim-top-adjust, 0em));
      --trim-bottom: calc((var(--line-height) - 1em) / 2 + var(--dist-baseline, 0em));

      margin-top: calc(0em - var(--trim-top));
      margin-bottom: calc(0em - var(--trim-bottom));
      margin-right: var(--trim-sides);
      margin-left: var(--trim-sides);
    }
    #{selector-combine(base-class('stack'), base-class('f', false), '> * +')},
    #{selector-combine(base-class('plain'), selector-not('*', $trim-excl), '> * +')} {
      margin-top: subtract(var(--stack-gap), var(--trim-top));
    }
    #{selector-combine(base-class('f', false), base-class('f', false), '+')},
    #{selector-combine(base-class('plain'), selector-combine(selector-not('*', $trim-excl), selector-not('*', $trim-excl), '+'), '>')} {
      --trim-top-adjust: var(--trim-adjacent);
    }

  }

  @each $f, $font in $fonts {

    #{base-class('f-#{$f}')} {
      --font-family: var(--font-family-#{$f});
      --line-height: var(--line-height-#{$f});
      --letter-spacing: var(--letter-spacing-#{$f});
      --font-feature-settings: var(--font-feature-settings-#{$f});

      @if $trim {
        $dc: map-get($font, 'dist-capline');
        $db: map-get($font, 'dist-baseline');
        $ts: map-get($font, 'trim-sides');
        $ta: map-get($font, 'trim-adjacent');
        @if $dc { --dist-capline: #{if(unitless($dc), $dc * 1em, $dc)}; }
        @if $db { --dist-baseline: #{if(unitless($db), $db * 1em, $db)}; }
        @if $ts { --trim-sides: #{$ts}; }
        @if $ta { --trim-adjacent: #{decalc($ta)}; }
      }
    }
  }

  @each $f, $mod in map-get($root, 'font-mods') {
    @each $s, $set in $mod {
      .f-#{$f}-#{$s} {
        --font-size: var(--font-size-#{$f}-#{$s});
        --line-height: var(--line-height-#{$f}-#{$s}, var(--line-height-#{$f}));
      }
    }
  }

}
