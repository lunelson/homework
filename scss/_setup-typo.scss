//  _
// | |
// | |_ _   _ _ __   ___
// | __| | | | '_ \ / _ \
// | |_| |_| | |_) | (_) |
//  \__|\__, | .__/ \___/
//       __/ | |
//      |___/|_|

// f, trim -- implicitly repsonsive
// `.caps` (and `.smcp`) co-class(es) for `.f-` classes, with different spacing

@mixin homework-setup-typo(
  $trim: true,
  $trim-excludes: div table figure img svg video iframe object section aside header footer article) {

  $fonts: if(length($fonts) > 0, $fonts, $fonts-defaults) !global;
  @each $f, $font in $fonts {
    $font: map-merge($font-default, $font);
    $fonts: map-merge($fonts, ($f: $font)) !global;
  }

  // TODO: remove this, place with homework-reset ?
  body {
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    text-rendering: optimizeLegibility;
    font-kerning: normal;
    font-family: map-get($fonts, nth(map-keys($fonts), 1), 'family');
  }

  // bold, bolder, light, etc. normal
  .fw-normal { font-weight: normal; }
  .fw-bold, .bold, .strong, strong { font-weight: bold; }

  // italic, normal
  .fs-normal { font-style: normal; }
  .fs-italic, .italic, .em, em { font-style: italic; }

  * {
    font-size: var(--font-size, inherit);
    font-family: var(--font-family, inherit);
    line-height: var(--line-height, inherit);
    letter-spacing: var(--letter-spacing, inherit);
    font-feature-settings: var(--font-feature-settings, inherit);
  }

  @each $f, $font in $fonts {
    // TODO: check properly, if these exist
    #{base-class('f-#{$f}')} {
      --font-family: #{map-get($font, 'font-family') or initial};
      --line-height: #{map-get($font, 'line-height') or initial};
      --letter-spacing: #{map-get($font, 'letter-spacing') or initial};
      --font-feature-settings: #{inspect(map-get($font, 'font-feature-settings')) or initial};
      @if $trim {
        --trim-sides: #{map-get($font, 'trim-sides') or initial};
        --trim-capline: #{map-get($font, 'trim-capline') or initial};
        --trim-baseline: #{map-get($font, 'trim-baseline') or initial};
      }
    }
  }

  @include mm-for('font-mods') {
    @each $f, $mod in m-var('font-mods') {
      @each $s, $def in $mod {
        .f-#{$f}-#{$s} {
          $size: strip(nth($def, 1));
          $line: nth($def, 2);
          --font-size: #{$size / 16 * 1rem};
          // TODO: only write this if it's included
          // NB line-heights > 6 are assumed to be px values
          --line-height: #{if($line > 6, $line/$size, $line)};
        }
      }
    }
  }

  @if $trim {
    #{base-class('f', false)} {
      --trim-top: calc((var(--line-height) - 1em) / 2 + var(--trim-capline) + var(--trim-adjacent));
      --trim-bottom: calc((var(--line-height) - 1em) / 2 + var(--trim-baseline));
      --trim-adjacent: 0%;
      @at-root #{selector-insert(base-class('trim'), '>')} {
        margin-top: calc(0% - var(--trim-top));
        margin-bottom: calc(0% - var(--trim-bottom));
        margin-right: var(--trim-sides);
        margin-left: var(--trim-sides);
      }
      @at-root #{selector-insert(base-class('trim'), '> * +')} {
        margin-top: subtract(var(--stack-gap), var(--trim-top));
      }
      @at-root #{selector-insert(selector-last(), '+')} {
        --trim-adjacent: var(--trim-ascender);
      }
    }
  }

  @if $trim {
    #{base-class('plain')} {
      *#{selector-not('*', $trim-excludes)} {
        --trim-top: calc((var(--line-height) - 1em) / 2 + var(--trim-capline) + var(--trim-adjacent));
        --trim-bottom: calc((var(--line-height) - 1em) / 2 + var(--trim-baseline));
        --trim-adjacent: 0%;
        @at-root #{selector-insert('>')} {
          margin-top: calc(0% - var(--trim-top));
          margin-bottom: calc(0% - var(--trim-bottom));
          margin-right: var(--trim-sides);
          margin-left: var(--trim-sides);
        }
        @at-root #{selector-insert('> * +')} {
          margin-top: subtract(var(--stack-gap), var(--trim-top));
        }
        @at-root #{selector-insert(selector-last(), '+')} {
          --trim-adjacent: var(--trim-ascender);
        }
      }

    }
  }

}
