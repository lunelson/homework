//  _
// | |
// | |_ _   _ _ __   ___
// | __| | | | '_ \ / _ \
// | |_| |_| | |_) | (_) |
//  \__|\__, | .__/ \___/
//       __/ | |
//      |___/|_|

// NB: a set of advanced OpenType classes can be enabled with utility-opentype:
// http://utility-opentype.kennethormandy.com/

// $non-trim-elements: div table figure img svg video iframe object section aside header footer article;
$non-trim-elements: div table figure img svg video iframe object;

@mixin homework-setup-typo( $trim: true, $trim-excl: $non-trim-elements ) {

  // normalize $fonts
  $fonts: if(length($fonts) > 0, $fonts, $fonts-defaults) !global;
  @each $f, $font in $fonts {
    $font: map-merge($font-default, $font);
    $fonts: map-merge($fonts, ($f: $font)) !global;
  }

  body,
  #{base-class('f', false)},
  #{selector-combine(base-class('plain'), '*', '>')} {
    font-family: var(--font-family);

    font-size: calc(var(--font-size)); // TODO allow a lerp calc() expression here too
    line-height: calc(var(--line-height, 1.25)); // raw calc values
    letter-spacing: calc(var(--letter-spacing, 0)); // raw calc values
    font-feature-settings: var(--font-feature-settings, '');
  }

  @if $trim {

    #{selector-combine('.trim', base-class('f', false), '>')},
    #{selector-combine(base-class('stack'), base-class('f', false), '>')},
    #{selector-combine(base-class('plain'), selector-not('*', $trim-excl), '>')} {
      --trim-top: calc((var(--line-height) - 1em) / 2 + var(--dist-capline, 0em) + var(--trim-top-adjust, 0em));
      --trim-bottom: calc((var(--line-height) - 1em) / 2 + var(--dist-baseline, 0em));

      margin-top: calc(0em - var(--trim-top));
      margin-bottom: calc(0em - var(--trim-bottom));
      margin-right: var(--trim-sides);
      margin-left: var(--trim-sides);
    }
    #{selector-combine(base-class('stack'), base-class('f', false), '> * +')},
    #{selector-combine(base-class('plain'), selector-not('*', $trim-excl), '> * +')} {
      margin-top: subtract(var(--stack-gap), var(--trim-top));
    }
    #{selector-combine(base-class('f', false), base-class('f', false), '+')},
    #{selector-combine(base-class('plain'), selector-combine(selector-not('*', $trim-excl), selector-not('*', $trim-excl), '+'), '>')} {
      --trim-top-adjust: var(--trim-adjacent);
    }

  }

  @each $f, $font in $fonts {
    :root {
      $ff: map-get($font, 'font-family');
      $lh: map-get($font, 'line-height');
      $ls: map-get($font, 'letter-spacing');
      $ffs: map-get($font, 'font-feature-settings');
      --font-family-#{$f}: #{$ff};
      --line-height-#{$f}: #{decalc($lh)};
      --letter-spacing-#{$f}: #{decalc($ls)};
      --font-feature-settings-#{$f}: #{inspect($ffs)};

      @if $trim {
        $dc: map-get($font, 'dist-capline');
        $db: map-get($font, 'dist-baseline');
        $ts: map-get($font, 'trim-sides');
        $ta: map-get($font, 'trim-adjacent');
        --dist-capline-#{$f}: #{if(unitless($dc), $dc*1em, $dc)};
        --dist-baseline-#{$f}: #{if(unitless($db), $db*1em, $db)};
        --trim-sides-#{$f}: #{$ts};
        --trim-adjacent-#{$f}: #{decalc($ta)};
      }
    }

    #{selector-combine(base-class('plain-#{$f}'), '*', '>')},
    #{base-class('f-#{$f}')},
    #{if($f == nth(map-keys($fonts), 1), selector-combine(base-class('plain'), '*', '>'), '')},
    #{if($f == nth(map-keys($fonts), 1), 'body', '')} {
      --font-family: var(--font-family-#{$f});
      --line-height: var(--line-height-#{$f});
      --letter-spacing: var(--letter-spacing-#{$f});
      --font-feature-settings: var(--font-feature-settings-#{$f});

      @if $trim {
        --dist-capline: var(--dist-capline-#{$f});
        --dist-baseline: var(--dist-baseline-#{$f});
        --trim-sides: var(--trim-sides-#{$f});
        --trim-adjacent: var(--trim-adjacent-#{$f});
      }
    }
  }

  @each $m in join((null), map-keys($media)) {
    @include m($m) {
      @each $f, $mod in m-var-orig('font-mods') {
        :root {
          @each $s, $set in $mod or () {

            // (A) output the custom properties
            $fz: __nth($set, 1); $lh: __nth($set, 2);

            // TODO: proof whether it's possible to use lerp expressions here
            $fz: if(unitless($fz), $fz*1px, $fz);
            --font-size-#{$f}-#{$s}: #{$fz};

            @if $lh {
              // TODO: proof whether it's possible to use lerp expressions here
              $lh: if(unitless($lh), if($lh > 6, $lh*1px, $lh*1em), $lh);
              --line-height-#{$f}-#{$s}: #{$lh};
            }

            // (B) if on $root, output the .f-(f)-(s) assignment
            @if not $m {
              @at-root .plain-#{$f}-#{$s} > *,
              .f-#{$f}-#{$s} {
                --font-size: var(--font-size-#{$f}-#{$s});
                --line-height: var(--line-height-#{$f}-#{$s}, var(--line-height-#{$f}));
              }
            }
          }
        }
      }
    }
  }


}
