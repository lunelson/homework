//  _
// | |
// | |_ _   _ _ __   ___
// | __| | | | '_ \ / _ \
// | |_| |_| | |_) | (_) |
//  \__|\__, | .__/ \___/
//       __/ | |
//      |___/|_|

// f, trim -- implicitly repsonsive
// `.caps` (and `.smcp`) co-class(es) for `.f-` classes, with different spacing

$homework-plain-elements: p ul ol dl h3 h4 h5 h6 blockquote;

@mixin homework-setup-typo( $trim: true, $elements: $homework-plain-elements) {

  $fonts: if(length($fonts) > 0, $fonts, $fonts-defaults) !global;

  @each $f, $font in $fonts {
    $font: map-merge($font-default, $font);
    $fonts: map-merge($fonts, ($f: $font)) !global;
  }

  $body-font: map-get($fonts, nth(map-keys($fonts), 1));

  body {
    text-rendering: optimizeLegibility;
    -moz-osx-font-smoothing: grayscale;
    -webkit-font-smoothing: antialiased;
    font-kerning: normal;
  }

  // bold, bolder, light, etc. normal
  .fw-normal { font-weight: normal; }
  .fw-bold, .bold, .strong, strong { font-weight: bold; }

  // italic, normal
  .fs-normal { font-style: normal; }
  .fs-italic, .italic, .em, em { font-style: italic; }

  body, #{base-class('f', false)} {

    // TODO: add other inline tags, which might require family, size, spacing or feature changes
    &, code, kbd, pre, samp {
      font-size: var(--font-size);
      line-height: var(--line-height);
      font-family: var(--font-family);

      letter-spacing: var(--letter-spacing);
      font-feature-settings: var(--font-feature-settings);
    }
  }

  #{base-class('f', false)} {
    @if $trim {
      --trim-adjacent: 0em;
      --trim-top: calc((var(--line-height) - 1) * 1em / 2 + var(--trim-capline) * 1em + var(--trim-adjacent));
      --trim-bottom: calc((var(--line-height) - 1) * 1em / 2 + var(--trim-baseline) * 1em);
      @at-root &.trim, #{selector-insert(base-class('trim'), '>')} {
        margin-top: calc(0px - var(--trim-top));
        margin-bottom: calc(0px - var(--trim-bottom));
        margin-right: var(--trim-x);
        margin-left: var(--trim-x);
      }
      @at-root #{selector-insert(base-class('trim'), '> * +')} {
        margin-top: subtract(var(--stack-gap, 0em), var(--trim-top));
      }
      @at-root #{selector-insert(selector-last(), '+')} {
        --trim-adjacent: calc((1em - 1ex)/2);
      }
    }
  }

  @each $f, $font in $fonts {
    #{base-class('f-#{$f}')}, #{if($f == nth(map-keys($fonts), 1),'body','')} {
      --font-family: #{map-get($font, 'family')};
      --letter-spacing: #{map-get($font, 'spacing')};
      --font-feature-settings: #{inspect(map-get($font, 'feature-settings'))};
      --trim-x: #{map-get($font, 'trim-x')};
      @if $trim {
        --trim-capline: #{map-get($font, 'trim-capline')};
        --trim-baseline: #{map-get($font, 'trim-baseline')};
      }
    }
  }

  @include mm-for('font-mods') {
    @each $f, $mod in m-var('font-mods') {
      @each $s, $def in $mod {
        .f-#{$f}-#{$s} {
          $size: strip(nth($def, 1));
          $line: nth($def, 2);
          // NB line-heights > 6 are assumed to be px values
          --font-size: #{$size / 16 * 1rem};
          --line-height: #{if($line > 6, $line/$size, $line)};
        }
      }
    }
  }

  #{base-class('plain')} {
    #{zip($elements)} {
      font-size: var(--font-size);
      line-height: var(--line-height);
      font-family: var(--font-family);
      letter-spacing: var(--letter-spacing);
      font-feature-settings: var(--font-feature-settings);

      @if $trim {
        --trim-adjacent: 0em;
        --trim-top: calc((var(--line-height) - 1) * 1em / 2 + var(--trim-capline) * 1em + var(--trim-adjacent));
        --trim-bottom: calc((var(--line-height) - 1) * 1em / 2 + var(--trim-baseline) * 1em);
      }

      @at-root #{selector-insert('>')} {
        margin-top: if($trim, calc(0px - var(--trim-top)), 0);
        margin-bottom: if($trim, calc(0px - var(--trim-bottom)), 0);
        margin-right: if($trim, var(--trim-x), 0);
        margin-left: if($trim, var(--trim-x), 0);
      }
      @at-root #{selector-insert('> * +')} {
        margin-top: subtract(var(--stack-gap, var(--inner-y)), if($trim, var(--trim-top), 0em));
      }
      @at-root #{selector-insert(selector-last(), '+')} {
        --trim-adjacent: calc((1em - 1ex)/2);
      }
    }
  }

}
