//  _
// | |
// | |_ _   _ _ __   ___
// | __| | | | '_ \ / _ \
// | |_| |_| | |_) | (_) |
//  \__|\__, | .__/ \___/
//       __/ | |
//      |___/|_|

$typo-elements: (h1 h2 h3 h4 h5 h6 p ul ol blockquote) !default;

@function normalize-unit($n, $unit) { @return if((type-of($n) == number) and unitless($n), $n * $unit, $n); }

@mixin homework-setup-typo( $trim: true, $trim-elements: $typo-elements ) {

  // normalize $fonts map
  $fonts: if(length($fonts) > 0, $fonts, $fonts-defaults) !global;

  @each $f, $font in $fonts {
    $font: map-merge($font-default, $font);
    $fonts: map-merge($fonts, ($f: $font)) !global;
  }

  body,
  #{base-class('font', false)},
  #{selector-combine(base-class('plain'), '*', '>')} {
    font-family: var(--font-family);
    font-size: var(--font-size);
    line-height: calc(var(--line-height)); // can be raw calc values !!
    letter-spacing: calc(var(--letter-spacing)); // can be raw calc values !!
  }

  .lh-loose { line-height: calc(var(--line-height) * 1.1); }
  .lh-tight { line-height: calc(var(--line-height) * 0.9); }

  .ls-loose { letter-spacing: calc(var(--letter-spacing) * 1.1); }
  .ls-tight { letter-spacing: calc(var(--letter-spacing) * 0.9); }

  @if $trim {

    // stack > trim
    #{selector-combine(base-class('stack'), '.trim', '>')} {
      --trim-top: calc((var(--line-height) - 1em) / 2 + var(--dist-capline, 0em) + var(--trim-top-adjust, 0em));
      --trim-bottom: calc((var(--line-height) - 1em) / 2 + var(--dist-baseline, 0em));
      margin-top: calc(0em - var(--trim-top));
      margin-bottom: calc(0em - var(--trim-bottom));
      margin-right: var(--trim-sides);
      margin-left: var(--trim-sides);
    }
    #{selector-combine(base-class('stack'), '.trim', '> * +')} {
      margin-top: subtract(var(--stack-gap), var(--trim-top));
    }
    #{selector-combine('.trim', '.trim', '+')} {
      --trim-top-adjust: var(--trim-adjacent);
    }

    // plain > :-webkit-any (MUST BE DECLARED SEPARATELY!)
    #{selector-combine(base-class('plain'), webkit-any($trim-elements), '>')} {
      --trim-top: calc((var(--line-height) - 1em) / 2 + var(--dist-capline, 0em) + var(--trim-top-adjust, 0em));
      --trim-bottom: calc((var(--line-height) - 1em) / 2 + var(--dist-baseline, 0em));
      margin-top: calc(0em - var(--trim-top));
      margin-bottom: calc(0em - var(--trim-bottom));
      margin-right: var(--trim-sides);
      margin-left: var(--trim-sides);
    }
    #{selector-combine(base-class('plain'), webkit-any($trim-elements), '> * +')} {
      margin-top: subtract(var(--stack-gap), var(--trim-top));
    }
    #{selector-combine(base-class('plain'), selector-combine(webkit-any($trim-elements), webkit-any($trim-elements), '+'), '>')} {
      --trim-top-adjust: var(--trim-adjacent);
    }

    // plain > :-moz-any (MUST BE DECLARED SEPARATELY!)
    #{selector-combine(base-class('plain'), moz-any($trim-elements), '>')} {
      --trim-top: calc((var(--line-height) - 1em) / 2 + var(--dist-capline, 0em) + var(--trim-top-adjust, 0em));
      --trim-bottom: calc((var(--line-height) - 1em) / 2 + var(--dist-baseline, 0em));
      margin-top: calc(0em - var(--trim-top));
      margin-bottom: calc(0em - var(--trim-bottom));
      margin-right: var(--trim-sides);
      margin-left: var(--trim-sides);
    }
    #{selector-combine(base-class('plain'), moz-any($trim-elements), '> * +')} {
      margin-top: subtract(var(--stack-gap), var(--trim-top));
    }
    #{selector-combine(base-class('plain'), selector-combine(moz-any($trim-elements), moz-any($trim-elements), '+'), '>')} {
      --trim-top-adjust: var(--trim-adjacent);
    }

  }

  @each $f, $font in $fonts {
    :root {
      $ff: map-get($font, 'font-family');
      $lh: map-get($font, 'line-height');
      $ls: map-get($font, 'letter-spacing');
      --font-family-#{$f}: #{$ff};
      --line-height-#{$f}: #{decalc(normalize-unit($lh, 1em))};
      --letter-spacing-#{$f}: #{decalc($ls)}; // normalize this too ?

      @if $trim {
        $dc: map-get($font, 'dist-capline');
        $db: map-get($font, 'dist-baseline');
        $ts: map-get($font, 'trim-sides');
        $ta: map-get($font, 'trim-adjacent');
        --dist-capline-#{$f}: #{if(unitless($dc), $dc*1em, $dc)};
        --dist-baseline-#{$f}: #{if(unitless($db), $db*1em, $db)};
        --trim-sides-#{$f}: #{$ts};
        --trim-adjacent-#{$f}: #{decalc($ta)};
      }
    }

    #{base-class('font-#{$f}')}, #{if($f == nth(map-keys($fonts), 1), 'body', '')} {
      --font-family: var(--font-family-#{$f});
      --line-height: var(--line-height-#{$f});
      --letter-spacing: var(--letter-spacing-#{$f});

      @if $trim {
        --dist-capline: var(--dist-capline-#{$f});
        --dist-baseline: var(--dist-baseline-#{$f});
        --trim-sides: var(--trim-sides-#{$f});
        --trim-adjacent: var(--trim-adjacent-#{$f});
      }
    }
  }

  @each $m in join((null), map-keys($media)) {
    @include m($m) {
      @each $f, $mod in m-var-orig('font-mods') {
        :root {
          @each $s, $set in $mod or () {

            // (A) output the custom properties
            $fz: __nth($set, 1); $lh: __nth($set, 2);

            // TODO: TEST whether it's possible to use lerp expressions here !!
            --font-size-#{$f}-#{$s}: #{decalc(normalize-unit($fz, 1rem))};

            @if $lh != () {
              // TODO: TEST whether it's possible to use lerp expressions here !!
              --line-height-#{$f}-#{$s}: #{decalc(normalize-unit($lh, 1em))};
            }

            // (B) if on $root, output the .font-(f)-(s) assignment
            @if not $m {
              @at-root .font-#{$f}-#{$s} {
                --font-size: var(--font-size-#{$f}-#{$s});
                --line-height: var(--line-height-#{$f}-#{$s}, var(--line-height-#{$f}));
              }
            }
          }
        }
      }
    }
  }

}
