//             _     _
//            (_)   | |
//   __ _ _ __ _  __| |
//  / _` | '__| |/ _` |
// | (_| | |  | | (_| |
//  \__, |_|  |_|\__,_|
//   __/ |
//  |___/

// grid, flow, cols, rows

@mixin homework-setup-grid($max-columns: --max-columns(), $row-classes: false) {

  // global bases and mods
  // flow, grid

  #{base-class('flow')} {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    width: calc(100% + var(--col-gap, var(--inner-x)));
    margin-left: calc(var(--col-gap, var(--inner-x)) / -2);
    margin-right: calc(var(--col-gap, var(--inner-x)) / -2);
    margin-top: calc(var(--row-gap, var(--inner-y)) / -2);
    margin-bottom: calc(var(--row-gap, var(--inner-y)) / -2);
    & > * {
      flex: 0 0 auto;
      width: 100%;
      min-width: 0%; // https://css-tricks.com/flexbox-truncated-text/
      min-height: 1px;
      background-clip: content-box;
      padding-left: calc(var(--col-gap, var(--inner-x)) / 2);
      padding-right: calc(var(--col-gap, var(--inner-x)) / 2);
      padding-top: calc(var(--row-gap, var(--inner-y)) / 2);
      padding-bottom: calc(var(--row-gap, var(--inner-y)) / 2);
    }
  }

  #{base-class('grid')} {
    display: grid;
    grid-gap: var(--row-gap, var(--inner-y)) var(--col-gap, var(--inner-x));
    grid-template-rows: repeat(var(--row-span, 1), 1fr); // could be 0% instead of auto ?
    grid-template-columns: repeat(var(--col-span, var(--grid-columns)), minmax(0%, 1fr)); // ~= 'min-width: 0%' rule for flex flow...
    & > * {
      grid-column: span var(--col-span, var(--grid-columns)) / span var(--col-span, var(--grid-columns));
      grid-row: span var(--row-span, 1) / span var(--row-span, 1);
    }
  }

  @each $y in map-keys(inner-y-mods()) { .flow-#{$y}, .grid-#{$y} { --row-gap: var(--inner-y-#{$y}); } }
  @each $x in map-keys(inner-x-mods()) { .flow-x-#{$x}, .grid-x-#{$x} { --col-gap: var(--inner-x-#{$x}); } }

  .flow-0, .grid-0 { --row-gap: 0; }
  .flow-x-0, .grid-x-0 { --col-gap: 0; }
  .flow-0-0, .grid-0-0 { --row-gap: 0; --col-gap: 0; }
}
