//            _
//           | |
//   ___ ___ | |_   _ _ __ ___  _ __  ___
//  / __/ _ \| | | | | '_ ` _ \| '_ \/ __|
// | (_| (_) | | |_| | | | | | | | | \__ \
//  \___\___/|_|\__,_|_| |_| |_|_| |_|___/

@function m__start-end($pair, $index, $list, $m__, $_...) { @return selector-parse('.#{$m__}start-#{nth($pair, 1)}.end-#{nth($pair, 2)}'); }
@function m__row-start-row-end($pair, $index, $list, $m__, $_...) { @return selector-parse('.#{$m__}row-start-#{nth($pair, 1)}.row-end-#{nth($pair, 2)}'); }

@mixin homework-setup-grids($max-columns: --max-columns()) {

  // MULTI-COLUMN LAYOUT
  #{base-class('mcol')} {
    column-fill: balance;
    column-width: auto;
    column-count: var(--multi-columns, 1);
    column-gap: var(--column-gap);
    perspective: 1; // create new stacking context; see issues https://caniuse.com/#feat=multicolumn
    & > * {
      // column/section/page fragmentation:
      // see https://www.smashingmagazine.com/2019/02/css-fragmentation/
      column-span: none; // will not be used
      box-decoration-break: clone;
      break-before: auto;
      break-after: auto;
      orphans: 2;
      widows: 2;
    }
    & > * {
      --column-span: calc(var(--column-span-proxy, var(--global-columns)) / var(--multi-columns, 1));
      --local-columns: calc(var(--local-columns-proxy, var(--global-columns)) / var(--multi-columns, 1));
    }
  }

  // MULTI-COLUMN GRID LAYOUT
  #{base-class('mcol-grid')} {
    margin-top: calc(var(--row-gap) / -2) !important;
    margin-bottom: calc(var(--row-gap) / -2) !important;
    & > * {
      // don't break inside; treat as blocks
      break-inside: avoid;
      padding-top: calc(var(--row-gap) / 2) !important;
      padding-bottom: calc(var(--row-gap) / 2) !important;
    }
  }
  /*
    base-class(flow)
      &.row
      &.col
      &.row-reverse
      &.col-reverse

    base-class(flow-grid)

    :root
      --column-gap: 0;
      --row-gap: 0;

    base-class(mcol-grid)
    base-class(flow-grid)
    base-class(grid)
      --column-gap: var(--inner-x)
   */

  #{base-class('flow')} {
    display: flex !important;
    flex-flow: row wrap;
    &.row { flex-direction: row; }
    &.col { flex-direction: column; }
    &.row-reverse { flex-direction: row-reverse; }
    &.col-reverse { flex-direction: column-reverse; }
  }

  // FLEXBOX GRID LAYOUT
  #{base-class('flow-grid')} {
    width: calc(100% + var(--column-gap)) !important;
    margin-left: calc(var(--column-gap) / -2) !important;
    margin-right: calc(var(--column-gap) / -2) !important;
    margin-top: calc(var(--row-gap) / -2) !important;
    margin-bottom: calc(var(--row-gap) / -2) !important;
    & > * {
      flex: 0 0 auto;
      width: 100%;
      min-width: 0%; // https://css-tricks.com/flexbox-truncated-text/
      max-width: 100%;
      // min-height: 1px; // prevent collapse (? might be only for float-based)
      background-clip: content-box; // so gutters remain clear
      padding-left: calc(var(--column-gap) / 2) !important;
      padding-right: calc(var(--column-gap) / 2) !important;
      padding-top: calc(var(--row-gap) / 2) !important;
      padding-bottom: calc(var(--row-gap) / 2) !important;
    }
  }

  // GRID LAYOUT
  #{base-class('grid')} {
    display: grid !important;
    grid-gap: var(--row-gap) var(--column-gap);
    grid-template-columns: repeat(var(--column-span, var(--global-columns)), minmax(0%, 1fr)); // ~= 'min-width: 0%' rule above https://css-tricks.com/flexbox-truncated-text/
    grid-template-rows: repeat(var(--row-span, var(--global-rows, 1)), max-content);
    &.row { grid-auto-flow: row; }
    &.col { grid-auto-flow: column; }
    &.row-reverse { grid-auto-flow: row-reverse; }
    &.col-reverse { grid-auto-flow: column-reverse; }
    & > * {
      grid-column: span var(--column-span, var(--global-columns)) / span var(--column-span, var(--global-columns));
      grid-row: span var(--row-span, 1) / span var(--row-span, 1);
    }
  }

  :root { --column-gap: var(--inner-x); }

  .mcol-grid, .flow-grid, .grid { --row-gap: var(--inner-y); }

  @each $y in map-keys(inner-y-mods()) {
    .mcol-grid-#{$y}, .flow-grid-#{$y}, .grid-#{$y} { --row-gap: var(--inner-y-#{$y}); }
  }

  // make the following props *non-cascading*
  * {
    --column-push: initial;
    --column-push-r: initial;
  }

  @each $m in join((null), map-keys($media)) {
    @include m($m) {

      #{state-base-class('span', false, $m)} {
        // context: solo
        width: calc((99.99999% + var(--column-gap)) * var(--column-span, var(--global-columns)) / var(--local-columns, var(--global-columns)) - var(--column-gap)) !important;
        @at-root #{selector-insert(base-class('flow-grid'), '>')} {
          // context: flow-grid
          width: calc(99.99999% * var(--column-span, var(--global-columns)) / var(--local-columns, var(--global-columns))) !important;
        }
        // @at-root #{selector-insert(base-class('mcol'), '>')} {
        //   // context: mcol
        //   width: initial;
        // }
        @at-root #{selector-insert(base-class('grid'), '>')} {
          // context: grid
          width: initial !important;
        }
      }

      // contexts: solo, flow-grid; reset: grid
      #{state-base-class('pull', false, $m)},
      #{state-base-class('push', false, $m)} {
        // context: solo
        margin-left: calc((99.99999% + var(--column-gap)) * var(--column-push) / var(--local-columns, var(--global-columns)));
        @at-root #{selector-insert(base-class('flow-grid'), '>')} {
          // context: flow-grid
          margin-left: calc(99.99999% * var(--column-push) / var(--local-columns, var(--global-columns)));
        }
        // @at-root #{selector-insert(base-class('grid'), '>')} {
        //   // context: grid
        //   margin-left: initial;
        // }
      }

      #{state-base-class('pull-r', false, $m)},
      #{state-base-class('push-r', false, $m)} {
        // context: solo
        margin-right: calc((99.99999% + var(--column-gap)) * var(--column-push-r) / var(--local-columns, var(--global-columns)));
        @at-root #{selector-insert(base-class('flow-grid'), '>')} {
          // context: flow-grid
          margin-right: calc(99.99999% * var(--column-push-r) / var(--local-columns, var(--global-columns)));
        }
        // @at-root #{selector-insert(base-class('grid'), '>')} {
        //   // context: grid
        //   margin-right: initial;
        // }
      }

      $m__: state-prefix();

      // context: mcol-only (doesn't work in FF)
      #{base-class('mcol')} {
        & > .#{$m__}span-all {
          column-span: all;
        }
      }

      // context: flow-grid-only
      #{base-class('flow-grid')} {
        & > .#{$m__}span-auto {
          flex: 1 1 auto;
          --column-span: 0;
        }
      }

      @for $n from 1 through $max-columns {

        // MCOL

        // mcol-(x) ==> --multi-columns = x
        .#{$m__}mcol-#{$n} { --multi-columns: #{$n}; }

        // PUSH / PULL

        // push-/pull-(x) ==> --column-push = x
        .#{$m__}push-#{$n} { --column-push: #{$n}; }
        .#{$m__}pull-#{$n} { --column-push: #{$n * -1}; }

        // push-r-/pull-r-(x) ==> --column-push-r = x
        .#{$m__}push-r-#{$n} { --column-push-r: #{$n}; }
        .#{$m__}pull-r-#{$n} { --column-push-r: #{$n * -1}; }

        // SPAN / START / END

        // // EXPERIMENTAL: span-min-() --> maintain min of 2 columns, expand to fill.
        // .#{$m__}span-min-#{$n} {
        //   --column-span: max(#{$n}, var(--global-columns));
        //   & > * { --local-columns: max(#{$n}, var(--global-columns)); }
        // }

        // // EXPERIMENTAL: span-max-() --> maintain max of 2 columns, contract to fill.
        // .#{$m__}span-max-#{$n} {
        //   --column-span: min(#{$n}, var(--global-columns));
        //   & > * { --local-columns: min(#{$n}, var(--global-columns)); }
        // }

        .#{$m__}span-#{$n} {
          --column-span: #{$n} !important;
          --column-span-proxy: #{$n} !important;
          & > * {
            --local-columns: #{$n} !important;
            --local-columns-proxy: #{$n} !important;
          }

          // NB: this is while CSS min() and max() functions are not yet supported
          // $global-columns: m-var('global-columns');
          // &.span-safe {
          //   --column-span: #{min($n, $global-columns)};
          //   --column-span-proxy: #{min($n, $global-columns)};
          //   & > * {
          //     --local-columns: #{min($n, $global-columns)};
          //     --local-columns-proxy: #{min($n, $global-columns)};
          //   }
          // }
        }

        .#{$m__}start-#{$n} {
          grid-column-start: #{$n};
          --column-span: calc(var(--column-span-proxy, var(--global-columns)) - #{$n - 1});
          & > * {
            --local-columns: calc(var(--local-columns-proxy, var(--global-columns)) - #{$n - 1});
          }
        }

        .#{$m__}end-#{$n + 1} {
          grid-column-end: #{$n + 1};
          --column-span: #{$n};
          & > * {
            --local-columns: #{$n};
          }
        }

        .#{$m__}end-neg-#{$n} {
          grid-column-end: #{$n * -1};
          --column-span: calc(var(--column-span-proxy, var(--global-columns)) - #{$n - 1});
          & > * {
            --local-columns: calc(var(--local-columns-proxy, var(--global-columns)) - #{$n - 1});
          }
        }

        // ROW SPAN / START / END
        // NB: implicit spanning behavior is not used in rows, because they fallback to 1 instead of --global-rows

        .#{$m__}row-span-#{$n} { --row-span: #{$n}; }

        .#{$m__}row-start-#{$n} { grid-row-start: #{$n}; }

        .#{$m__}row-end-#{$n + 1} { grid-row-end: #{$n + 1}; }

        .#{$m__}row-end-neg-#{$n} { grid-row-end: #{$n * -1}; }
      }

      // $span-pair-list: ();
      // @for $end from 2 through ($max-columns + 1) {
      //   @for $start from 1 through ($end - 1) {
      //     $span: ($end - $start);
      //     $span-pair-list: map-merge($span-pair-list, ($span: append(map-get($span-pair-list, $span) or (), ($start $end))));
      //   }
      // }

      // @each $n, $pair-list in $span-pair-list {

      //   // .start-(s).end-(e)
      //   #{__map($pair-list, 'm__start-end', $m__)} {
      //     --column-span: #{$n};
      //     --column-span-proxy: #{$n};
      //     & > * {
      //       --local-columns: #{$n};
      //       --local-columns-proxy: #{$n};
      //     }
      //   }

      //   // .row-start-(s).row-end-(e)
      //   #{__map($pair-list, 'm__row-start-row-end', $m__)} {
      //     --row-span: #{$n};
      //   }
      // }

    }
  }
}
