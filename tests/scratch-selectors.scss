@import 'index';

@function slice($list, $start-at: 1, $end-at: -1, $sep: list-separator($list)) {
  $out: ();
  @if $end-at < 0 { $end-at: $end-at + length($list) + 1; }
  @if $start-at > length($list) { @return (); }
  @if $start-at > 0 and $end-at >= $start-at {
    @for $i from $start-at through $end-at {
      $out: append($out, nth($list, $i), $sep);
    }
  }
  @return $out;
}

@function selector-last($parents: null) {
  $lasts: ();
  $parents: selector-parse($parents or &);
  @each $parent in $parents {
    $last: nth($parent, length($parent));
    @if not index($lasts, $last) and length($last) > 0 {
      $lasts: append($lasts, $last, 'comma');
    }
  }
  @return if($lasts!=(), selector-parse($lasts), null);
}

@function selector-initial($parents: null) {
  $out: ();
  $parents: selector-parse($parents or &);
  @each $parent in $parents {
    $initial: slice($parent, 1,  length($parent) - 1);
    @if not index($out, $initial) and length($initial) > 0 {
      $out: append($out, $initial, 'comma');
    }
  }
  @return if($out!=(), selector-parse($out), null);
}

@function selector-insert($sels, $cmbn: '', $parents: null) {
  $parents: selector-parse($parents or &);
  $out: ();
  $prevs: selector-initial($parents);
  $lasts: selector-last($parents);
  $sels: selector-parse(if(length($sels) == 0, '', $sels));
  @if length(nth($prevs, 1)) > 0 {
    @each $prev in $prevs {
      @each $sel in $sels {
        @each $last in $lasts {
          $out: append($out, #{$prev} #{$sel} #{$cmbn} #{$last}, 'comma');
        }
      }
    }
  } @else {
    @each $sel in $sels {
      @each $last in $lasts {
        $out: append($out, #{$sel} #{$cmbn} #{$last}, 'comma');
      }
    }
  }
  @return selector-parse($out);
}

@function base-class($base, $solo: true, $_...) {
  @if $solo {
    @return selector-parse('.#{$base}, [class^="#{$base}-"], [class*=" #{$base}-"]');
  } @else {
    @return selector-parse('[class^="#{$base}-"], [class*=" #{$base}-"]');
  }
}

#{base-class('stack')} {

  #{base-class('f')} {
    color: blue;

  }
}
// selector-last
// selector-initial
// selector-insert
.a, .b {
  color: blue;
  @at-root #{selector-insert('.c, .d', '> .e +')} {
    color: red;
  }
  @at-root #{selector-insert(selector-insert('.e, .f', '>', '.c, .d'), '+')} {
    color: red;
  }
}


/* SELECTOR COMBINE !!! */


@function base-class($base, $solo: true, $_...) {
  @if $solo {
    @return selector-parse('.#{$base}, [class^="#{$base}-"], [class*=" #{$base}-"]');
  } @else {
    @return selector-parse('[class^="#{$base}-"], [class*=" #{$base}-"]');
  }
}

@function selector-combine($sels1, $sels2, $cmbn: '') {
  $sels1: selector-parse(if(length($sels1) == 0, '', $sels1));
  $sels2: selector-parse(if(length($sels2) == 0, '', $sels2));
  $out: ();
  @each $sel1 in $sels1 {
    @each $sel2 in $sels2 {
      $out: append($out, #{$sel1} #{$cmbn} #{$sel2}, 'comma');
    }
  }
  @return selector-parse($out);
}

$plain-els: h2 h3 h4 h5 h6 p ul ol dl;

$trim-excl: div table figure img svg video iframe object;

#{base-class('f', false)} { content: 'base';}
#{selector-combine(base-class('plain'), zip($plain-els))} { content: 'base';}

#{selector-combine(base-class('stack'), base-class('f', false), '>')},
#{selector-combine('.trim', base-class('f', false), '>')} { content: 'trim'; }
#{selector-combine(base-class('plain'), zip($plain-els), '>')} { content: 'trim';}

#{selector-combine(base-class('stack'), base-class('f', false), '> * +')} { content: 'follow-trim';}
#{selector-combine(base-class('plain'), zip($plain-els), '> * +')} { content: 'follow-trim';}

#{selector-combine(base-class('f', false), base-class('f', false), '+')} { content: 'adjacent';}
#{selector-combine(base-class('plain'), selector-combine(zip($plain-els), zip($plain-els), '+'), '>')} { content: 'adjacent';}

@function selector-not($sel, $nots) {
  @each $not in $nots { $sel: '#{$sel}:not(#{$not})' }
  @return selector-parse($sel);
}


#{selector-combine(base-class('plain'), selector-not('*', $trim-excl))} { content: 'base';}

#{selector-combine(base-class('plain'), selector-not('*', $trim-excl), '>')} { content: 'trim';}

#{selector-combine(base-class('plain'), selector-not('*', $trim-excl), '> * +')} { content: 'follow-trim';}

#{selector-combine(base-class('plain'), selector-combine(selector-not('*', $trim-excl), selector-not('*', $trim-excl), '+'), '>')} { content: 'adjacent';}
