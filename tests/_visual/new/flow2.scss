@import 'index';

$root: (
  inner-x: 2rem,
  inner-x-mods: (
    s: 0.5,
    form: 10px,
  ),
  inner-y-mods: (
    s: 1,
    m: 2,
    l: 4rem
  )
);

$media: (
  a: (breakpoint: 20em),
  b: (
    inner-x: 3rem,
    breakpoint: 30em
  ),
  c: (breakpoint: 40em),
);

@include homework-setup-core($output: false);

/////////////////////////////////////////////
////////////////// NEW CODE /////////////////
/////////////////////////////////////////////


@function base-class($base, $solo: true, $_...) {
  @if $solo {
    @return selector-parse('.#{$base}, [class^="#{$base}-"], [class*=" #{$base}-"]');
  } @else {
    @return selector-parse('[class^="#{$base}-"], [class*=" #{$base}-"]');
  }
}

@function m-suffix($m: $curr-m) {
  @return if($m, '#{$m}__', '');
}

@function m-base-class($base, $solo: true, $m: $curr-m, $_...) {
  $sel: if($m, '#{$m}__#{$base}', $base);
  @if $solo {
    @return selector-parse('.#{$sel}, [class^="#{$sel}-"], [class*=" #{$sel}-"]');
  } @else {
    @return selector-parse('[class^="#{$sel}-"], [class*=" #{$sel}-"]');
  }
}

@function m-mod-class($base, $mod, $solo: true) {
  $sel: if($mod, '#{$base}-#{$mod}', #{$base});
  @if $solo {
    @return selector-parse(".#{$sel}, [class$='__#{$sel}'], [class*='__#{$sel} ']");
  } @else {
    @return selector-parse("[class$='__#{$sel}'], [class*='__#{$sel} ']");
  }
}

/*
  grid flow cell II

    @function solo-span
    @function solo-push

    @function flow-span
    @function flow-push

    @mixin solo-cell($span, $push-l, $push-r) {}
    @mixin solo-cells($span, $push-l, $push-r) {}

    @mixin flow-cell($span, $push-l, $push-r) {}
    @mixin flow-cells($span, $push-l, $push-r) {}

    .span-[n], .push-[l|r]-[n], .pull-[l|r]-[n]

    .flow-[y], .flow-x-[x]

      .span-[n], .push-[l|r]-[n], .pull-[l|r]-[n]

    .grid-[y], .grid-x-[x]

      .row-[s]-[e]
      .col-[s]-[e]

  REMINDERS:
    - only span, push, pull, span-y, row, and col have media variants
    - flow and grid need -x-[x] variants

*/

:root {
  --row-gap: null;
  --col-gap: null;
  --row: initial;
  --col: initial;
  --cols: var(--grid-cols);
  --rows: var(--grid-rows, --grid-cols);
  --span: var(--cols);
  --span-y: 1;
  --push-r: initial;
  --push-l: initial;
}

//   __ _                            _     _
//  / _| |                          (_)   | |
// | |_| | _____      __   __ _ _ __ _  __| |
// |  _| |/ _ \ \ /\ / /  / _` | '__| |/ _` |
// | | | | (_) \ V  V /  | (_| | |  | | (_| |
// |_| |_|\___/ \_/\_( )  \__, |_|  |_|\__,_|
//                   |/    __/ |
//                        |___/

#{base-class('flow')} { content: 'flow'; }
#{base-class('grid')} { content: 'grid'; }

$inner-y-keys: map-keys(inner-y-mods());
@each $y in $inner-y-keys {
  .flow-#{$y}, .grid-#{$y} { --row-gap: var(--inner-y-#{$y}); }
}

$inner-x-keys: map-keys(inner-x-mods());
@each $x in $inner-x-keys {
  .flow-x-#{$x}, .grid-x-#{$x} { --col-gap: var(--inner-x-#{$x}); }
}

//           _ _
//          | | |
//   ___ ___| | |
//  / __/ _ \ | |
// | (_|  __/ | |
//  \___\___|_|_|

@each $m in join((null), media-keys()) {
  @include m($m) {

    #{m-base-class('span')} {
      width: calc((99.99999% + var(--col-gap)) * var(--span) / var(--cols) - var(--col-gap)) !important;

      @at-root #{selector-insert(base-class('flow'), '>')} {
        width: calc(99.99999% * var(--span) / var(--cols)) !important;
      }

      @at-root #{selector-insert(base-class('grid'), '>')} {
        grid-column-end: span var(--span);
      }
    }

    #{m-base-class('pull-l', false)},
    #{m-base-class('push-l', false)} {
      margin-left: calc((99.99999% + var(--col-gap)) * var(--push-l) / var(--cols)) !important;

      @at-root #{selector-insert(base-class('flow'), '>')} {
        margin-left: calc(99.99999% * var(--push-l) / var(--cols)) !important;
      }
    }

    #{m-base-class('pull-r', false)},
    #{m-base-class('push-r', false)} {
      margin-left: calc((99.99999% + var(--col-gap)) * var(--push-r) / var(--cols)) !important;

      @at-root #{selector-insert(base-class('flow'), '>')} {
        margin-left: calc(99.99999% * var(--push-r) / var(--cols)) !important;
      }
    }

    #{m-base-class('cols', false)} { grid-template-columns: var(--cols); }
    #{m-base-class('rows', false)} { grid-template-rows: var(--rows); }
    #{m-base-class('col', false)} { grid-column-start: var(--col); }
    #{m-base-class('row', false)} { grid-row-start: var(--row); }
    #{m-base-class('span-y', false)} { grid-row-end: span var(--span-y); }
  }
}

$max-columns: max-columns();
// $pairs: ();
// $map: ();

@for $n from 0 through max-columns() {
  @if $n > 0 {
    #{m-mod-class('span', $n)} { --span: #{$n}; & > * { --cols: #{$n}; } }
    #{m-mod-class('span-y', $n)} { --span-y: #{$n}; }
    // #{m-mod-class('push-l-neg', $n)} { --push-l: #{$n*-1}; }
    // #{m-mod-class('push-r-neg', $n)} { --push-r: #{$n*-1}; }
  }
  #{m-mod-class('pull-l', $n)} { --push-l: #{$n*-1}; }
  #{m-mod-class('pull-r', $n)} { --push-r: #{$n*-1}; }
  #{m-mod-class('push-l', $n)} { --push-l: #{$n}; }
  #{m-mod-class('push-r', $n)} { --push-r: #{$n}; }
}


@for $b from 2 through (max-columns() + 1) {
  @for $a from 1 through ($b - 1) {
    // $pairs: append($pairs, #{$a}-#{$b});
    // $map: map-set($map, $a, append(map-get($map, $a) or (), ($a $b)));

    .row-#{$a}-#{$b} {
      grid-row: #{$a} / #{$b};
      // > * { --span: #{$b - $a}; }
    }
    .col-#{$a}-#{$b} {
      grid-column: #{$a} / #{$b};
      > * { --span: #{$b - $a}; }
    }
  }
}
