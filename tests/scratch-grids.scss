@import 'index';

$root: (
  inner-x: 2rem,
  inner-x-mods: (
    s: 0.5,
    form: 10px,
  ),
  inner-y-mods: (
    s: 1,
    m: 2,
    l: 4rem
  )
);

$media: (
  a: (breakpoint: 20em),
  b: (
    inner-x: 3rem,
    breakpoint: 30em
  ),
  c: (breakpoint: 40em),
);

@include homework-setup-core($output: false);

/*
    @function solo-span
    @function solo-push

    @function flow-span
    @function flow-push

    @mixin solo-cell($span, $push-l, $push-r) {}
    @mixin solo-cells($span, $push-l, $push-r) {}

    @mixin flow-cell($span, $push-l, $push-r) {}
    @mixin flow-cells($span, $push-l, $push-r) {}

    .span-[n], .push-[l|r]-[n]

    .flow-[y], .flow-x-[x]

      .span-[n], .push-[l|r]-[n]

    .grid-[y], .grid-x-[x]

      .row-[s]-[e], .row-span-[n]
      .col-[s]-[e], .col-span-[n]

*/

:root {
  --span-max: --grid-columns;
  --span-x: --span-max;
  --span-y: 1;
  --push-r: initial;
  --push-l: initial;
}

#{base-class('span')} {
  content: 'solo-span';
}

#{base-class('push-l', false)} {
  content: 'solo-push-l';
}
#{base-class('push-r', false)} {
  content: 'solo-push-r';
}

#{base-class('flow', false)} {
  content: 'flow';

  #{base-class('span')} {
    @at-root #{selector-insert('>')} {
      content: 'flow-span';
    }
  }

  #{base-class('push-l', false)} {
    @at-root #{selector-insert('>')} {
      content: 'flow-push-l';
    }
  }

  #{base-class('push-r', false)} {
    @at-root #{selector-insert('>')} {
      content: 'flow-push-r';
    }
  }
}

#{base-class('grid', false)} {
  content: 'grid';

  #{base-class('span', false)} {
    @at-root #{selector-insert('>')} {
      content: 'grid-span';
    }
  }

  // #{base-class('row', false)} {
  //   @at-root #{selector-insert('>')} {
  //     content: 'grid-row';
  //   }
  // }

  // #{base-class('col', false)} {
  //   @at-root #{selector-insert('>')} {
  //     content: 'grid-col';
  //   }
  // }
}

$max-columns: max-columns();
$pairs: ();
$map: ();


@for $n from 1 through max-columns() {
  .span-y-#{$n} { --span-y: #{$n}; }
  // .col-span-#{$n} { grid-column: span #{$n}; }
}

@for $b from 2 through (max-columns() + 1) {
  @for $a from 1 through ($b - 1) {
    // $pairs: append($pairs, #{$a}-#{$b});
    // $map: map-set($map, $a, append(map-get($map, $a) or (), ($a $b)));

    .row-#{$a}-#{$b} {
      grid-row: #{$a} / #{$b};
      // > * { --span-n: #{$b - $a}; }
    }
    .col-#{$a}-#{$b} {
      grid-column: #{$a} / #{$b};
      > * { --span-n: #{$b - $a}; }
    }
  }
}

.debug {
  out: inspect($pairs);
  out: inspect($map);
}
