
#{base-class('solid')} { transition: background-color 100ms; }
#{base-class('color')} { transition: color 100ms; }
a, button, [role='button'] {
  transition-property: background-color color;
  transition-duration: 100ms 100ms;
}

//
// standard background
//

.solid--std {
  background-color: color(std);
  .solid--std & { background-color: white; }
  .solid--std .solid--std & { background-color: color(std); }
  @include m(null, l) {
    aside.area--side & { background-color: white; }
  }
}

//
// standard background inside links
//
a, button {
  &:hover, &:active, &:focus {
    &.solid--std, & .solid--std { background-color: color(std-hover) !important; }
  }
}

// $key-colors: (
//   hwr: fire-engine,
//   fb1: st-tropez,
//   fb2: burgundy,
//   fb3: color(cadmium),
//   fb4: color(curious-blue),
//   fb5: olive-drab,
//   imb: teal-green,
//   fsi: teal-green,
// );

$keys: (hwr fb1 fb2 fb3 fb4 fb5 imb fsi);

@each $key in $keys {

  // !! make text color darker by for fb3 and fb4
  $txt-color: if(index(fb3 fb4, $key), blacken(color($key), 15%), color($key));

  .solid--#{$key} {
    background-color: color($key);
    color: white;
  }
  .color--#{$key} { color: $txt-color; }

  .theme--#{$key} {

    // backgrounds per theme
    .solid--key,
    ::selection,
    .button--key {
      background-color: color($key);
      color: white;
      @at-root #{selector-nest(#{base-class('theme')}, &)} {
        background-color: color($key);
        color: white;
      }
    }

    // backgrounds per theme, for hover/focus/active-able elements
    .button--key {
      &:hover, &:active, &:focus {
        background-color: color('#{$key}-hover');
        @at-root #{selector-nest(#{base-class('theme')}, &)} {
          background-color: color('#{$key}-hover');
        }
      }
    }

    // fg colors and filters
    .color--key { color: $txt-color; }
    .filter--key { filter: url('#duotone-filter-#{$key}') }
    .overlay--key {
      background-color: color($key);
      &:hover, &:active, &:focus { background-color: color('#{$key}-hover'); }
    }
    @at-root #{selector-nest(#{base-class('theme')}, &)} {
      .color--key { color: $txt-color; }
      .filter--key { filter: url('#duotone-filter-#{$key}') }
      .overlay--key {
        background-color: color($key);
        &:hover, &:active, &:focus { background-color: color('#{$key}-hover'); }
      }
    }


    // fg and bg per theme, of anchors and 'action'-able items
    @mixin themed-link {
      border-color: color($key);
      &.flow, .wysiwyg &[href] { border-bottom: 1px solid color($key); }
      &.target--key, & .target--key { color: $txt-color; }
      &:hover, &:active, &:focus {
        &.flow, .wysiwyg &[href] { border-bottom: 1px solid color('#{$key}-hover'); }
        &.solid--key, & .solid--key, & + label.solid--key {background-color: color('#{$key}-hover'); }
        &.target, & .target, & + label.target { color: $txt-color; }
        &.target--key, & .target--key, & + label.target--key { color: color('#{$key}-hover'); }
      }
    }
    a, .a, input, button {
      @include themed-link;
      @at-root #{selector-nest(#{base-class('theme')}, &)} { @include themed-link }
      &[disabled] {
        &.target--key, & .target--key { color: color(pumice); }
        &:hover, &:active, &:focus {
          &.solid--key, & .solid--key, & + label.solid--key {background-color: color('#{$key}-hover'); }
          &.target, & .target,  & + label.target { color: color(pumice); }
          &.target--key, & .target--key, & + label.target--key { color: color('#{$key}-hover'); }
        }
      }
    }
  }

  // //
  // // backgrounds
  // //
  // .theme--#{$key} .solid--key {
  //   background-color: color($key);
  //   color: white !important;
  //   @at-root #{selector-nest(#{base-class('theme')}, &)} {
  //     background-color: color($key);
  //     color: white !important;
  //   }
  // }
  // // .theme--#{$key} .color--key {
  // //   color: $txt-color;
  // //   @at-root #{selector-nest(#{base-class('theme')}, &)} {
  // //     color: color($key);
  // //   }
  // // }

  // //
  // // links and children of links
  // //
  // .theme--#{$key} a {
  //   border-color: color($key);
  //   &.target--key, & .target--key { color: color($key); }
  //   &:hover, &:active, &:focus {
  //     &.solid--key, & .solid--key { background-color: color('#{$key}-hover'); }
  //     &.target, & .target { color: color($key); }
  //     &.target--key, & .target--key { color: color('#{$key}-hover'); }
  //   }

  //   @at-root #{selector-nest(#{base-class('theme')}, &)} {
  //     border-color: color($key);
  //     &.target--key, & .target--key { color: color($key); }
  //     &:hover, &:active, &:focus {
  //       &.solid--key, & .solid--key { background-color: color('#{$key}-hover'); }
  //       &.target, & .target { color: color($key); }
  //       &.target--key, & .target--key { color: color('#{$key}-hover'); }
  //     }
  //   }
  // }
}
