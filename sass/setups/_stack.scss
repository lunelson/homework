//      _             _
//     | |           | |
//  ___| |_ __ _  ___| | __
// / __| __/ _` |/ __| |/ /
// \__ \ || (_| | (__|   <
// |___/\__\__,_|\___|_|\_\


@import 'support/stack-support';

@mixin setup-stack {

  #{base-class('stack')} {
    padding-top: 0.1px;
    padding-bottom: 0.1px;
    & > * { margin-top: 0; margin-bottom: 0; }
  }

  @include mm-for('inner-y') {
    $inner-y: m-var('inner-y');
    @if $inner-y {
      @each $y, $inner-y in if(type-of($inner-y) == 'map', $inner-y, (m: $inner-y)) {
        #{mod-class('stack', $y, 'm')} {
          // & > * + * { margin-top: $inner-y; }
          & > *:not(.unstack) + * { margin-top: $inner-y; }

          // @each $f, $font in $fonts {
          //   @each $t, $typo in $typos {
          //     .#{$f}-#{$t} {
          //       @at-root #{insert-parents(null, '>')} {

          //         $line: nth($typo, 2);
          //         $trim: divide($line - 1em, 2);
          //         @include adjacent-to('*:not(.no-stack)') {
          //           margin-top: subtract($length, $trim);
          //         }
          //       }
          //     }
          //   }
          // }


        }
      }
    }
  }

  @include mm-for('inner-y', 'copy-sizes') {
    $inner-y: m-var('inner-y');
    @if $inner-y {
      @each $y, $inner-y in if(type-of($inner-y) == 'map', $inner-y, (m: $inner-y)) {
        #{mod-class('stack', $y, 'm')} {
          // & > * + * { margin-top: $inner-y; }
          & > *:not(.unstack) + * { margin-top: $inner-y; }

          // @each $f, $font in $fonts {
          //   @each $t, $typo in $typos {
          //     .#{$f}-#{$t} {
          //       @at-root #{insert-parents(null, '>')} {

          //         $line: nth($typo, 2);
          //         $trim: divide($line - 1em, 2);
          //         @include adjacent-to('*:not(.no-stack)') {
          //           margin-top: subtract($length, $trim);
          //         }
          //       }
          //     }
          //   }
          // }


        }
      }
    }
  }

}
