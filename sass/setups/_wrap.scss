// __      ___ __ __ _ _ __
// \ \ /\ / / '__/ _` | '_ \
//  \ V  V /| | | (_| | |_) |
//   \_/\_/ |_|  \__,_| .__/
//                    | |
//                    |_|

@mixin setup-wrap {

  #{base-class('wrap')} { margin-right: auto; margin-left: auto; }
  .wrap--left { margin-left: 0; }
  .wrap--right { margin-right: 0; }

  $media-keys: map-keys($media);
  $media-length: length($media-keys);

  @each $key in $media-keys {
    @include m($key) {
      .wrap--each,
      .wrap--grid,
      .wrap--#{$key} {
        max-width: medium-var('inner-width', $key);
      }
    }
  }

  // wrap--to-x, // wrap--x-to
  @for $i from 1 through $media-length {
    .wrap--#{nth($media-keys, $i)}-to {
      @include mm(slice($media-keys, $i)) {
        max-width: medium-var('inner-width') or 100%;
      }
    }
    .wrap--to-#{nth($media-keys, $i)} {
      @include mm(slice($media-keys, 1, $i)) {
        max-width: medium-var('inner-width') or 100%;
      }
    }
  }

  // wrap--x-to-y
  @each $set in range-set($media-keys) {
    $i: nth($set,1); $j: nth($set,2);
    .wrap--#{nth($media-keys, $i)}-to-#{nth($media-keys, $j)} {
      @include mm(slice($media-keys, $i, $j)) {
        max-width: medium-var('inner-width') or 100%;
      }
    }
  }

}
