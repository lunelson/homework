//             _     _
//            (_)   | |
//   __ _ _ __ _  __| |
//  / _` | '__| |/ _` |
// | (_| | |  | | (_| |
//  \__, |_|  |_|\__,_|
//   __/ |
//  |___/


@import 'support/grid-support';

@mixin setup-grid {

  .row, #{base-class('grid')} {
    display: flex;
    & > * {
      flex: 1 1 0%; // explicit basis
      min-width: 0%; // https://css-tricks.com/flexbox-truncated-text/
      overflow-wrap: break-word; // break long words
      background-clip: content-box;
    }
  }

  #{base-class('grid')} { flex-wrap: wrap; }

  #{base-class('col')},
  #{base-class('cell')} {
    flex: 0 0 auto;
  }

  @include mm-for('inner-x') {
    $inner-x: inner-x();
    .row, #{base-class('grid')} {
      margin-left: $inner-x / -2;
      margin-right: $inner-x / -2;
      width: add(100%, $inner-x);
      & > * {
        padding-left: $inner-x / 2;
        padding-right: $inner-x / 2;
      }
    }
  }

  @include mm-for('inner-y') {
    $inner-y: m-var('inner-y');
    @if $inner-y {
      @each $y, $inner-y in if(type-of($inner-y) == 'map', $inner-y, (m: $inner-y)) {
        #{mod-class('grid', $y, 'm')} {
          margin-top: $inner-y / -2;
          margin-bottom: $inner-y / -2;
          & > * {
            padding-top: $inner-y / 2;
            padding-bottom: $inner-y / 2;
          }
        }
      }
    }
  }

}
