//   __            _
//  / _|          | |
// | |_ ___  _ __ | |_
// |  _/ _ \| '_ \| __|
// | || (_) | | | | |_
// |_| \___/|_| |_|\__|


@import 'support/font-support';

@if map-get($setups, 'font') {


  // if length of fonts is 0, merge fonts-default against it;
  $fonts: if(length($fonts) > 0, $fonts, $fonts-defaults) !global;

  // if $body-font name is unset, take the first font key in $fonts
  $body-font: $body-font or nth(map-keys($fonts), 1) !global;

  // merge each font against font-default; merge result back to $fonts
  @each $f, $font in $fonts {
    $font: map-merge($font-default, $font);
    $fonts: map-merge($fonts, ($f: $font)) !global;
  }

  body, body * { @include font($body-font); }

  //
  // LOOP: FONTS
  //

  @each $f, $font in $fonts {

    #{base-class($f)} {

      // base definition
      @include font($f);

      // trim-x conditions
      $trim-x: map-get-z($fonts, $f, 'trim-x');
      @if $trim-x and $trim-x != 0 {
        $is-trim-x: selector-parse('&.trim-x');
        $in-stack: insert-parents(base-class('stack'), '>');
        #{$is-trim-x}, #{$in-stack} {
          margin-right: $trim-x;
          margin-left: $trim-x;
        }
      }
    }

    //
    // LOOP: COPY-SIZES
    //

    $copy-sizes: m-var('copy-sizes' $f);
    @if $copy-sizes {
      @each $s, $size in $copy-sizes {

        //
        // MEDIA FOR: copy size, font
        //
        @include mm-for(copy-sizes $f $s) {
          $px-base: strip(m-var('font-size'));
          $px-size: nth($size, 1);
          $px-line: nth($size, 2);
          $line: $px-line / $px-size;

          #{mod-class($f, $s)} {
            font-size: $px-size / $px-base * 1rem;
            line-height: $line;

            //
            // TRIM: top/bottom wrt .stack
            //
            $trim: selector-parse('&.trim');
            #{$trim}, #{insert-parents(base-class('stack'), '>')} {
              margin-top: trim-top-margin(0, $line, $f);
              margin-bottom: trim-bottom-margin(0, $line, $f);
            }
          }
        }

        //
        // LOOP: INNER-Y
        //

        $inner-y: m-var('inner-y');
        $y-map: if(type-of($inner-y) == 'map', $inner-y, (m: $inner-y));
        @each $y, $y-val in $y-map {
          $y-path: if(type-of($inner-y) == 'map', 'inner-y' $y, 'inner-y');

          //
          // MEDIA-FOR: inner-y || copy-size, font
          //
          @include mm-for($y-path, copy-sizes $f $s) {

            $px-base: strip(m-var('font-size'));
            $px-size: nth($size, 1);
            $px-line: nth($size, 2);
            $line: $px-line / $px-size;

            // stack--[mult] mod-class
            #{mod-class('stack', $y, 'm')} {

              // direct-child font--[size] mod-class
              & > *:not(.unstack) + #{mod-class($f, $s)} {

                // trimmed margin-top value
                margin-top: trim-top-margin($y, $line, $f);
              }
            }

          }
        }

      }
    }
  }


  $setups: map-merge($setups, ('font': false)) !global;
}
