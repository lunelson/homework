//
// init helpers
//


@function __normalize-medium($medium, $root-font-size: null) {

  // get reference font size
  $root-font-size: $root-font-size or map-get($root, 'font-size');
  $curr-font-size: map-get($medium, 'font-size') or $root-font-size;

  // normalize size to px
  @if unit($curr-font-size) != 'px' { $curr-font-size: strip($curr-font-size) * $root-font-size; }

  // collect these along with unitless scale
  $normalized: (
    'font-size': $curr-font-size,
    'root-scale': strip($curr-font-size / 16px)
  );

  // normalize all other number values to rem
  @each $key, $value in map-remove($medium, 'font-size') {
    @if if(is-number($value), unit($value) == 'px', false) {
      $normalized: map-merge($normalized, ($key: $value / $curr-font-size * 1rem));
    }
  }
  // merge normalized values back to medium
  @return map-merge($medium, $normalized);
}


@function __populate-medium($medium) {
  $breakpoint: map-get($medium, 'breakpoint');
  $outer-width: assert($breakpoint / map-get($medium, 'root-scale'), rem);
  $outer-x: map-get($medium, 'outer-right') + map-get($medium, 'outer-left');
  // @return map-merge($medium, ( 'outer-width': $outer-width, 'inner-width': $outer-width - $outer-x ));
  @return map-merge($medium, ( 'outer-width': $outer-width ));
}


@function __query-string($min: null, $max: null) {
  $min: if(map-has-key($media, $min), __get($media, $min, 'breakpoint'), $min);
  $max: if(map-has-key($media, $max), __get($media, $max, 'breakpoint'), $max);
  @return 'screen'
    + if($min, ' and (min-width: #{$min})', '')
    + if($max, ' and (max-width: #{$max - 0.001})', '');
}

//
// mm helpers
//


@function __mm-filter-orig($media-keys, $props...) {
  @if length($props) < 1 { @return (); }
  $result: ();
  @each $m in $media-keys {
    $test: false;
    @each $prop in $props { $test: if(get(m-orig($m), $prop...), true, $test); }
    $result: if($test, append($result, $m), $result);
  }
  @return if(length($result) > 0, $result, ());
}

@function __mm-pairs($list:()) {
  @if length($list) == 0 { @return $list; }
  $result: ();
  @for $n from 1 through length($list) - 1 {
    $result: append($result, (nth($list, $n) nth($list, $n + 1)), 'comma');
  }
  @return $result;
}

@function __mm-slice($lo: null, $hi: null) {
  $keys: join(join(null, map-keys($media)), null);
  $index1: if($lo, index($keys, $lo), 1);
  $index2: if($hi, index($keys, $hi), length($keys));
  @return if($index1 and $index2, __slice($keys, $index1, $index2), ());
}

// @function __mm-filter($props...) {
//   @if length($props) < 1 { @return (); }
//   $result: ();
//   @each $m, $medium-orig in $media-orig {
//     $test: false;
//     @each $prop in $props { $test: if(get($medium-orig, $prop...), true, $test); }
//     $result: if($test, append($result, $m), $result);
//   }
//   @return if(length($result) > 0, join(join(null, $result), null), ());
// }

@function __mm-where($props...) {
  $result: __mm-filter-orig(map-keys($media), $props...);
  @return if(length($result) > 0, join(join(null, $result), null), ());
}


@function mm($lo: null, $hi: null, $props...) {
  $m-list: __mm-slice($lo, $hi);
  @if length($props) > 0 and length($m-list) > 2 {
    $len: length($m-list);
    $m-list: join(
      join(
        __slice($m-list, 1, 1),
        __mm-filter-orig(__slice($m-list, 2, $len - 1), $props...)
      ),
      __slice($m-list, $len, $len)
    );
  }
  @return __mm-pairs($m-list);
}
