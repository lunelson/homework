//
// GRID
//
// trying to make it work in both directions https://jsfiddle.net/ys7w1786/

//
// NEW FUNCTIONS
//
// grid
// - cell-span(n,d)
// - cell-push(l,r,d)

// cell
// - function cell-column(n, d)
// - mixin intra-span(n, d)
//   ...subtract columns from 100%
//   ...intra-span(4, 6) -> width: 100% - cell-column(2, 6)
// - mixin intra-push(l, r, d)
//   ...push the width of 1 column; refernce: 100% + inner-x()
//   ...intra-push(1, 0, 6) ->

//
// grid inner widths and spans
//

@function column-width($n, $d) {
  @return multiply(add(100%, inner-x()), $n/$d);
}

@function intra-push($n, $d) {
  @return multiply(add(100%, inner-x()), $n/$d);
}

@function intra-span($n, $d) {
  @return subtract(column-width($n, $d), inner-x());
}

@mixin intra-span($n, $d) {
  width: subtract(100%, column-width($d - $n, $d));
}

@mixin intra-push($l, $r, $d) {
  @if $l { margin-left: column-width($l, $d); }
  @if $r { margin-right: column-width($r, $d); }
}

#{base-class('grid')} {
  display: flex;
  flex-wrap: wrap;
  & > * { @include cell(null); }
}

#{base-class('cell')} {
  @include cell(null);
}

@include mm-for('inner-x') {
  $inner-x: inner-x();
  #{base-class('grid')} {
    margin-left: $inner-x / -2;
    margin-right: $inner-x / -2;
    width: add(100%, $inner-x);
    & > * {
      padding-left: $inner-x / 2;
      padding-right: $inner-x / 2;
    }
  }
  #{base-class('cell')} {
    padding-left: $inner-x / 2;
    padding-right: $inner-x / 2;
  }
}

@include mm-for('inner-y') {
  $y-mults: medium-var('inner-y-mults');

  @each $y, $y-mult in map-merge((base: 1), $y-mults) {
    $inner-y: $y-mult * inner-y();
    #{mod-class('grid', $y, (base, m, md med))} {
      margin-top: $inner-y / -2;
      margin-bottom: $inner-y / -2;
      & > * {
        padding-top: $inner-y / 2;
        padding-bottom: $inner-y / 2;
      }
    }
    #{mod-class('cell', $y, (base, m, md med))} {
      padding-top: $inner-y / 2;
      padding-bottom: $inner-y / 2;
    }
  }
}
