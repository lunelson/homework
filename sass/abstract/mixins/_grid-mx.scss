//
// helpers
//

@mixin cell-padding($mult: $curr-inner-x) {
  $inner-x: inner-x($mult);
  @if $inner-x {
    padding-right: $inner-x/2;
    padding-left: $inner-x/2;
  }
}

@mixin grid-margin($mult: $curr-inner-x) {
  $inner-x: inner-x($mult);
  @if $inner-x {
    width: add(100%, $inner-x);
    margin-right: $inner-x/-2;
    margin-left: $inner-x/-2;
  }
}

//
// float-grid
//

@mixin float-cell($mult: $curr-inner-x) {
  display: block;
  float: left;
  min-height: 1px; // http://css-tricks.com/make-sure-columns-dont-collapse-horizontally/
  background-clip: content-box;
  @include cell-padding($mult);
}

@mixin float-grid($mult: $curr-inner-x, $cell: '*') {

  $prev-inner-x: $curr-inner-x;
  $curr-inner-x: $mult !global;

  display: block;
  position: relative; // for 'out' positioned cells which are absolute
  @include grid-margin($mult);
  @if $cell { & > #{$cell} { @include float-cell($mult); } }

  @content;
  $curr-inner-x: $prev-inner-x !global;
}

//
// grid [flex]
//

@mixin cell($mult: $curr-inner-x) {
  flex: 1 1 auto;
  width: 0%;
  min-width: 0%; // https://css-tricks.com/flexbox-truncated-text/
  background-clip: content-box;
  overflow-wrap: break-word;
  @include cell-padding($mult);
}

@mixin grid($mult: $curr-inner-x, $cell: '*') {

  $prev-inner-x: $curr-inner-x;
  $curr-inner-x: $mult !global;

  display: flex;
  flex-wrap: wrap;
  position: relative; // for 'out' positioned cells which are absolute
  @include grid-margin($mult);
  @if $cell { & > #{$cell} { @include cell($mult); } }

  @content;
  $curr-inner-x: $prev-inner-x !global;
}

//
// degrid
//

@mixin degrid($mult: $curr-inner-x, $cell: '*', $span: 1, $left: 0){
  $inner-x: inner-x($mult);
  $grid-margin: divide($inner-x, -2);
  $span-width: add(100%, $inner-x);
  $cols: _nth($span, 2) or medium-var('grid-columns') or 4;
  $right: $cols - $left - $span;
  width: multiply($span-width, $cols);
  margin-left: subtract($grid-margin, if($left == 0, 0, multiply($span-width, $left)));
  margin-right: subtract($grid-margin, if($right == 0, 0, multiply($span-width, $right)));
}

//
// regrid
//

@mixin regrid($mult: $curr-inner-x, $cell: '*', $span: 1, $left: 0){
  @include degrid($mult, $cell, $span, $left);
  @include grid(null, null);
  @if $cell { & > #{$cell} { @include cell($mult); } }
}

@mixin float-regrid($mult: $curr-inner-x, $cell: '*', $span: 1, $left: 0){
  @include float-grid(null, null);
  @include degrid($mult, $cell, $span, $left);
  @if $cell { & > #{$cell} { @include float-cell($mult); } }
}

//
// ungrid
//

@mixin ungrid($mult: $curr-inner-x, $span: 1, $left: 0){
  @include degrid($mult, null, $span, $left);
  @include grid(null, null);
  @include cell-padding($mult);
}

@mixin float-ungrid($mult: $curr-inner-x, $span: 1, $left: 0){
  @include degrid($mult, null, $span, $left);
  @include float-grid(null, null);
  @include cell-padding($mult);
}

//
// cell-mixins
//

@mixin cell-push($left: null, $right: null, $d: null) {
  $d: $d or medium-var('grid-columns') or 4;
  @if $left == 'out' or $right == 'out' {
    position: absolute;
    top: auto;
    #{if($left=='out', 'right', 'left')}: 100%;
  } @else {
    @if $left { margin-left: nth($left, 1) / (_nth($left, 2) or $d) * 100%; }
    @if $right { margin-right: nth($right, 1) / (_nth($right, 2) or $d) * 100%; }
  }
}

// // span, with optional 'cell-push'
// @mixin cell-span($span: null, $left: null, $right: null) {
//   $span: join((), $span);
//   $n: nth($span, 1) or medium-var('copy-columns') or 4;
//   $d: _nth($span, 2) or medium-var('grid-columns') or 4;
//   width: $n / $d * 100%;
//   flex-grow: 0;
//   @if $left or $right { @include cell-push($left, $right, $d); }
// }

// span, with optional 'cell-push'
@mixin cell-span($span: null, $cols: null) {
  $span: $span or medium-var('copy-columns') or 8;
  $cols: $cols or medium-var('grid-columns') or 8;
  width: percentage(($span/$cols));
  flex-grow: 0;
}

@mixin cell-push($left: null, $right: null, $cols: null) {
  $cols: $cols or medium-var('grid-columns') or 8;
  @if $left { margin-left: percentage($left/$cols); }
  @if $right { margin-right: percentage($right/$cols); }
  // @if $left == 'out' or $right == 'out' {
  //   position: absolute;
  //   top: auto;
  //   #{if($left=='out', 'right', 'left')}: 100%;
  // } @else {
  // }
}


// cycle; for floats
@mixin cell-cycle($d: null) {
  $d: $d or medium-var('grid-columns') or 4;
  &:nth-child(#{$d}n+#{$d+1}) {
    clear: left;
  }
}
