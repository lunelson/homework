// inner-x($mult)
// inner-y($mult)
// outer-top
// outer-right
// outer-bottom
// outer-left
// size
// line
// auto-line


// @function __rem($values, $m: $curr-m) {
//   @if not $values or length($values) == 0 { @return null; }
//   @if not (is-number($values) or is-list($values)) { @return error("$values argument must be number or list of numbers"); }
//   $result: (); $size: medium-var('font-size', $m) or 16px;
//   @each $value in $values {
//     @if not is-number($value) { @return error("a $value in $values was a non-number"); }
//     @if unit($value) == 'px' { $result: append($result, $value / $size * 1rem, 'space'); }
//     @else { $result: append($result, assert($value, rem), 'space'); }
//   }
//   @return if(length($result) > 1, $result, nth($result, 1));
// }


// @function __px($values, $m: $curr-m) {
//   @if not $values or length($values) == 0 { @return null; }
//   @if not (is-number($values) or is-list($values)) { @return error("$values argument must be number or list of numbers"); }
//   $result: (); $size: medium-var('font-size', $m) or 16px;
//   @each $value in $values {
//     @if not is-number($value) { @return error("a $value in $values was a non-number"); }
//     @if unit($value) == 'px' { $result: append($result, $value, 'space'); }
//     @else { $result: append($result, strip($value) * $size, 'space'); }
//   }
//   @return if(length($result) > 1, $result, nth($result, 1));
// }


// @function __mult($mult, $prop-name, $m: $curr-m) {
//   @if is-unitless($mult) { @return $mult; }
//   @else if is-number($mult) { @return __rem($mult, $m); }
//   @else if is-string($mult) and is-string($prop-name) {
//     $mults: medium-var('#{$prop-name}-mults', $m);
//     @if not $mults { @return error("no mults-map named '#{$prop-name}-mults'"); }
//     $value: map-get($mults, $mult);
//     @if not $value { @return error("no mult named '#{$mult}' in '#{$prop-name}-mults'"); }
//     @return $value;
//   }
//   @return error("either $mult or $prop-name argument is not a string");
// }


//
// custom m-var getters
//

@function inner-x($mult: $curr-inner-x, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'inner-x', $m);
  @return if(is-unitless($mult), $mult * m-var('inner-x', $m), $mult);
}


@function inner-y($mult: $curr-inner-y, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'inner-y', $m);
  @return if(is-unitless($mult), $mult * m-var('inner-y', $m), $mult);
}


@function outer-top($mult: $curr-outer-y, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'outer-y', $m);
  @return if(is-unitless($mult), $mult * m-var('outer-top', $m), $mult);
}


@function outer-right($mult: $curr-outer-x, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'outer-x', $m);
  @return if(is-unitless($mult), $mult * m-var('outer-right', $m), $mult);
}


@function outer-bottom($mult: $curr-outer-y, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'outer-y', $m);
  @return if(is-unitless($mult), $mult * m-var('outer-bottom', $m), $mult);
}


@function outer-left($mult: $curr-outer-x, $m: $curr-m) {
  @if not $mult { @return null; }
  $mult: __mult($mult, 'outer-x', $m);
  @return if(is-unitless($mult), $mult * m-var('outer-left', $m), $mult);
}

@function m-suffix($m: $curr-m) {
  @return if($m, '__#{$m}', '');
}
