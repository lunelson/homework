//                     _
//                    | |
//  _ __ ___  ___  ___| |_
// | '__/ _ \/ __|/ _ \ __|
// | | |  __/\__ \  __/ |_
// |_|  \___||___/\___|\__|


button,
input,
label,
select,
option,
textarea {
  color: inherit;
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  font-style: inherit;
  box-sizing: border-box;
  background-color: transparent;
  transition: background-color 150ms linear;
  &:focus, &:invalid { outline: none; box-shadow: none; }
  &::placeholder { opacity: 1; }
}

input,
select,
textarea {
  appearance: none;
  display: block;
  width: 100%;
  border: none;
  border-radius: 0;
}

input[type=checkbox] { appearance: checkbox; }
input[type=radio] { appearance: radio; }

label {
  display: block;
  &.inline { display: inline; }
  & input { width: auto; } // inputs inside of labels
  &.expand { margin: -1em 0; padding: 1em 0; } // expanded labels for icon usage
}

select {
  // z-index: 2; // ???
  // -moz-appearance: window;
  // -webkit-appearance: none;
  appearance: none;
  // hide the default arrow in ie10 and ie11
  &::-ms-expand { display: none; }
}

input[type='reset'],
input[type='button'],
input[type='submit'],
button {
  display: inline-block;
  width: auto;
  max-width: 100%;
  border: none;
  border-radius: 0;
  background-color: transparent;
  cursor: pointer;
  appearance: none;
  &.unset {
    appearance: none !important;
    padding: 0;
    margin: 0;
  }
  .right { text-align: right; }
  .left { text-align: left; }
}

input[type="checkbox"] { appearance: checkbox; }
input[type="radio"] { appearance: radio; }


//           _
//          | |
//  ___  ___| |_ _   _ _ __
// / __|/ _ \ __| | | | '_ \
// \__ \  __/ |_| |_| | |_) |
// |___/\___|\__|\__,_| .__/
//                    | |
//                    |_|

//
// GLOBAL DIMENSIONS
//

$padding-y: 0.9rem;
$padding-x: 1.2rem;

form {


  // inherit fills
  svg { fill: currentColor; }

  //
  // FIELDS
  // text inputs, textareas, selects
  //

  .field {
    // display: flex;
    // justify-content: center;
    flex: 1 1 0%;
    min-width: 0%;
    position: relative;
    .field-pre, .field-post {
      position: absolute;
      width: 1.5em;
      top: 0;
      bottom: 0;
      z-index: 1;
      pointer-events: none;
      svg {
        position: absolute;
        width: 100%;
        height: 100%;
      }
    }
    .field-pre { left: $padding-x; }
    .field-post { right: $padding-x; }
  }


  input[type='text'],
  input[type='password'],
  input[type='email'],
  input[type='url'],
  input[type='tel'],
  input[type='number'],
  input[type='search'],
  input[type='date'],
  select,
  textarea {

    // text placement / padding: 1.25 is the consistent line-height for sans--s2 size
    line-height: 1.25 !important;
    padding-top: subtract($padding-y, trim-top-abs(1.25, 'sans'));
    padding-bottom: subtract($padding-y, trim-bottom-abs(1.25, 'sans'));
    padding-right: $padding-x;
    padding-left: $padding-x;

    // state colorings
    fill: currentColor;
    font-weight: normal;
    background-color: color(pumice);
    &::placeholder { text-overflow: ellipsis; }
    &, &::placeholder { color: color(thunder); opacity: 1; }
    &:hover, &:focus { background-color: mix(color(pumice), color(seashell)); }

    // DIRTY
    &.dirty {
      font-weight: bold;
      &, &:hover, &:focus { background-color: color(seashell); }
      .solid--std & {
        background-color: white;
        // &, &:hover, &:focus { background-color: white; }
      }
      // & ~ .field-post { color: color(nevada) !important; }
    }

    // DISABLED
    &[disabled] {
      pointer-events: none;
      & ~ .field-post { color: white !important; }
      &, &:hover, &:focus {
        &, &::placeholder { color: color(aluminium) !important; }
        // background-color: color(seashell) !important;
        // background-color: #ddd !important;
        background-color: mix(color(pumice), color(seashell), 50) !important;
      }
    }
  }

  textarea { resize: none; height: 8em; }
  input[type='date'] { text-transform: uppercase; }


  select, input[type='date'] {

    option {
      background-color: color(pumice);
      color: color(thunder);
    }

    // filled state
    &.defaulted, &.dirty {
      color: color(thunder);
      font-weight: bold;
      background-color: color(seashell);
    }

    &:hover, &:focus { background-color: mix(color(pumice), color(seashell)); }
  }

  //
  // TOGGLES
  // radio and checkbox inputs
  //

  input[type="checkbox"],
  input[type="radio"] {
    & + label {
      user-select: none;
      cursor: pointer;
      display: flex;
      align-items: baseline;
      .label-pre {
        position: relative;
        flex: 0 0 auto;
        width: 1em;
        height: 1em;
        margin-right: 1.25em;
        background-color: color(pumice);
        pointer-events: none;
        svg {
          display: none;
          position: absolute;
        }
      }
    }
    &:checked + label {
      .label-pre {
        position: relative;
        flex: 0 0 auto;
        background-color: color(seashell);
        pointer-events: none;
        svg { display: block; }
      }
    }
  }

  input[type="checkbox"] {
    & + label {
      .label-pre {
        width: 1.2em;
        height: 1.2em;
        top: 3px; // compensate baseline alignment
        svg {
          width: 130%;
          height: 130%;
          margin: -15%;
        }
      }
    }
  }
  input[type="radio"] {
    & + label {
      .label-pre {
        border-radius: 50%;
        width: 1.4em;
        height: 1.4em;
        margin: calc((1em - 1.4em)/2) 0;
        margin-right: calc(2.25em - 1.4em);
        top: 4px; // compensate baseline alignment
        svg {
          width: 0.8em;
          height: 0.8em;
          margin: calc((1.4em - 0.8em)/2);
        }
      }
    }
  }

  //
  // FILE inputs
  //

  input[type='file'] {
    appearance: none;
    & + label {
      font-weight: bold;
      cursor: pointer;
      display: block;
      color: white;
      padding: 0.7rem 1.4rem;
      border-radius: 0.3rem;
      // background-color: color(hwr);
      // &:hover, &:active, &:focus { background-color: color(hwr-hover); }
    }
  }

  .file {
    display: inline-flex;
    align-items: flex-end;
    .btn { flex: 0 0 auto; }
    .txt {
      flex: 1 1 auto;
      margin-left: 1rem;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
  }

}

//
// BUTTONS
// NB: use button[type='submit'] instead of input[type='submit'], etc.
//

form button[type]:not(.unset),
button.input {

  display: inline-flex;
  flex: 0 0 auto;
  width: auto;
  user-select: none;
  cursor: pointer;
  align-items: stretch;

  // the span is where the button text goes
  .button-pre, .button-post {
    position: relative;
    flex: 0 0 auto;
    width: 1.5em;
    // height: 1.5em;
    svg {
      position: absolute;
      top: 0; left: 0;
      width: 100%;
      height: 100%;
    }
    padding-right: $padding-x/2;
    padding-left: $padding-x/2;
  }

  .button-text {
    flex: 0 1 auto;
    min-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    line-height: 1 !important;
    padding-top: subtract($padding-y*1.1, trim-top-abs(1, 'sans'));
    padding-bottom: subtract($padding-y*1.1, trim-bottom-abs(1, 'sans'));
    padding-right: $padding-x/2;
    padding-left: $padding-x/2;
  }

  padding-right: $padding-x/2;
  padding-left: $padding-x/2;
  border-radius: 0.3rem;
  fill: currentColor;

  &[disabled] {
    pointer-events: none;
    & ~ .button-post { color: white !important; }
    &, &:hover, &:focus {
      color: color(aluminium) !important;
      &[class*='solid--'] { background-color: mix(color(pumice), color(seashell), 50) !important; }
      // &, &::placeholder { color: color(aluminium) !important; }
      // background-color: color(seashell) !important;
    }
  }
}
