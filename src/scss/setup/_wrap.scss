//                                 __                  _
//                                / /                 | |
// __      ___ __ __ _ _ __      / /   _ __   ___  ___| |
// \ \ /\ / / '__/ _` | '_ \    / /   | '_ \ / _ \/ _ \ |
//  \ V  V /| | | (_| | |_) |  / /    | |_) |  __/  __/ |
//   \_/\_/ |_|  \__,_| .__/  /_/     | .__/ \___|\___|_|
//                    | |             | |
//                    |_|             |_|

@mixin homework-wrap-setup($modern: true) {

  @if $modern {

    :root {
      --wrap-width: 100%;
    }

    #{base-class('wrap', false)} {
      margin-right: auto;
      margin-left: auto;
      width: 100%;
      max-width: var(--wrap-width);
    }
    .wrap-left { margin-left: 0; }
    .wrap-right { margin-right: 0; }

   $media-keys: map-keys($media);
   $last-m: last($media-keys);

   .wrap-each { --wrap-width: var(--outer-width); }

   @each $m, $medium in $media {
     @include m($m) {
       .wrap-#{$m},
       #{if($m == $last-m, '.wrap-last', '')} {
         --wrap-width: #{map-get($medium, 'outer-width')};
        }
        .wrap-each#{m-suffix()} { --wrap-width: var(--outer-width); }
      }
    }

    //  $media-length: length($media-keys);

    // // use ascending-only media queries
    // @each $m in $media-keys {
    //   @include m($m) {
    //     $fix: m-suffix($m);
    //     .wrap--grid,
    //     .wrap--inner,
    //     .wrap--inner#{$fix},
    //     #{if($m == $last-m, ".wrap--inner__last", "")}, {
    //       max-width: m-var('inner-width', $m);
    //     }
    //     .wrap--outer,
    //     .wrap--outer#{$fix},
    //     #{if($m == $last-m, ".wrap--outer__last", "")}, {
    //       max-width: m-var('outer-width', $m);
    //     }
    //   }
    // }

    // // wrap--to-x, // wrap--x-to
    // @for $i from 1 through $media-length {
    //   .wrap--#{nth($media-keys, $i)}-to {
    //     @include mm(slice($media-keys, $i)) {
    //       max-width: m-var('inner-width') or 100%;
    //     }
    //   }
    //   .wrap--to-#{nth($media-keys, $i)} {
    //     @include mm(slice($media-keys, 1, $i)) {
    //       max-width: m-var('inner-width') or 100%;
    //     }
    //   }
    // }

    // // wrap--x-to-y
    // @each $set in range-set($media-keys) {
    //   $i: nth($set,1); $j: nth($set,2);
    //   .wrap--#{nth($media-keys, $i)}-to-#{nth($media-keys, $j)} {
    //     @include mm(slice($media-keys, $i, $j)) {
    //       max-width: m-var('inner-width') or 100%;
    //     }
    //   }
    // }

  } @else {

  }
}

// @mixin setup-peel {

//   .peel {
//     margin-right: 0;
//     margin-left: 0;
//     max-width: none;
//     width: 100vw;
//   }

//   @include mm-for('outer-right', 'outer-left') {

//     $outer-right: m-var('outer-right');
//     $outer-left: m-var('outer-left');
//     $wrap-offset: subtract($outer-right, $outer-left);
//     $peel-margin: subtract(100%, 100vw);
//     $peel-margin-right: divide(subtract($peel-margin, $wrap-offset), 2);
//     $peel-margin-left: divide(add($peel-margin, $wrap-offset), 2);

//     .peel {
//       &--right { width: add(100vw, $peel-margin-left);}
//       &--left { width: add(100vw, $peel-margin-right);}
//       &, &--right { margin-right: $peel-margin-right; }
//       &, &--left { margin-left: $peel-margin-left; }
//     }

//     .peel--from-right {
//       &, &.peel--right { margin-right: - $outer-right;}
//       &, &.peel--left { margin-left: add($peel-margin, $outer-right); }
//       &.peel--right {
//         width: add(100%, $outer-right);
//         margin-left: 0;
//       }
//       &.peel--left {
//         width: subtract(100vw, $outer-right);
//         margin-right: 0;
//       }
//     }

//     .peel--from-left {
//       &, &.peel--right { margin-right: add($peel-margin, $outer-left); }
//       &, &.peel--left { margin-left: - $outer-left; }
//       &.peel--right {
//         width: subtract(100vw, $outer-left);
//         margin-left: 0;
//       }
//       &.peel--left {
//         width: add(100%, $outer-left);
//         margin-right: 0;
//       }
//     }
//   }
// }
