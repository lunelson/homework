//   __ _                     __
//  / _| |                   / /
// | |_| | _____      __    / /   ___ _ __   __ _ _ __
// |  _| |/ _ \ \ /\ / /   / /   / __| '_ \ / _` | '_ \
// | | | | (_) \ V  V /   / /    \__ \ |_) | (_| | | | |
// |_| |_|\___/ \_/\_/   /_/     |___/ .__/ \__,_|_| |_|
//                                   | |
//                                   |_|

@mixin homework-flow-setup($modern: true, $max-columns: null) {

  $max-columns: $max-columns or if(length($media) > 0, max-columns(), map-get($root, 'grid-columns'));

  @if $modern {

    :root {
      --row-gap: var(--inner-y);
      --column-gap: var(--inner-x);
      --span-d: var(--grid-columns);
      --span-n: var(--span-d);
      --span-i: var(--span-d);
    }

    #{base-class('flow')} {
      margin-top: calc(var(--row-gap) / -2);
      margin-bottom: calc(var(--row-gap) / -2);
      // height: calc(100% + var(--row-gap));
      & > * {
        padding-top: calc(var(--row-gap) / 2);
        padding-bottom: calc(var(--row-gap) / 2);
      }
    }

    // allow stack objects as direct descendant of flow !! (workaround libsass bug)
    .flow > .stack, .flow > [class^="stack-"], .flow > [class*=" stack-"], [class^="flow-"] > .stack, [class^="flow-"] > [class^="stack-"], [class^="flow-"] > [class*=" stack-"], [class*=" flow-"] > .stack, [class*=" flow-"] > [class^="stack-"], [class*=" flow-"] > [class*=" stack-"] {
      padding-top: calc(var(--row-gap) / 2);
      padding-bottom: calc(var(--row-gap) / 2);
    }

    // #{base-class('row')} {
    //   & > * {
    //     padding-top: 0.01px;
    //     padding-bottom: 0.01px;
    //   }
    // }

    // #{base-class('row')},
    #{base-class('flow')} {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      margin-left: calc(var(--column-gap) / -2);
      margin-right: calc(var(--column-gap) / -2);
      width: calc(100% + var(--column-gap));
      & > * {
        flex: 1 1 0%; // explicit basis
        min-width: 0%; // https://css-tricks.com/flexbox-truncated-text/
        min-height: 1px;
        overflow-wrap: break-word; // break long words
        background-clip: content-box;
        padding-left: calc(var(--column-gap) / 2);
        padding-right: calc(var(--column-gap) / 2);
      }
      &.null {
        margin: 0;
        & > * { padding: 0; }
      }
    }

    // @each $y, $mult in map-get($root, 'inner-y-mods') or map-get($root, 'inner-mods') or () {
    //   .flow-#{$y} { --row-gap: var(--inner-y-#{$y}); }
    // }
    // @each $x, $mult in map-get($root, 'inner-x-mods') or map-get($root, 'inner-mods') or () {
    //   .row-#{$x},
    //   .flow-x-#{$x} { --column-gap: var(--inner-x-#{$x}); }
    // }

    #{base-class('span')},
    #{base-m-class('span', false)} {
      flex: 0 0 auto;
      width: calc(100% * var(--span-n) / var(--span-d));
    }

    #{base-class('span-i')},
    #{base-m-class('span-i', false)} {
      width: calc((100% + var(--column-gap)) * var(--span-i) / var(--span-d) - var(--column-gap));
    }

    @each $m in join((null), map-keys($media)) {
      @include m($m) {

        $bp: m-suffix();

        @each $y, $mult in map-get($root, 'inner-y-mods') or map-get($root, 'inner-mods') or () {
          .flow-#{$y}#{$bp} { --row-gap: var(--inner-y-#{$y}); }
        }

        // these are required to ensure that span__[bp] also counts
        // consider using span-all and span-i-all instead;
        // ...and eliminating base-m-class classes above
        .span#{$bp} { --span-n: var(--span-d); }
        .span-i#{$bp} { --span-i: var(--span-d); }

        @for $n from 1 through $max-columns {

          // span
          .span-#{$n}#{$bp} { --span-n: #{$n}; & > * { --span-d: var(--span-n); } }

          // span-i
          .span-i-#{$n}#{$bp} { --span-i: #{$n}; & > * { --span-d: var(--span-i); } }

          // span atomics
          .ml-#{$n}#{$bp} { margin-left: calc(100% * #{$n} / var(--span-d)) !important; }
          .mr-#{$n}#{$bp} { margin-right: calc(100% * #{$n} / var(--span-d)) !important; }
          .ml-neg-#{$n}#{$bp} { margin-left: calc(-100% * #{$n} / var(--span-d)) !important; }
          .mr-neg-#{$n}#{$bp} { margin-right: calc(-100% * #{$n} / var(--span-d)) !important; }

          // span-i atomics
          .ml-i-#{$n}#{$bp} { margin-left: calc((100% + var(--column-gap)) * #{$n} / var(--span-d)) !important; }
          .mr-i-#{$n}#{$bp} { margin-right: calc((100% + var(--column-gap)) * #{$n} / var(--span-d)) !important; }
          .ml-i-neg-#{$n}#{$bp} { margin-left: calc((100% + var(--column-gap)) * -1 * #{$n} / var(--span-d)) !important; }
          .mr-i-neg-#{$n}#{$bp} { margin-right: calc((100% + var(--column-gap)) * -1 * #{$n} / var(--span-d)) !important; }

        }
      }
    }
  }
}

//            _      _
//           (_)    (_)
//  _ __ ___  ___  ___ _ __  ___
// | '_ ` _ \| \ \/ / | '_ \/ __|
// | | | | | | |>  <| | | | \__ \
// |_| |_| |_|_/_/\_\_|_| |_|___/

@function span-width($n: 1) { @return calc(100% * #{$n} / var(--span-d)); }
@function span-i-width($n: 1) { @return calc((100% + var(--column-gap)) * #{$n} / var(--span-d) - var(--column-gap)); }
@function push-width($p: 1) { @return calc(100% * #{$p} / var(--span-d)); }
@function push-i-width($p: 1) { @return calc((100% + var(--column-gap)) * #{$p} / var(--span-d)); }

@mixin span($n: null, $l: null, $r: null) {
  @if $n {
    width: calc(100% * #{$n} / var(--span-d));
    & > * { --span-d: #{$n}; }
  }
  @if $l { margin-left: calc(100% * #{$l} / var(--span-d)); }
  @if $r { margin-right: calc(100% * #{$r} / var(--span-d)); }
}

@mixin spans($spans) {
  @each $m, $span in $spans {
    @if $m == 'root' {
      @include span($span...);
    }
    @include m($m) {
      @include span($span...);
    }
  }
}

@mixin span-i($n: null, $l: null, $r: null) {
  @if $n {
    width: calc((100% + var(--column-gap)) * #{$n} / var(--span-d) - var(--column-gap));
    & > * { --span-d: #{$n}; }
  }
  @if $l { margin-left: calc((100% + var(--column-gap)) * #{$l} / var(--span-d)); }
  @if $r { margin-right: calc((100% + var(--column-gap)) * #{$r} / var(--span-d)); }
}

@mixin spans-i($spans) {
  @each $m, $span in $spans {
    @include m($m) {
      @include span-i($span...);
    }
  }
}

// @mixin __span($d, $w: $d, $l: null, $r: null) {
//   width: calc(100% * #{$w} / #{$d});
//   @if $r { margin-right: calc(100% * #{$r} / #{$d});}
//   @if $l { margin-left: calc(100% * #{$l} / #{$d});}
// }

// @mixin m-spans($m-spans) {
//   @each $m, $span in $m-spans {
//     @if $m == 'base' {
//       $span: map-merge((d: m-var('grid-columns')), $span);
//       @include __span($span...);
//     } @else {
//       @include m($m) {
//         $span: map-merge((d: m-var('grid-columns')), $span);
//         @include __span($span...);
//       }
//     }
//   }
// }
