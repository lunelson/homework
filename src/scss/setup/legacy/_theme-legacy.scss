@mixin homework-legacy-theme-setup {

  // ADDITIONAL COLORS
      .bg-transparent { background-color: transparent; }
      .border-transparent { border-color: transparent; }

      // // ADDITIONAL HOVER INTERACTIONS
      // .hover-group:hover .group-hover-visible { visibility: visible !important; }
      // .hover-group:hover .group-hover-invisible { visibility: hidden !important; }

      // TRANSITIONS for THEMED ELEMENTS
      a,
      a .link-inner,
      button,
      [role="button"],
      #{base-class('hover')},
      #{base-class('group-hover')} { transition: $transition-base; }

      $theme-props: (
        text: 'color',
        bg: 'background-color',
        border: 'border-color',
      );

      // THEME COLOR GENERATION -- INDIRECT
      @each $color, $value in $theme-colors {
        $dark-value: if($color == 'tud', map-get($theme-colors, 'tud-dark'), $value);

        .theme-#{$color} {

          // CONTENT STACKS
          #{base-class('content-stack')} {
            a {
              &::before { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='#{$value}' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cline x1='5' y1='12' x2='19' y2='12'%3E%3C/line%3E%3Cpolyline points='12 5 19 12 12 19'%3E%3C/polyline%3E%3C/svg%3E"); }
              @include hover-focus {
                &::before { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='#{darken($value, 10%)}' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cline x1='5' y1='12' x2='19' y2='12'%3E%3C/line%3E%3Cpolyline points='12 5 19 12 12 19'%3E%3C/polyline%3E%3C/svg%3E"); }
                color: darken($value, 10%);
              }
            }

            li::before { color: $value; }
            blockquote::before {
              background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 41 38'%3E%3Cpath fill='#{$dark-value}' fill-rule='evenodd' d='M19.98492 11.78223c0 4.37046-1.0926 8.9527-3.27784 13.74682-2.18523 4.79414-5.12856 8.75202-8.83008 11.87378l-7.42529-4.9502c2.09604-3.21095 3.6792-6.4776 4.74951-9.80004C6.27154 19.33014 6.8067 15.77362 6.8067 11.9829V.34326h13.17823v11.43897zm20.53662 0c0 4.37046-1.0926 8.9527-3.27784 13.74682-2.18523 4.79414-5.12856 8.75202-8.83007 11.87378l-7.4253-4.9502c2.09604-3.21095 3.6792-6.4776 4.74951-9.80004 1.07032-3.32245 1.60547-6.87897 1.60547-10.66968V.34326h13.17823v11.43897z'/%3E%3C/svg%3E");
            }
          }

          // LINKS
          .link {
            &:not(.link-outer), & .link-inner {
              color: $value;
            }
            @include hover-focus {
              &:not(.link-outer), & .link-inner {
                color: darken($value, 10%);
              }
            }
          }

          // THEME TEXT (FOREGROUND)
          .text-key {
            color: $value;
            // NB: no link style needed here, since link follows theme style anyway
          }

          // THEME TEXT-YIQ
          .text-yiq-key {
            color: color-yiq($value);
            .link {
              &:not(.link-outer), & .link-inner {
                color: color-yiq($value);
              }
              @include hover-focus {
                &:not(.link-outer), & .link-inner {
                  color: color-yiq($value);
                }
              }
            }
            @at-root #{selector-unify(&, '.link')} {
              &:not(.link-outer), & .link-inner {
                color: color-yiq($value);
              }
              @include hover-focus {
                &:not(.link-outer), & .link-inner {
                  color: color-yiq($value);
                }
              }
            }
          }

          // THEME BORDER
          .border-key { border-color: $value; }

          // THEME SCORE
          .score-key::after { border-color: $value; }

          // THEME BACKGROUND
          .bg-key {
            background-color: $value;
            @at-root #{selector-unify(&, 'a')}, #{selector-unify(&, 'button')} {
              @include hover-focus {
                background-color: darken($value, 10%);
              }
            }
          }

          // THEME BUTTONS
          .btn-key {
            @include button-variant($value, $value);
            &.disabled, &:disabled {
              @include button-variant($btn-link-disabled-color, $btn-link-disabled-color)
            }
          }
          .btn-outline-key {
            @include button-outline-variant($value);
            &.disabled, &:disabled {
              @include button-outline-variant($btn-link-disabled-color)
            }
          }
          .btn-link {
            color: $value;
            @include hover-focus {
              color: darken($value, 10%);
            }
          }

          // THEME HOVER forcing text, bg and border classes
          @each $p, $prop in $theme-props {
            .hover-#{$p}-key:hover,
            .hover-group:hover .group-hover-#{$p}-key {
              #{$prop}: $value !important;
            }
          }
        }
      }

      // THEME COLORS AND GRAYS GENERATION -- direct
      @each $color, $value in map-merge($theme-colors, $grays) {

        // TEXT (FOREGROUND)
        .text-#{$color} {
          color: $value !important;
          .link {
            &:not(.link-outer), & .link-inner {
              color: $value;
            }
            @include hover-focus {
              &:not(.link-outer), & .link-inner {
                color: darken($value, 10%);
              }
            }
          }
        }

        // TEXT-YIQ
        .text-yiq-#{$color} {
          color: color-yiq($value) !important;
          .link {
            &:not(.link-outer), & .link-inner {
              color: color-yiq($value);
            }
            @include hover-focus {
              &:not(.link-outer), & .link-inner {
                color: color-yiq($value);
              }
            }
          }
          @at-root #{selector-unify(&, '.link')} {
            &:not(.link-outer), & .link-inner {
              color: color-yiq($value);
            }
            @include hover-focus {
              &:not(.link-outer), & .link-inner {
                color: color-yiq($value);
              }
            }
          }
        }

        // BORDER
        .border-#{$color} { border-color: $value !important; }

        // SCORE
        .score-#{$color}::after { border-color: $value !important; }

        // BACKGROUND
        .bg-#{$color} {
          background-color: $value !important;
          @at-root #{selector-unify(&, 'a')}, #{selector-unify(&, 'button')} {
            @include hover-focus {
              background-color: darken($value, 10%) !important;
            }
          }
        }

        // BUTTONS
        .btn-#{$color} {
          @include button-variant($value, $value);
          &.disabled, &:disabled {
            @include button-variant($btn-link-disabled-color, $btn-link-disabled-color)
          }
          &.btn-link {
            color: $value;
            @include hover-focus {
              color: darken($value, 10%);
            }
          }
        }
        .btn-outline-#{$color} {
          @include button-outline-variant($value);
          &.disabled, &:disabled {
            @include button-outline-variant($btn-link-disabled-color)
          }
        }

        // HOVER forcing bg and border classes only, for #grays
        @each $p, $prop in $theme-props {
          .hover-#{$p}-#{$color}:hover,
          .hover-group:hover .group-hover-#{$p}-#{$color} {
            #{$prop}: $value !important;
          }
        }
      }
}
