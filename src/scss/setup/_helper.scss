//  _          _
// | |        | |
// | |__   ___| |_ __   ___ _ __
// | '_ \ / _ \ | '_ \ / _ \ '__|
// | | | |  __/ | |_) |  __/ |
// |_| |_|\___|_| .__/ \___|_|
//              | |
//              |_|

@mixin homework-helper-setup {

  // bold, italic
  .strong, .bold { font-weight: bold; }
  .em, .italic { font-style: italic; }

  // clearfix
  .cf, .clearfix { @include clearfix; }

  // disable pointer on scrolling
  .is-scrolling,
  .is-scrolling * {
    pointer-events: none !important;
  }

  // hold for absolutes
  #{base-class('hold')} { position: relative; }

  // stop margin collapse propagation
  #{base-class('stop')} { padding: 0.1px; }

  // hide overflow
  #{base-class('clip')} { @include clip; }
  .clip-circle { border-radius: 50%; }

  // hide visually-only
  .vhide { @include vhide; }

  // hide/show, without removing from DOM
  @each $m in join(null, map-keys($media)) {
    @include m($m) {
      $fix: m-suffix();

      .hide#{$fix} { @include hide; }
      .show#{$fix} { @include show; }
    }
  }

  ///
  /// aspect ratio containers with flexbox
  ///

  #{base-class('aspect', false)} {
    display: flex;
    flex-direction: row;
    >* { flex: 0 0 auto; }
    &:before {
      content: '';
      display: block;
      width: 100%;
      height: 0;
    }
  }

  $aspects: (
    1: 1 2,
    2: 1 2 3 4,
    3: 2 3 4 5,
    4: 2 3 4 5 6,
    5: 3 4 5 8,
    16: 9
  );

  $aspect-classes: ();
  @each $n, $d-list in $aspects {
    @each $d in $d-list {
      $key: $n/$d;
      $val: map-get($aspect-classes, $key) or ();
      $val: append($val, '.aspect-#{$n}-#{$d}', 'comma');
      $aspect-classes: map-merge($aspect-classes, ($key: $val));
    }
  }

  @each $aspect, $class in $aspect-classes {
    #{$class} {
      &:before {
        padding-bottom: 1/$aspect * 100%;
      }
    }
  }

  // lazysizes stuff
  [data-bg-size='cover'] { background-size: cover; }
  [data-bg-size='contain'] { background-size: contain; }

}
