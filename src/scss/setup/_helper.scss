//  _          _
// | |        | |
// | |__   ___| |_ __   ___ _ __
// | '_ \ / _ \ | '_ \ / _ \ '__|
// | | | |  __/ | |_) |  __/ |
// |_| |_|\___|_| .__/ \___|_|
//              | |
//              |_|

@mixin homework-helper-setup($modern: true) {

  // bold, italic
  .strong, .bold { font-weight: bold; }
  .em, .italic { font-style: italic; }

  // clearfix
  .cf, .clearfix { @include clearfix; }

  // disable pointer on scrolling
  .is-scrolling,
  .is-scrolling * {
    pointer-events: none !important;
  }

  // hold for absolutes
  #{base-class('hold')} { position: relative; }

  // stop margin collapse propagation
  .stop, .trim { padding: 0.1px; }

  // hide overflow
  #{base-class('clip')} { @include clip; }
  .clip-circle { border-radius: 50%; }

  // hide visually-only
  .vhide { @include vhide; }

  // hide/show, without removing from DOM
  @each $m in join(null, map-keys($media)) {
    @include m($m) {
      $fix: m-suffix();

      .hide#{$fix} { @include hide; }
      .show#{$fix} { @include show; }
    }
  }

  //  align / vertical-align
  .a-left { text-align: left }
  .a-center { text-align: center }
  .a-right { text-align: right }
  .a-top { vertical-align: top }
  .a-middle { vertical-align: middle }
  .a-baseline { vertical-align: baseline }
  .a-bottom { vertical-align: bottom }

  // align-items
  .ai-stretch { align-items: stretch; }
  .ai-center { align-items: center; }
  .ai-baseline { align-items: baseline; }
  .ai-start { align-items: flex-start; }
  .ai-end { align-items: flex-end; }

  // align-self
  .as-stretch { align-self: stretch; }
  .as-center { align-self: center; }
  .as-baseline { align-self: baseline; }
  .as-start { align-self: flex-start; }
  .as-end { align-self: flex-end; }

  // align-content
  .ac-stretch { align-content: stretch; }
  .ac-center { align-content: center; }
  .ac-baseline { align-content: baseline; }
  .ac-start { align-content: flex-start; }
  .ac-end { align-content: flex-end; }
  .ac-between { align-content: space-between; }
  .ac-around { align-content: space-around; }

  // justify-content
  .jc-stretch { justify-content: stretch; }
  .jc-center { justify-content: center; }
  .jc-start { justify-content: flex-start; }
  .jc-end { justify-content: flex-end; }
  .jc-between { justify-content: space-between; }
  .jc-around { justify-content: space-around; }
  .jc-evenly { justify-content: space-evenly; }

  // flex
  .fx-1-0 { flex: 1 0 auto; }
  .fx-0-1 { flex: 0 1 auto; }
  .fx-1-1 { flex: 1 1 auto; }
  .fx-0-0 { flex: 0 0 auto; }

  // position

  .static { position: static; }
  .rel { position: relative; }

  #{base-class('fix')} { position: fixed; }
  .fix-tl { top: 0; left: 0; }
  .fix-tr { top: 0; right: 0; }
  .fix-bl { bottom: 0; left: 0; }
  .fix-br { bottom: 0; right: 0; }
  .fix-trbl { top: 0; right: 0; bottom: 0; left: 0; }

  #{base-class('abs')} { position: absolute; }
  .abs-tl { top: 0; left: 0; }
  .abs-tr { top: 0; right: 0; }
  .abs-bl { bottom: 0; left: 0; }
  .abs-br { bottom: 0; right: 0; }
  .abs-trbl { top: 0; right: 0; bottom: 0; left: 0; }
  .abs-cover { top: 0; left: 0; width: 100%; height: 100%; object-fit: cover; }
  .abs-contain { top: 0; left: 0; width: 100%; height: 100%; object-fit: contain; }

  .fit-cover { object-fit: cover; }
  .fit-contain { object-fit: contain; }

  ///
  /// aspect ratio containers with flexbox
  ///

  #{base-class('aspect')} {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    >* { flex: 0 0 auto; }
    &:before {
      content: '';
      display: block;
      width: 0.01px;
      height: 0;
      padding-bottom: calc(1 / var(--aspect, 1) * 100%);
    }
  }

  $aspects: (
    1: 1 2,
    2: 1 2 3 4,
    3: 2 3 4 5,
    4: 2 3 4 5 6,
    5: 3 4 5 8,
    16: 9
  );

  $aspect-classes: ();
  @each $n, $d-list in $aspects {
    @each $d in $d-list {
      $key: $n/$d;
      $val: map-get($aspect-classes, $key) or ();
      $val: append($val, '.aspect-#{$n}-#{$d}', 'comma');
      $aspect-classes: map-merge($aspect-classes, ($key: $val));
    }
  }

  @each $aspect, $class in $aspect-classes {
    #{$class} { --aspect: #{$aspect}; }
  }

  // lazysizes stuff
  [data-bg-size='cover'] { background-size: cover; }
  [data-bg-size='contain'] { background-size: contain; }

}
