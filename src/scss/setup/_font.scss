//   __            _
//  / _|          | |
// | |_ ___  _ __ | |_
// |  _/ _ \| '_ \| __|
// | || (_) | | | | |_
// |_| \___/|_| |_|\__|

// TODO
// - handle non-px values in font-mods

$fonts: () !default;

$font-default: (
  family: (arial, sans-serif),
  spacing-max: 0,
  spacing-end: 50,
  trim-x: 0,
  trim-capline: 0,
  trim-baseline: 0,
);

$fonts-defaults: (
  sans: ( family: (arial, sans-serif) ),
  serif: ( family: (georgia, serif) ),
  mono: ( family: (monaco, consolas, monospace) )
);

@mixin homework-font-setup($modern: true) {

  // merge defaults
  $fonts: if(length($fonts) > 0, $fonts, $fonts-defaults) !global;
  @each $f, $font in $fonts {
    $font: map-merge($font-default, $font);
    $fonts: map-merge($fonts, ($f: $font)) !global;
  }

  @if $modern {

    :root {
      @each $f, $font in $fonts {
        --font-family-#{$f}: #{map-get($font, 'family')};
        --letter-spacing-#{$f}: calc(#{map-get($font, 'spacing-max')} * 1px - #{map-get($font, 'spacing-max')} / #{map-get($font, 'spacing-end')} * 1em);
        --trim-top-#{$f}: calc((var(--line-height) - 1) * 1em / 2 + #{map-get($font, 'trim-capline') * 1em});
        --trim-bottom-#{$f}: calc((var(--line-height) - 1) * 1em / 2 + #{map-get($font, 'trim-baseline') * 1em});
        --trim-x-#{$f}: #{map-get($font, 'trim-x')};
      }
    }


    body {
      $ff: nth(map-keys($fonts), 1);
      font-family: var(--font-family-#{$ff});
      --letter-spacing: var(--letter-spacing-#{$ff});
      --trim-top: var(--trim-top-#{$ff});
      --trim-bottom: var(--trim-bottom-#{$ff});
      --trim-x: var(--trim-x-#{$ff});
      @each $s, $def in map-get-z($root, 'font-mods', $ff) or () {
        --font-size-#{$s}: var(--font-size-#{$ff}-#{$s});
        --line-height-#{$s}: var(--line-height-#{$ff}-#{$s});
      }
    }

    #{base-class('font', false)} {
      font-family: var(--font-family);
      font-size: var(--font-size);
      line-height: var(--line-height);
      letter-spacing: var(--letter-spacing);

      @at-root #{selector-insert('.trim', '>')},
      #{selector-insert(base-class('stack'), '>')} {
        // margin-right: var(--trim-x);
        // margin-left: var(--trim-x);
        // margin-top: calc(0px - var(--trim-top));
        // margin-bottom: calc(0px - var(--trim-bottom));
        margin: calc(0px - var(--trim-top)) var(--trim-x) calc(0px - var(--trim-bottom);
      }
      @at-root #{selector-insert(#{base-class('stack')}, '> * +')} {
        margin-top: calc(var(--stack-gap) - var(--trim-top));
      }
      @at-root #{selector-insert(selector-insert(#{base-class('stack')}, '>', #{base-class('font', false)}), '+')} {
        margin-top: calc(var(--stack-gap) - var(--trim-top));
      }
    }

    @each $f, $font in $fonts {
      // :root {
      //   --font-family-#{$f}: #{map-get($font, 'family')};
      //   --letter-spacing-#{$f}: calc(#{map-get($font, 'spacing-max')} * 1px - #{map-get($font, 'spacing-max')} / #{map-get($font, 'spacing-end')} * 1em);
      //   --trim-top-#{$f}: calc((var(--line-height) - 1) * 1em / 2 + #{map-get($font, 'trim-capline') * 1em});
      //   --trim-bottom-#{$f}: calc((var(--line-height) - 1) * 1em / 2 + #{map-get($font, 'trim-baseline') * 1em});
      //   --trim-x-#{$f}: #{map-get($font, 'trim-x')};
      // }
      #{base-class('font-#{$f}')} {
        --font-family: var(--font-family-#{$f});
        --letter-spacing: var(--letter-spacing-#{$f});
        --trim-top: var(--trim-top-#{$f});
        --trim-bottom: var(--trim-bottom-#{$f});
        --trim-x: var(--trim-x-#{$f});
        @each $s, $def in map-get-z($root, 'font-mods', $f) or () {
          --font-size-#{$s}: var(--font-size-#{$f}-#{$s});
          --line-height-#{$s}: var(--line-height-#{$f}-#{$s});
        }
      }
    }

    @each $f, $mod in map-get($root, 'font-mods') or () {
      @each $s in map-keys($mod) {
        .font-#{$s} {
          --font-size: var(--font-size-#{$s});
          --line-height: var(--line-height-#{$s});
        }
        .font-#{$f}-#{$s} {
          --font-size: var(--font-size-#{$f}-#{$s});
          --line-height: var(--line-height-#{$f}-#{$s});
        }
      }
    }

  } @else {
    @include homework-legacy-font-setup;
  }
}
