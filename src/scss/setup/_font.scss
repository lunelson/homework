//   __            _
//  / _|          | |
// | |_ ___  _ __ | |_
// |  _/ _ \| '_ \| __|
// | || (_) | | | | |_
// |_| \___/|_| |_|\__|

// TODO
// - handle non-px values in font-mods
// - handle a non-trimming workflow (suppress trim related shit)

$fonts: () !default;

$font-default: (
  family: (arial, sans-serif),
  spacing-max: 0,
  spacing-end: 50,
  trim-x: 0,
  trim-capline: 0,
  trim-baseline: 0,
);

$fonts-defaults: (
  sans: ( family: (arial, sans-serif) ),
  serif: ( family: (georgia, serif) ),
  mono: ( family: (monaco, consolas, monospace) )
);

@mixin font-base($f) {
  --font-family: var(--font-family-#{$f});
  --letter-spacing: var(--letter-spacing-#{$f});
  --trim-x: var(--trim-x-#{$f});
}

@mixin font-mod($f, $s) {
  --font-size: var(--font-size-#{$f}-#{$s});
  --line-height: var(--line-height-#{$f}-#{$s});
  --trim-top: var(--trim-top-#{$f}-#{$s});
  --trim-bottom: var(--trim-bottom-#{$f}-#{$s});
}

@mixin medium-font-mods($medium) {
  @each $f, $mod in map-get($medium, 'font-mods') or () {
    @each $s, $def in $mod {
      $size: strip(nth($def, 1));
      $line: nth($def, 2);
      // NB line-heights > 6 are assumed to be px values
      --font-size-#{$f}-#{$s}: #{$size / 16 * 1rem};
      --line-height-#{$f}-#{$s}: #{if($line > 6, $line/$size, $line)};
      --trim-top-#{$f}-#{$s}: calc((var(--line-height-#{$f}-#{$s}) - 1) * 1em / 2 + var(--trim-capline-#{$f}) * 1em);
      --trim-bottom-#{$f}-#{$s}: calc((var(--line-height-#{$f}-#{$s}) - 1) * 1em / 2 + var(--trim-baseline-#{$f}) * 1em);
    }
  }
}

//   __            _                   _
//  / _|          | |                 | |
// | |_ ___  _ __ | |_ ______ ___  ___| |_ _   _ _ __
// |  _/ _ \| '_ \| __|______/ __|/ _ \ __| | | | '_ \
// | || (_) | | | | |_       \__ \  __/ |_| |_| | |_) |
// |_| \___/|_| |_|\__|      |___/\___|\__|\__,_| .__/
//                                              | |
//                                              |_|

@mixin homework-font-setup($modern: true, $trim: true, $elements: p ul ol dl h3 h4 h5 h6) {

  $fonts: if(length($fonts) > 0, $fonts, $fonts-defaults) !global;
  @each $f, $font in $fonts {
    $font: map-merge($font-default, $font);
    $fonts: map-merge($fonts, ($f: $font)) !global;
  }

  @if $modern {

    :root {
      @each $f, $font in $fonts {
        --font-family-#{$f}: #{map-get($font, 'family')};
        --letter-spacing-#{$f}: calc(#{map-get($font, 'spacing-max')} * 1px - #{map-get($font, 'spacing-max')} / #{map-get($font, 'spacing-end')} * 1em);
        --trim-x-#{$f}: #{map-get($font, 'trim-x')};
        --trim-capline-#{$f}: #{map-get($font, 'trim-capline')};
        --trim-baseline-#{$f}: #{map-get($font, 'trim-baseline')};
      }
    }

    // TODO: add other selectors here, to force font-family? e.g. input, textarea, :placeholder
    body {
      font-family: var(--font-family);
    }

    #{base-class('font', false)} {
      font-family: var(--font-family);
      font-size: var(--font-size);
      line-height: var(--line-height);
      letter-spacing: var(--letter-spacing);

      // IF TRIM
      @if $trim {
        @at-root #{selector-insert('.trim', '>')},
        #{selector-insert(base-class('stack'), '>')} {
          margin: calc(0px - var(--trim-top)) var(--trim-x) calc(0px - var(--trim-bottom);
        }
        @at-root #{selector-insert(#{base-class('stack')}, '> * +')} {
          margin-top: calc(var(--stack-gap) - var(--trim-top));
        }
        @at-root #{selector-insert(selector-insert(#{base-class('stack')}, '>', #{base-class('font', false)}), '+')} {
          margin-top: calc(var(--stack-gap) - var(--trim-top));
        }
      }

      // IF NOT TRIM
      @else {
        @at-root #{selector-insert(#{base-class('stack')}, '> * +')} {
          margin-top: calc(var(--stack-gap));
        }
      }
    }

    @each $f, $font in $fonts {
      #{if($f == nth(map-keys($fonts), 1),'body,','')}
      #{base-class('font-#{$f}')} {
        --font-family: var(--font-family-#{$f});
        --letter-spacing: var(--letter-spacing-#{$f});
        --trim-x: var(--trim-x-#{$f});
        @each $s, $def in map-get-z($root, 'font-mods', $f) or () {
          --font-size-#{$s}: var(--font-size-#{$f}-#{$s});
          --line-height-#{$s}: var(--line-height-#{$f}-#{$s});
          --trim-top-#{$s}: var(--trim-top-#{$f}-#{$s});
          --trim-bottom-#{$s}: var(--trim-bottom-#{$f}-#{$s});
        }
      }
    }

    @each $f, $mod in map-get($root, 'font-mods') or () {
      @each $s in map-keys($mod) {
        .font-#{$s} {
          --font-size: var(--font-size-#{$s});
          --line-height: var(--line-height-#{$s});
          --trim-top: var(--trim-top-#{$s});
          --trim-bottom: var(--trim-bottom-#{$s});
        }
        .font-#{$f}-#{$s} {
          --font-size: var(--font-size-#{$f}-#{$s});
          --line-height: var(--line-height-#{$f}-#{$s});
          --trim-top: var(--trim-top-#{$f}-#{$s});
          --trim-bottom: var(--trim-bottom-#{$f}-#{$s});
        }
      }
    }

    #{base-class('wysiwyg')} {
      @include stack;
      #{zip($elements)} {
        font-family: var(--font-family);
        font-size: var(--font-size);
        line-height: var(--line-height);
        letter-spacing: var(--letter-spacing);

        @at-root #{selector-insert('>')} {
          margin: calc(0px - var(--trim-top)) var(--trim-x) calc(0px - var(--trim-bottom);
        }
        @at-root #{selector-insert('> * +')} {
          margin-top: calc(var(--stack-gap) - var(--trim-top));
        }
        @at-root #{selector-insert(selector-insert('>', '', #{zip($elements)}), '+')} {
          margin-top: calc(var(--stack-gap) - var(--trim-top) - 0.25em);
        }
      }
    }

  } @else {
    @include homework-legacy-font-setup;
  }
}
