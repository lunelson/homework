//   __            _
//  / _|          | |
// | |_ ___  _ __ | |_
// |  _/ _ \| '_ \| __|
// | || (_) | | | | |_
// |_| \___/|_| |_|\__|


/*
  TODO
  - handle non-px values in font-mods

*/

$fonts: () !default;

$font-default: (
  family: (arial, sans-serif),
  spacing-max: 0,
  spacing-end: 50,
  trim-x: 0,
  trim-top: 0,
  trim-bottom: 0,
);

$fonts-defaults: (
  sans: ( family: (arial, sans-serif) ),
  serif: ( family: (georgia, serif) ),
  mono: ( family: (monaco, consolas, "lucida console", monospace) )
);

@mixin homework-font-setup($modern: true) {

  $fonts: if(length($fonts) > 0, $fonts, $fonts-defaults) !global;

  @each $f, $font in $fonts {
    $font: map-merge($font-default, $font);
    $fonts: map-merge($fonts, ($f: $font)) !global;
  }

  @if $modern {

    :root {
      --font-family: #{map-get-z($fonts, nth(map-keys($fonts), 1), 'family')};
      --line-xtra: calc((var(--line-height) - 1) * 1em);
    }

    html * {
      font-family: var(--font-family);
      font-size: var(--font-size);
      line-height: var(--line-height);
    }

    $base-classes: list-map(map-keys($fonts), 'base-class', 'comma');
    #{$base-classes} {
      letter-spacing: calc(var(--spacing-max) * 1px - var(--spacing-max) / var(--spacing-end) * 1em);
      margin-right: var(--trim-x);
      margin-left: var(--trim-x);
      $is-trim: selector-parse('&.trim');
      $in-stack: insert-parents(base-class('stack'), '>');
      @at-root #{$is-trim}, #{$in-stack} {
        margin-top: calc(0px - var(--trim-top));
        margin-bottom: calc(0px - var(--trim-bottom));
      }
      $adj-in-stack: insert-parents(base-class('stack'), '> * +');
      @at-root #{$adj-in-stack} {
        margin-top: calc(var(--stack-gap) - var(--trim-top));
      }
    }

    /*
      #{base-class('f')} {...}
      #{base-class('stack')} > #{base-class('f')} {...}
      #{base-class('stack')} > * + #{base-class('f')} {...}
      #{base-class('stack')} > #{base-class('f')} + #{base-class('f')} {...}
    */

    @each $f, $font in $fonts {
      #{base-class($f)} {
        --font-family: #{map-get($font, 'family')};
        --spacing-max: #{map-get($font, 'spacing-max')};
        --spacing-end: #{map-get($font, 'spacing-end')};
        --trim-x: #{map-get($font, 'trim-x')};
        --trim-capline: #{map-get($font, 'trim-capline') * 1em};
        --trim-baseline: #{map-get($font, 'trim-baseline') * 1em};
        --trim-top: var(--line-xtra) / 2 + var(--trim-capline);
        --trim-bottom: var(--line-xtra) / 2 + var(--trim-baseline);
      }
    }

    @each $f, $mod in map-get($root, 'font-mods') or () {
      @each $s, $def in $mod {
        .#{$f}--#{$s} {
          --font-size: var(--font-size--#{$f}--#{$s});
          --line-height: var(--line-height--#{$f}--#{$s});
        }
      }
    }
  } @else { @include legacy-homework-font-setup(); }
}
