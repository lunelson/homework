@import '../peers';

$media: (
  a: (breakpoint: 20em),
  b: (breakpoint: 30em),
  c: (breakpoint: 40em),
  );

@include m-init(false);

@import '../../index';

$grid-columns: 12; // could be parsed out of $media

$gcd-ratios: ();
@for $d from 1 through $grid-columns {
  @for $n from 1 through $d {
    $gcd: gcd($n, $d); $reduction: $n/$gcd $d/$gcd;
    $set: append(map-get($gcd-ratios, $reduction) or (), $n $d);
    $gcd-ratios: map-merge($gcd-ratios, ($reduction: $set));
  }
}

$all-ratios: join-all(map-values($gcd-ratios)...);

//  _            _
// | |          | |
// | |_ ___  ___| |_ ___
// | __/ _ \/ __| __/ __|
// | ||  __/\__ \ |_\__ \
//  \__\___||___/\__|___/

/*
  ATOMIC

  util-classes, per medium
  display: d- none, flex, block, iblock, inline __[m]
  margin: m-, m-neg- [mult] [ratio] [col] __[m]
  padding
  width
  height

*/
@function ratio-str($ratio)    { @return "#{nth($ratio,1)}-#{nth($ratio,2)}"; }
@function ratio-val($ratio)    { @return percentage(nth($ratio,1) / nth($ratio,2)); }
@function ratio-class($ratio, $index, $list, $root, $fx) { @return '#{$root}-#{ratio-str($ratio)}#{$fx}'; }
// @function span--N-D($ratio, $rest...)       { @return mod-class('span', ratio-str($ratio)); }

@function list-transform($list, $func, $args...) {
  @if length($list) == 0 { @return (); }
  $result: ();
  @for $n from 1 through length($list) {
    $result: append($result, call($func, nth($list, $n), $n, $list, $args...), 'comma');
  }
  @return $result;
}

// #{span--N-D(1 2)} { content: 'hello world'; }

// .test {
//   out: inspect($gcd-ratios);
// }

@each $m in join(null, map-keys($media)) {
  @include m($m) {
    $fx: m-suffix();

    //
    // DISPLAY
    //

    .d-none#{$fx} { display: none; }
    .d-flex#{$fx} { display: flex; }
    .d-flex-y#{$fx} { display: flex; }
    .d-block#{$fx} { display: block; }
    .d-iblock#{$fx} { display: inline-block; }
    .d-inline#{$fx} { display: inline; }

    //
    // WIDTH, MARGIN, PADDING
    //

    @each $gcd, $ratio-list in $gcd-ratios {
      #{list-transform($ratio-list, 'ratio-class', 'w', $fx)} { width: ratio-val($gcd) }
      #{list-transform($ratio-list, 'ratio-class', 'pr', $fx)} { padding-right: ratio-val($gcd) }
      #{list-transform($ratio-list, 'ratio-class', 'pl', $fx)} { padding-left: ratio-val($gcd) }
      #{list-transform($ratio-list, 'ratio-class', 'mr', $fx)} { margin-right: ratio-val($gcd) }
      #{list-transform($ratio-list, 'ratio-class', 'mr-neg', $fx)} { margin-right: ratio-val($gcd)/-1 }
      #{list-transform($ratio-list, 'ratio-class', 'ml', $fx)} { margin-left: ratio-val($gcd) }
      #{list-transform($ratio-list, 'ratio-class', 'ml-neg', $fx)} { margin-left: ratio-val($gcd)/-1 }
    }
  }
}



/* TODO

- atomic classes

*/


/* #{map-stringify($gcd-ratios)} */
/* #{map-stringify($all-ratios)} */

.test {
  base: inspect(m(null));
  a: inspect(m(a));
  b: inspect(m(b));
  c: inspect(m(c));
  values: inspect(map-values($media));
}

// @each $m, $medium in $media {
//   @include m($m) {
//     html { color: blue; }
//   }
// }
