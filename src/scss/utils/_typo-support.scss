//
// globals
//


$fonts: () !default;

$font-default: (
  family: (arial, sans-serif),
  spacing-max: 0,
  spacing-end: 50,
  trim-x: 0,
  trim-top: 0,
  trim-bottom: 0,
);

$fonts-defaults: (
  sans: ( family: (arial, sans-serif) ),
  serif: ( family: (georgia, serif) ),
  mono: ( family: (monaco, consolas, "lucida console", monospace) )
);

$body-font: null !default;


//
// functions
//


@function font($f: $body-font) {
  @return map-get($fonts, $f) or nth(nth($fonts, 1), 2);
}

@mixin font($f) {
  $font: font($f);
  font-family: map-get($font, 'family');
  $spacing-max: map-get($font, 'spacing-max');
  $spacing-end: map-get($font, 'spacing-end');
  @if $spacing-max > 0 {
    letter-spacing: calc(#{$spacing-max}px - #{$spacing-max/$spacing-end}em);
    // &, & button, & input, & textarea {
    // }
  }
}


@function font-var($key, $f: $curr-font) {
  @return map-get(font($f), $key) or error("key '#{$key}' not found in $font '#{$f or base}'");
}


// @function font-align($f: $curr-font) {
//   @return (map-get(font($f), trim-top) - map-get(font($f), trim-bottom))/2*1em;
// }

//
// trim functions
//


@function trim-top-abs($line: $curr-line, $font: $curr-font) {
  @return (strip($line) - 1) * 0.5em + font-var('trim-top', $font) * 1em;
}

@function trim-bottom-abs($line: $curr-line, $font: $curr-font) {
  @return (strip($line) - 1) * 0.5em + font-var('trim-bottom', $font) * 1em;
}

@function trim-top-margin($mult: $curr-inner-y, $line: $curr-line, $font: $curr-font) {
  @return subtract(inner-y($mult), trim-top-abs($line, $font));
}

@function trim-bottom-margin($mult: $curr-inner-y, $line: $curr-line, $font: $curr-font) {
  @return subtract(inner-y($mult), trim-bottom-abs($line, $font));
}





// //
// // mixins -- may still be needed for wysiwyg stuff
// //

// $curr-line: 1; // key | value
// $curr-font: null; // key

// // for the trim mixin
// $trim-parent: 'stack' !default;
// $trim-except: 'block' !default;
// $curr-stack: null !default; // also declared in sass-oo

// @mixin trim($line: $curr-line, $font: $curr-font, $opts: ()) {

//   // save scope
//   $prev-line: $curr-line;
//   $prev-font: $curr-font;

//   $curr-line: $line !global;
//   $curr-font: $font !global;

//   // IF STACK CONTEXT
//   @if $curr-stack {
//     @at-root #{insert-parents(null,'>')} {
//       margin-top: trim-top-margin(0, $line, $font);
//       margin-bottom: trim-bottom-margin(0, $line, $font);
//       @include adjacent-to('*') { margin-top: trim-margin(null, $line, $font, $type); }
//       @content;
//     }
//   }
//   // IF NO STACK CONTEXT
//   @else {
//     $trim: selector-parse('&.trim');
//     @at-root #{$trim}, #{insert-parents(base-class($trim-parent), '>')} {
//       margin-top: trim-top-margin(0, $line, $font);
//       margin-bottom: trim-bottom-margin(0, $line, $font);
//     }
//     @each $key, $mult in map-merge((base: 1), medium-var('inner-y-mods')) {
//       @at-root #{insert-parents(mult-class($trim-parent, $key),'>')} {
//         @include adjacent-to('*') { margin-top: trim-top-margin($mult, $line, $font); }
//         @content;
//       }
//     }
//   }

//   // restore scopes
//   $curr-line: $prev-line !global;
//   $curr-font: $prev-font !global;
// }


// @mixin typo($f, $s) {
//   $copy-size: get(medium-var('copy-sizes'), $f, $s);
//   $px-base: strip(medium-var('font-size'));
//   $px-size: nth($copy-size, 1);
//   $px-line: nth($copy-size, 2);
//   $line: $px-line / $px-size;
//   font-size: $px-size / $px-base * 1rem;
//   line-height: $line;

//   @at-root #{insert-parents(null, '>')} {
//     margin-top: trim-top-margin(0, $line, $f);
//     margin-bottom: trim-bottom-margin(0, $line, $f);
//     @include adjacent-to('*') { margin-top: trim-top-margin($curr-inner-y, $line, $f); }

//     $prev-line: $curr-line;
//     $prev-font: $curr-font;

//     $curr-line: $line !global;
//     $curr-font: $f !global;
//     @content;

//     $curr-line: $prev-line !global;
//     $curr-font: $prev-font !global;
//   }

//   // restore scopes

// }

// @mixin trims($f, $s, $y-mods: ()) {
//   $mults: ();
//   @each $y in $y-mods { $mults: append($mults, inner-y-mods $y); }
//   $props: join($mults, (inner-y, inner-y-mods $curr-inner-y copy-sizes $f $s));
//   @include mm-for($props) {
//     $copy-size: get(medium-var('copy-sizes'), $f, $s);
//     $px-base: strip(medium-var('font-size'));
//     $px-size: nth($copy-size, 1);
//     $px-line: nth($copy-size, 2);
//     $line: $px-line / $px-size;
//     font-size: $px-size / $px-base * 1rem;
//     line-height: $line;

//     @at-root #{insert-parents(null, '>')} {
//       margin-top: trim-top-margin(0, $line, $f);
//       margin-bottom: trim-bottom-margin(0, $line, $f);
//       @include adjacent-to('*') { margin-top: trim-top-margin($curr-inner-y, $line, $f); }

//       $prev-line: $curr-line;
//       $prev-font: $curr-font;

//       $curr-line: $line !global;
//       $curr-font: $f !global;
//       @content;

//       $curr-line: $prev-line !global;
//       $curr-font: $prev-font !global;
//     }
//   }
// }
