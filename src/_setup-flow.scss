//   __ _                                                  _          _
//  / _| |                                                | |        | |
// | |_| | _____      ________ ___ _ __   __ _ _ __ ______| |__   ___| |_ __   ___ _ __ ___
// |  _| |/ _ \ \ /\ / /______/ __| '_ \ / _` | '_ \______| '_ \ / _ \ | '_ \ / _ \ '__/ __|
// | | | | (_) \ V  V /       \__ \ |_) | (_| | | | |     | | | |  __/ | |_) |  __/ |  \__ \
// |_| |_|\___/ \_/\_/        |___/ .__/ \__,_|_| |_|     |_| |_|\___|_| .__/ \___|_|  |___/
//                                | |                                  | |
//                                |_|                                  |_|


@function span-d() {
  @return if($homework-is-modern, var(--span-d), m-var('grid-columns'));
}

@function row-gap($y: null) {
  @return if($homework-is-modern, var(--row-gap), inner-y($y));
}

@function column-gap($x: null) {
  @return if($homework-is-modern, var(--column-gap), inner-x($x));
}

@function max-columns() {
  @if not (length($media) > 0) { @return m-var('grid-columns'); }
  $column-counts: ();
  @each $m, $medium in $media {
    $column-counts: append($column-counts, map-get-z($media, $m, 'grid-columns'));
  }
  @return max($column-counts...);
}

@function span-width($n: 1, $span-d: span-d()) {
  @return calc(99.99999% * #{$n} / #{$span-d});
}

@function span-i-width($n: 1, $span-d: span-d()) {
  @return calc((99.99999% + #{column-gap()}) * #{$n} / #{$span-d} - #{column-gap()});
}

@function push-i-width($p: 1, $span-d: span-d()) {
  @return calc((99.99999% + #{column-gap()}) * #{$p} / #{$span-d});
}

@mixin span($n: null, $l: null, $r: null, $span-d: span-d()) {
  @if $n and $homework-is-modern { & > * { --span-d: #{$n}; } }
  @if $n { width: span-width($n, $span-d); }
  @if $l { margin-left: span-width($l, $span-d); }
  @if $r { margin-right: span-width($r, $span-d); }
}

@mixin spans($spans) {
  @each $m, $span in $spans {
    @include m($m) {
      @include span($span...);
    }
  }
}

@mixin span-i($n: null, $l: null, $r: null, $span-d: span-d()) {
  @if $n and $homework-is-modern { & > * { --span-d: #{$n}; } }
  @if $n { width: span-i-width($n, $span-d); }
  @if $l { margin-left: push-i-width($l, $span-d); }
  @if $r { margin-right: push-i-width($r, $span-d); }
}

@mixin spans-i($spans) {
  @each $m, $span in $spans {
    @include m($m) {
      @include span-i($span...);
    }
  }
}


@function ratio-str($ratio) { @return "#{nth($ratio,1)}-#{nth($ratio,2)}"; }
@function ratio-class($ratio, $index, $list, $root, $__m) { @return '.#{$root}-#{ratio-str($ratio)}#{$__m}'; }

@function ratio-span-width($ratio) { @return span-width(#{nth($ratio,1)}, #{nth($ratio,2)}); }
@function ratio-span-i-width($ratio) { @return span-i-width(#{nth($ratio,1)}, #{nth($ratio,2)}); }
@function ratio-push-i-width($ratio) { @return push-i-width(#{nth($ratio,1)}, #{nth($ratio,2)}); }


//   __ _                                                           _
//  / _| |                                                         | |
// | |_| | _____      ________ ___ _ __   __ _ _ __ ______ ___  ___| |_ _   _ _ __
// |  _| |/ _ \ \ /\ / /______/ __| '_ \ / _` | '_ \______/ __|/ _ \ __| | | | '_ \
// | | | | (_) \ V  V /       \__ \ |_) | (_| | | | |     \__ \  __/ |_| |_| | |_) |
// |_| |_|\___/ \_/\_/        |___/ .__/ \__,_|_| |_|     |___/\___|\__|\__,_| .__/
//                                | |                                        | |
//                                |_|                                        |_|


@mixin homework-flow-setup($modern: $homework-is-modern, $max-columns: max-columns(), $ratios: false) {

  // #{base-class('flow')} {
  //   margin-top: calc(#{row-gap()} / -2);
  //   margin-bottom: calc(#{row-gap()} / -2);
  //   & > * {
  //     padding-top: calc(#{row-gap()} / 2) !important;
  //     padding-bottom: calc(#{row-gap()} / 2) !important;
  //   }
  // }

  // #{base-class('row')},
  #{base-class('flow')} {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    // width: calc(100% + #{column-gap()}) !important;;
    // margin-left: calc(#{column-gap()} / -2);
    // margin-right: calc(#{column-gap()} / -2);
    & > * {
      flex: 0 0 auto;
      width: 100%;
      min-width: 0%; // https://css-tricks.com/flexbox-truncated-text/
      min-height: 1px;
      overflow-wrap: break-word; // break long words
      background-clip: content-box;
      // padding-left: calc(#{column-gap()} / 2) !important;
      // padding-right: calc(#{column-gap()} / 2) !important;
    }
  }

  .flow-0 {
    width: 100% !important;
    margin-top: 0 !important;
    margin-bottom: 0 !important;
    & > * {
      padding-top: 0 !important;
      padding-bottom: 0 !important;
    }
  }

  $inner-y-keys: map-keys(inner-y-mods());


  /////////////////////////////////////////////
  /////////////////// modern //////////////////
  /////////////////////////////////////////////

  @if $modern {

    :root {
      --row-gap: var(--inner-y);
      --column-gap: var(--inner-x);
      --span-d: var(--grid-columns);
      --span-n: var(--span-d);
    }

    #{base-class('flow')} {
      width: calc(100% + var(--column-gap)) !important;;
      margin-left: calc(var(--column-gap) / -2);
      margin-right: calc(var(--column-gap) / -2);
      margin-top: calc(var(--row-gap) / -2);
      margin-bottom: calc(var(--row-gap) / -2);
      & > * {
        padding-left: calc(var(--column-gap) / 2) !important;
        padding-right: calc(var(--column-gap) / 2) !important;
        padding-top: calc(var(--row-gap) / 2) !important;
        padding-bottom: calc(var(--row-gap) / 2) !important;
      }
    }

    #{base-class('span')},
    #{base-m-class('span', false)} {
      width: calc(99.99999% * var(--span-n) / var(--span-d));
    }

    #{base-class('span-i')},
    #{base-m-class('span-i', false)} {
      width: calc((99.99999% + var(--column-gap)) * var(--span-n) / var(--span-d) - var(--column-gap));
    }

    @each $y in $inner-y-keys {
      .flow-#{$y} { --row-gap: var(--inner-y-#{$y}); }
    }

    @each $m in join((null), map-keys($media)) {
      @include m($m) {

        $__m: m-suffix();

        // these are required to ensure that span__[bp] also counts
        // consider using span-all and span-i-all instead;
        // ...and eliminating base-m-class classes above
        .span#{$__m} { --span-n: var(--span-d); }
        .span-i#{$__m} { --span-n: var(--span-d); }

        @for $n from 1 through $max-columns {

          // span
          .span-#{$n}#{$__m} { --span-n: #{$n}; & > * { --span-d: var(--span-n); } }

          // span-i
          .span-i-#{$n}#{$__m} { --span-n: #{$n}; & > * { --span-d: var(--span-n); } }

          // span atomics
          .ml-#{$n}#{$__m} { margin-left: calc(99.99999% * #{$n} / var(--span-d)) !important; }
          .mr-#{$n}#{$__m} { margin-right: calc(99.99999% * #{$n} / var(--span-d)) !important; }
          .ml-neg-#{$n}#{$__m} { margin-left: calc(99.99999% * #{-1 * $n} / var(--span-d)) !important; }
          .mr-neg-#{$n}#{$__m} { margin-right: calc(99.99999% * #{-1 * $n} / var(--span-d)) !important; }

          // span-i atomics
          .ml-i-#{$n}#{$__m} { margin-left: calc((99.99999% + var(--column-gap)) * #{$n} / var(--span-d)) !important; }
          .mr-i-#{$n}#{$__m} { margin-right: calc((99.99999% + var(--column-gap)) * #{$n} / var(--span-d)) !important; }
          .ml-i-neg-#{$n}#{$__m} { margin-left: calc((99.99999% + var(--column-gap)) * #{-1 * $n} / var(--span-d)) !important; }
          .mr-i-neg-#{$n}#{$__m} { margin-right: calc((99.99999% + var(--column-gap)) * #{-1 * $n} / var(--span-d)) !important; }

        }

      }
    }
  }


  /////////////////////////////////////////////
  /////////////////// legacy //////////////////
  /////////////////////////////////////////////

  @else {

    @include mm-for('inner-y', 'inner-y-mods', 'inner-mods') {
      @each $y in $inner-y-keys {
        $row-gap: row-gap($y);

        .flow-#{$y} {
          margin-top: calc(#{$row-gap} / -2);
          margin-bottom: calc(#{$row-gap} / -2);
          & > * {
            padding-top: calc(#{$row-gap} / 2) !important;
            padding-bottom: calc(#{$row-gap} / 2) !important;
          }
        }
      }
    }

    @include mm-for('inner-x') {
      $column-gap: column-gap();

      #{base-class('flow')} {
        width: calc(100% + #{$column-gap}) !important;;
        margin-left: calc(#{$column-gap} / -2);
        margin-right: calc(#{$column-gap} / -2);
        & > * {
          padding-left: calc(#{$column-gap} / 2) !important;
          padding-right: calc(#{$column-gap} / 2) !important;
        }
      }
    }

    /////////////////////////////////////////////
    // TODO: fix the following; $__m has no reference //
    /////////////////////////////////////////////

    // dimensions: explicit ratios
    // @if $ratios {

    //   $media-grid-columns: ();
    //   $reduction-ratio-lists: ();

    //   @each $m, $medium in $media {
    //     $media-grid-columns: append($media-grid-columns, map-get($medium, 'grid-columns'));
    //   }

    //   @for $d from 1 through max($media-grid-columns...) {
    //     @for $n from 1 through $d {
    //       $gcd: gcd($n, $d); $reduction: $n/$gcd $d/$gcd;
    //       $set: append(map-get($reduction-ratio-lists, $reduction) or (), $n $d);
    //       $reduction-ratio-lists: map-merge($reduction-ratio-lists, ($reduction: $set));
    //     }
    //   }

    //   @each $reduction, $ratio-list in $reduction-ratio-lists {
    //     // explicit percentage ratios
    //     #{__map($ratio-list, 'ratio-class', 'span', $__m)},
    //     #{__map($ratio-list, 'ratio-class', 'w', $__m)} { width: ratio-span-width($reduction) }
    //     #{__map($ratio-list, 'ratio-class', 'px', $__m)},
    //     #{__map($ratio-list, 'ratio-class', 'pr', $__m)} { padding-right: ratio-span-width($reduction) }
    //     #{__map($ratio-list, 'ratio-class', 'px', $__m)},
    //     #{__map($ratio-list, 'ratio-class', 'pl', $__m)} { padding-left: ratio-span-width($reduction) }
    //     #{__map($ratio-list, 'ratio-class', 'mx', $__m)},
    //     #{__map($ratio-list, 'ratio-class', 'mr', $__m)} { margin-right: ratio-span-width($reduction) }
    //     #{__map($ratio-list, 'ratio-class', 'mx', $__m)},
    //     #{__map($ratio-list, 'ratio-class', 'ml', $__m)} { margin-left: ratio-span-width($reduction) }
    //     #{__map($ratio-list, 'ratio-class', 'mx-neg', $__m)},
    //     #{__map($ratio-list, 'ratio-class', 'mr-neg', $__m)} { margin-right: multiply(#{ratio-span-width($reduction)}, -1) }
    //     #{__map($ratio-list, 'ratio-class', 'mx-neg', $__m)},
    //     #{__map($ratio-list, 'ratio-class', 'ml-neg', $__m)} { margin-left: multiply(#{ratio-span-width($reduction)}, -1) }

    //     // explicit span-internal ratio classes
    //     #{__map($ratio-list, 'ratio-class', 'span-i', $__m)},
    //     #{__map($ratio-list, 'ratio-class', 'w-i', $__m)} { width: ratio-span-i-width($reduction) }
    //     #{__map($ratio-list, 'ratio-class', 'mx-i', $__m)},
    //     #{__map($ratio-list, 'ratio-class', 'mr-i', $__m)} { margin-right: ratio-push-i-width($reduction) }
    //     #{__map($ratio-list, 'ratio-class', 'mx-i', $__m)},
    //     #{__map($ratio-list, 'ratio-class', 'ml-i', $__m)} { margin-left: ratio-push-i-width($reduction) }
    //     #{__map($ratio-list, 'ratio-class', 'mx-i-neg', $__m)},
    //     #{__map($ratio-list, 'ratio-class', 'mr-i-neg', $__m)} { margin-right: multiply(#{ratio-push-i-width($reduction)}, -1) }
    //     #{__map($ratio-list, 'ratio-class', 'mx-i-neg', $__m)},
    //     #{__map($ratio-list, 'ratio-class', 'ml-i-neg', $__m)} { margin-left: multiply(#{ratio-push-i-width($reduction)}, -1) }
    //   }
    // }

  }
}
