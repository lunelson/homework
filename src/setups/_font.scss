//   __            _             _       __            _ _
//  / _|          | |           | |     / _|          | | |
// | |_ ___  _ __ | |_ ______ __| | ___| |_ __ _ _   _| | |_ ___
// |  _/ _ \| '_ \| __|______/ _` |/ _ \  _/ _` | | | | | __/ __|
// | || (_) | | | | |_      | (_| |  __/ || (_| | |_| | | |_\__ \
// |_| \___/|_| |_|\__|      \__,_|\___|_| \__,_|\__,_|_|\__|___/

// TODO
// handle non-px values in font-mods
// figure out what HTML elements require explicitly applying --font-family
// apply the increased --trim-top to cases where font is adjacent to font -- only to the custom property !


$fonts: () !default;

$font-default: (
  family: (arial, sans-serif),
  spacing-max: 0,
  spacing-end: 50,
  trim-x: 0,
  trim-capline: 0,
  trim-baseline: 0,
);

$fonts-defaults: (
  sans: ( family: (arial, sans-serif) ),
  serif: ( family: (georgia, serif) ),
  mono: ( family: (monaco, consolas, monospace) )
);


//   __            _          _          _
//  / _|          | |        | |        | |
// | |_ ___  _ __ | |_ ______| |__   ___| |_ __   ___ _ __ ___
// |  _/ _ \| '_ \| __|______| '_ \ / _ \ | '_ \ / _ \ '__/ __|
// | || (_) | | | | |_       | | | |  __/ | |_) |  __/ |  \__ \
// |_| \___/|_| |_|\__|      |_| |_|\___|_| .__/ \___|_|  |___/
//                                        | |
//                                        |_|

//
// trim functions
//

@function font-value($f, $key) { @return map-get-z($fonts, $f, $key); }

@function f-val($f, $key) { @return font-value($f, $key); }

@function line-trim-top($f: null, $s: null) {
  $trim: font-value('trim-capline') or 0;
  $line: line-height($f, $s);
  @return ($line - 1) * 0.5em + $trim * 1em;
}

@function line-trim-bottom($f: null, $s: null) {
  $trim: font-value('trim-baseline') or 0;
  $line: line-height($f, $s);
  @return ($line - 1) * 0.5em + $trim * 1em;
}


@mixin font-base($f) {
  --font-family: var(--font-family-#{$f});
  --letter-spacing: var(--letter-spacing-#{$f});
  --trim-x: var(--trim-x-#{$f});
}

@mixin font-mod($f, $s, $y: null, $trim: true) {

  @if $homework-is-modern {
    --font-size: var(--font-size-#{$f}-#{$s});
    --line-height: var(--line-height-#{$f}-#{$s});
    @if $trim {
      --trim-top: var(--trim-top-#{$f}-#{$s});
      --trim-bottom: var(--trim-bottom-#{$f}-#{$s});
    }
  }

  @else {
    @include mm-for('font-mods' $f $s) {
      font-size: font-size($f, $s);
      line-height: line-height($f, $s);
    }
  }

}


@mixin stack-font($f, $s, $y: null, $trim: true) {

  $font: map-get($fonts, $f);
  $spacing-max: map-get($font, 'spacing-max');
  $spacing-end: map-get($font, 'spacing-end');

  font-family: map-get($font, 'family');
  @if $spacing-max > 0 {
    letter-spacing: calc(#{$spacing-max}px - #{$spacing-max/$spacing-end}em);
  }

  @include mm-for('font-mods' $f $s) {
    font-size: font-size($f, $s);
    line-height: line-height($f, $s);
  }

  // IF TRIM
  @if $trim {

    @at-root #{selector-insert('>')} {
      // TODO: re-add trim-x values here
      margin-top: subtract(0, line-trim-top($f, $s));
      margin-bottom: subtract(0, line-trim-bottom($f, $s));
    }
    @at-root #{selector-insert('> * +')} {
      margin-top: subtract(inner-y($y), line-trim-top($f, $s));
    }
    // @at-root #{selector-insert(selector-insert('>', '', #{zip($elements)}), '+')} {
    //   // margin-top: calc(var(--stack-gap) - var(--trim-top) - 0.25em);
    //   margin-top: subtract(inner-y(), line-trim-top());
    // }

  // IF NOT TRIM
  } @else {

    @at-root #{selector-insert('>')} {
      // TODO: re-add trim-x values here
      // margin: 0 var(--trim-x);
      margin-top: 0;
      margin-bottom: 0;
    }
    @at-root #{selector-insert('> * +')} {
      margin-top: inner-y($y);
    }


  }
}


//   __            _                   _
//  / _|          | |                 | |
// | |_ ___  _ __ | |_ ______ ___  ___| |_ _   _ _ __
// |  _/ _ \| '_ \| __|______/ __|/ _ \ __| | | | '_ \
// | || (_) | | | | |_       \__ \  __/ |_| |_| | |_) |
// |_| \___/|_| |_|\__|      |___/\___|\__|\__,_| .__/
//                                              | |
//                                              |_|


@mixin homework-font-setup(
  $modern: $homework-is-modern,
  $trim: true,
  $elements: p ul ol dl h3 h4 h5 h6 blockquote
) {

  $fonts: if(length($fonts) > 0, $fonts, $fonts-defaults) !global;

  @each $f, $font in $fonts {
    $font: map-merge($font-default, $font);
    $fonts: map-merge($fonts, ($f: $font)) !global;
  }

  @if $modern {

    :root {

      // root font defs
      @each $f, $font in $fonts {
        --font-family-#{$f}: #{map-get($font, 'family')};
        --letter-spacing-#{$f}: calc(#{map-get($font, 'spacing-max')} * 1px - #{map-get($font, 'spacing-max')} / #{map-get($font, 'spacing-end')} * 1em);
        --trim-x-#{$f}: #{map-get($font, 'trim-x')};
        @if $trim {
          --trim-capline-#{$f}: #{map-get($font, 'trim-capline')};
          --trim-baseline-#{$f}: #{map-get($font, 'trim-baseline')};
        }
      }

      // per-medium font mods
      @each $m in join((null), map-keys($media)) {
        @include m($m) {
          @each $f, $mod in m-var('font-mods') or () {
            @each $s, $def in $mod {
              $size: strip(nth($def, 1));
              $line: nth($def, 2);
              // NB line-heights > 6 are assumed to be px values
              --font-size-#{$f}-#{$s}: #{$size / 16 * 1rem};
              --line-height-#{$f}-#{$s}: #{if($line > 6, $line/$size, $line)};
              @if $trim {
                --trim-top-#{$f}-#{$s}: calc((var(--line-height-#{$f}-#{$s}) - 1) * 1em / 2 + var(--trim-capline-#{$f}) * 1em);
                --trim-bottom-#{$f}-#{$s}: calc((var(--line-height-#{$f}-#{$s}) - 1) * 1em / 2 + var(--trim-baseline-#{$f}) * 1em);
              }
            }
          }
        }
      }
    }

    $font-base-classes: __map(map-keys($fonts), 'base-class');

    #{$font-base-classes} {
      font-size: var(--font-size);
      line-height: var(--line-height);

      @at-root #{selector-insert(base-class('stack'), '>')} {
        margin-top: if($trim, calc(0px - var(--trim-top)), 0);
        margin-bottom: if($trim, calc(0px - var(--trim-bottom)), 0);
        margin-right: if($trim, var(--trim-x), 0);
        margin-left: if($trim, var(--trim-x), 0);
      }
      @at-root #{selector-insert(#{base-class('stack')}, '> * +')} {
        margin-top: calc(var(--stack-gap) - #{if($trim, var(--trim-top), 0%)});
      }
      // TODO: re-implement this by making --trim-top a stronger value when font+font, under any circumstance
      // @at-root #{selector-insert(selector-insert(#{base-class('stack')}, '>', #{$font-base-classes}), '+')} {
      //   margin-top: calc(var(--stack-gap) - var(--trim-top));
      // }
    }

    @each $f, $font in $fonts {
      #{base-class($f)},
      #{if($f == nth(map-keys($fonts), 1),'body','')} {
        font-family: var(--font-family-#{$f});
        letter-spacing: var(--letter-spacing-#{$f});
        --trim-x: var(--trim-x-#{$f});
      }
    }

    @each $f, $mod in map-get($root, 'font-mods') or () {
      @each $s in map-keys($mod) {
        .#{$f}-#{$s} {
          --font-size: var(--font-size-#{$f}-#{$s});
          --line-height: var(--line-height-#{$f}-#{$s});
          @if $trim {
            --trim-top: var(--trim-top-#{$f}-#{$s});
            --trim-bottom: var(--trim-bottom-#{$f}-#{$s});
          }
        }
      }
    }

    #{base-class('plain')} {

      #{zip($elements)} {
        font-family: var(--font-family);
        font-size: var(--font-size);
        line-height: var(--line-height);
        letter-spacing: var(--letter-spacing);

        // IF TRIM
        @if $trim {
          @at-root #{selector-insert('>')} {
            margin: calc(0px - var(--trim-top)) var(--trim-x) calc(0px - var(--trim-bottom);
          }
          @at-root #{selector-insert('> * +')} {
            margin-top: calc(var(--stack-gap) - var(--trim-top));
          }
          @at-root #{selector-insert(selector-insert('>', '', #{zip($elements)}), '+')} {
            margin-top: calc(var(--stack-gap) - var(--trim-top) - 0.25em);
          }
        }

        // IF NOT TRIM
        @else {
          @at-root #{selector-insert('>')} {
            margin: 0 var(--trim-x);
          }
          @at-root #{selector-insert('> * +')} {
            margin-top: calc(var(--stack-gap));
          }
        }
      }
    }

  } @else {

    //
    // LEGACY
    //

    // font basees
    @each $f, $font in $fonts {

      #{base-class($f)},
      #{if($f == nth(map-keys($fonts), 1),'body','')} {

        // base definition
        $font: map-get($fonts, $f);
        font-family: map-get($font, 'family');
        $spacing-max: map-get($font, 'spacing-max');
        $spacing-end: map-get($font, 'spacing-end');
        @if $spacing-max > 0 {
          letter-spacing: calc(#{$spacing-max}px - #{$spacing-max/$spacing-end}em);
        }

        // trim-x conditions
        $trim-x: map-get-z($fonts, $f, 'trim-x');
        @if $trim-x and $trim-x != 0 {
          $is-trim-x: selector-parse('&.trim-x');
          $is-in-stack: insert-parents(base-class('stack'), '>');
          @at-root #{$is-trim-x}, #{$is-in-stack} {
            margin-right: $trim-x;
            margin-left: $trim-x;
          }
        }
      }
    }

    // font mods and stack contexts
    @each $f, $mod in map-get($root, 'font-mods') or () {
      @each $s in map-keys($mod) {

        @include mm-for('font-mods' $f $s) {
          $def: m-var('font-mods' $f $s);
          $size: strip(nth($def, 1));
          $line: nth($def, 2);

          .#{$f}-#{$s} {

            font-size: #{$size / 16 * 1rem};
            line-height: #{if($line > 6, $line/$size, $line)};

            @if $trim {
              @at-root #{insert-parents(base-class('stack'), '>')} {
                margin-top: subtract(0, line-trim-top($f, $s));
                margin-bottom: subtract(0, line-trim-bottom($f, $s));
              }
            }

          }
        }

        @if $trim {
          @include mm-for('inner-y', 'inner-y-mods', 'inner-mods', 'font-mods'$f $s) {
            @each $y in map-keys(inner-y-mods()) {
              .stack-#{$y} > * + .#{$f}-#{$s} {
                margin-top: subtract(inner-y($y), line-trim-top($f, $s));
              }
            }
          }
        }

      }
    }

    // plain styles
    #{base-class('plain')} {

    }
  }
}
