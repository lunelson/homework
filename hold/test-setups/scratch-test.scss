@import '../peers';

$media: (
  a: (breakpoint: 20em),
  b: (breakpoint: 30em),
  c: (breakpoint: 40em),
  );

@include m-init(false);

@import '../../index';

$grid-columns: 12; // could be parsed out of $media

/*
  WORKING
  m, m-orig
*/

$gcd-ratios: ();
@for $d from 1 through $grid-columns {
  @for $n from 1 through $d {
    $gcd: gcd($n, $d); $reduction: $n/$gcd $d/$gcd;
    $set: append(map-get($gcd-ratios, $reduction) or (), $n $d);
    $gcd-ratios: map-merge($gcd-ratios, ($reduction: $set));
  }
}

$all-ratios: join-all(map-values($gcd-ratios)...);

// @each $m in join(null, map-keys($media)) {
//   @include m($m) {
//     $mfix: m-suffix();
//     .test#{$mfix} {
//       color: blue;
//     }
//   }
// }

/* TODO

- atomic classes

*/


/* #{map-stringify($gcd-ratios)} */
/* #{map-stringify($all-ratios)} */

.test {
  base: inspect(m(null));
  a: inspect(m(a));
  b: inspect(m(b));
  c: inspect(m(c));
  values: inspect(map-values($media));
}

// @each $m, $medium in $media {
//   @include m($m) {
//     html { color: blue; }
//   }
// }
